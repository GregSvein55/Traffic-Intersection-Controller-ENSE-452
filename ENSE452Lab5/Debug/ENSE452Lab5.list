
ENSE452Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dfc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007304  08007304  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007304  08007304  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007304  08007304  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800730c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aac  20000078  08007384  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b24  08007384  00021b24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001542b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323b  00000000  00000000  000354cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00038708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  00039b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000437c  00000000  00000000  0003ae10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014efe  00000000  00000000  0003f18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009576f  00000000  00000000  0005408a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e97f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000605c  00000000  00000000  000e984c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ef4 	.word	0x08006ef4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006ef4 	.word	0x08006ef4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b5b0      	push	{r4, r5, r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fe14 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f940 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f9d4 	bl	800052c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000184:	f000 f97e 	bl	8000484 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000188:	f000 f9a6 	bl	80004d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//clearing screen
  strcpy((char *)cliBufferTX, "\x1b[2J");
 800018c:	4b86      	ldr	r3, [pc, #536]	; (80003a8 <main+0x234>)
 800018e:	4a87      	ldr	r2, [pc, #540]	; (80003ac <main+0x238>)
 8000190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000194:	6018      	str	r0, [r3, #0]
 8000196:	3304      	adds	r3, #4
 8000198:	7019      	strb	r1, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 800019a:	4883      	ldr	r0, [pc, #524]	; (80003a8 <main+0x234>)
 800019c:	f7ff ffe2 	bl	8000164 <strlen>
 80001a0:	4603      	mov	r3, r0
 80001a2:	b29a      	uxth	r2, r3
 80001a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001a8:	497f      	ldr	r1, [pc, #508]	; (80003a8 <main+0x234>)
 80001aa:	4881      	ldr	r0, [pc, #516]	; (80003b0 <main+0x23c>)
 80001ac:	f002 f899 	bl	80022e2 <HAL_UART_Transmit>

//going to top
  strcpy((char *)cliBufferTX, "\x1b[0;0H");
 80001b0:	4b7d      	ldr	r3, [pc, #500]	; (80003a8 <main+0x234>)
 80001b2:	4a80      	ldr	r2, [pc, #512]	; (80003b4 <main+0x240>)
 80001b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001b8:	6018      	str	r0, [r3, #0]
 80001ba:	3304      	adds	r3, #4
 80001bc:	8019      	strh	r1, [r3, #0]
 80001be:	3302      	adds	r3, #2
 80001c0:	0c0a      	lsrs	r2, r1, #16
 80001c2:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80001c4:	4878      	ldr	r0, [pc, #480]	; (80003a8 <main+0x234>)
 80001c6:	f7ff ffcd 	bl	8000164 <strlen>
 80001ca:	4603      	mov	r3, r0
 80001cc:	b29a      	uxth	r2, r3
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	4975      	ldr	r1, [pc, #468]	; (80003a8 <main+0x234>)
 80001d4:	4876      	ldr	r0, [pc, #472]	; (80003b0 <main+0x23c>)
 80001d6:	f002 f884 	bl	80022e2 <HAL_UART_Transmit>

  strcpy((char *)cliBufferTX, "Welcome to the CLI!\r\n");
 80001da:	4a73      	ldr	r2, [pc, #460]	; (80003a8 <main+0x234>)
 80001dc:	4b76      	ldr	r3, [pc, #472]	; (80003b8 <main+0x244>)
 80001de:	4614      	mov	r4, r2
 80001e0:	461d      	mov	r5, r3
 80001e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001ea:	6020      	str	r0, [r4, #0]
 80001ec:	3404      	adds	r4, #4
 80001ee:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80001f0:	486d      	ldr	r0, [pc, #436]	; (80003a8 <main+0x234>)
 80001f2:	f7ff ffb7 	bl	8000164 <strlen>
 80001f6:	4603      	mov	r3, r0
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001fe:	496a      	ldr	r1, [pc, #424]	; (80003a8 <main+0x234>)
 8000200:	486b      	ldr	r0, [pc, #428]	; (80003b0 <main+0x23c>)
 8000202:	f002 f86e 	bl	80022e2 <HAL_UART_Transmit>

  HAL_Delay(2000);
 8000206:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800020a:	f000 fdfd 	bl	8000e08 <HAL_Delay>

  //Formats the screen to show counter and create a scroll window
//clears screen
  strcpy((char *)cliBufferTX, "\x1b[2J");
 800020e:	4b66      	ldr	r3, [pc, #408]	; (80003a8 <main+0x234>)
 8000210:	4a66      	ldr	r2, [pc, #408]	; (80003ac <main+0x238>)
 8000212:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000216:	6018      	str	r0, [r3, #0]
 8000218:	3304      	adds	r3, #4
 800021a:	7019      	strb	r1, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 800021c:	4862      	ldr	r0, [pc, #392]	; (80003a8 <main+0x234>)
 800021e:	f7ff ffa1 	bl	8000164 <strlen>
 8000222:	4603      	mov	r3, r0
 8000224:	b29a      	uxth	r2, r3
 8000226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022a:	495f      	ldr	r1, [pc, #380]	; (80003a8 <main+0x234>)
 800022c:	4860      	ldr	r0, [pc, #384]	; (80003b0 <main+0x23c>)
 800022e:	f002 f858 	bl	80022e2 <HAL_UART_Transmit>

//go to top
  strcpy((char *)cliBufferTX, "\x1b[0;0H");
 8000232:	4b5d      	ldr	r3, [pc, #372]	; (80003a8 <main+0x234>)
 8000234:	4a5f      	ldr	r2, [pc, #380]	; (80003b4 <main+0x240>)
 8000236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800023a:	6018      	str	r0, [r3, #0]
 800023c:	3304      	adds	r3, #4
 800023e:	8019      	strh	r1, [r3, #0]
 8000240:	3302      	adds	r3, #2
 8000242:	0c0a      	lsrs	r2, r1, #16
 8000244:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8000246:	4858      	ldr	r0, [pc, #352]	; (80003a8 <main+0x234>)
 8000248:	f7ff ff8c 	bl	8000164 <strlen>
 800024c:	4603      	mov	r3, r0
 800024e:	b29a      	uxth	r2, r3
 8000250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000254:	4954      	ldr	r1, [pc, #336]	; (80003a8 <main+0x234>)
 8000256:	4856      	ldr	r0, [pc, #344]	; (80003b0 <main+0x23c>)
 8000258:	f002 f843 	bl	80022e2 <HAL_UART_Transmit>

  strcpy((char *)cliBufferTX, "Period: ");
 800025c:	4b52      	ldr	r3, [pc, #328]	; (80003a8 <main+0x234>)
 800025e:	4a57      	ldr	r2, [pc, #348]	; (80003bc <main+0x248>)
 8000260:	ca07      	ldmia	r2, {r0, r1, r2}
 8000262:	c303      	stmia	r3!, {r0, r1}
 8000264:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8000266:	4850      	ldr	r0, [pc, #320]	; (80003a8 <main+0x234>)
 8000268:	f7ff ff7c 	bl	8000164 <strlen>
 800026c:	4603      	mov	r3, r0
 800026e:	b29a      	uxth	r2, r3
 8000270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000274:	494c      	ldr	r1, [pc, #304]	; (80003a8 <main+0x234>)
 8000276:	484e      	ldr	r0, [pc, #312]	; (80003b0 <main+0x23c>)
 8000278:	f002 f833 	bl	80022e2 <HAL_UART_Transmit>

  strcpy((char *)cliBufferTX, "500");
 800027c:	4b4a      	ldr	r3, [pc, #296]	; (80003a8 <main+0x234>)
 800027e:	4a50      	ldr	r2, [pc, #320]	; (80003c0 <main+0x24c>)
 8000280:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8000282:	4849      	ldr	r0, [pc, #292]	; (80003a8 <main+0x234>)
 8000284:	f7ff ff6e 	bl	8000164 <strlen>
 8000288:	4603      	mov	r3, r0
 800028a:	b29a      	uxth	r2, r3
 800028c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000290:	4945      	ldr	r1, [pc, #276]	; (80003a8 <main+0x234>)
 8000292:	4847      	ldr	r0, [pc, #284]	; (80003b0 <main+0x23c>)
 8000294:	f002 f825 	bl	80022e2 <HAL_UART_Transmit>

//go down
  strcpy((char *)cliBufferTX, "\x1b[9;0H");
 8000298:	4b43      	ldr	r3, [pc, #268]	; (80003a8 <main+0x234>)
 800029a:	4a4a      	ldr	r2, [pc, #296]	; (80003c4 <main+0x250>)
 800029c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002a0:	6018      	str	r0, [r3, #0]
 80002a2:	3304      	adds	r3, #4
 80002a4:	8019      	strh	r1, [r3, #0]
 80002a6:	3302      	adds	r3, #2
 80002a8:	0c0a      	lsrs	r2, r1, #16
 80002aa:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80002ac:	483e      	ldr	r0, [pc, #248]	; (80003a8 <main+0x234>)
 80002ae:	f7ff ff59 	bl	8000164 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ba:	493b      	ldr	r1, [pc, #236]	; (80003a8 <main+0x234>)
 80002bc:	483c      	ldr	r0, [pc, #240]	; (80003b0 <main+0x23c>)
 80002be:	f002 f810 	bl	80022e2 <HAL_UART_Transmit>

  strcpy((char *)cliBufferTX, "To change the period of the LED, enter 'period x', where x is the new period");
 80002c2:	4a39      	ldr	r2, [pc, #228]	; (80003a8 <main+0x234>)
 80002c4:	4b40      	ldr	r3, [pc, #256]	; (80003c8 <main+0x254>)
 80002c6:	4610      	mov	r0, r2
 80002c8:	4619      	mov	r1, r3
 80002ca:	234d      	movs	r3, #77	; 0x4d
 80002cc:	461a      	mov	r2, r3
 80002ce:	f005 fb43 	bl	8005958 <memcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80002d2:	4835      	ldr	r0, [pc, #212]	; (80003a8 <main+0x234>)
 80002d4:	f7ff ff46 	bl	8000164 <strlen>
 80002d8:	4603      	mov	r3, r0
 80002da:	b29a      	uxth	r2, r3
 80002dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e0:	4931      	ldr	r1, [pc, #196]	; (80003a8 <main+0x234>)
 80002e2:	4833      	ldr	r0, [pc, #204]	; (80003b0 <main+0x23c>)
 80002e4:	f001 fffd 	bl	80022e2 <HAL_UART_Transmit>

//make a scroll  window
  strcpy((char *)cliBufferTX, "\x1b[10;r");
 80002e8:	4b2f      	ldr	r3, [pc, #188]	; (80003a8 <main+0x234>)
 80002ea:	4a38      	ldr	r2, [pc, #224]	; (80003cc <main+0x258>)
 80002ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f0:	6018      	str	r0, [r3, #0]
 80002f2:	3304      	adds	r3, #4
 80002f4:	8019      	strh	r1, [r3, #0]
 80002f6:	3302      	adds	r3, #2
 80002f8:	0c0a      	lsrs	r2, r1, #16
 80002fa:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80002fc:	482a      	ldr	r0, [pc, #168]	; (80003a8 <main+0x234>)
 80002fe:	f7ff ff31 	bl	8000164 <strlen>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030a:	4927      	ldr	r1, [pc, #156]	; (80003a8 <main+0x234>)
 800030c:	4828      	ldr	r0, [pc, #160]	; (80003b0 <main+0x23c>)
 800030e:	f001 ffe8 	bl	80022e2 <HAL_UART_Transmit>

//moving to scroll window
  strcpy((char *)cliBufferTX, "\x1b[10;0H");
 8000312:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <main+0x234>)
 8000314:	4a2e      	ldr	r2, [pc, #184]	; (80003d0 <main+0x25c>)
 8000316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800031a:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 800031e:	4822      	ldr	r0, [pc, #136]	; (80003a8 <main+0x234>)
 8000320:	f7ff ff20 	bl	8000164 <strlen>
 8000324:	4603      	mov	r3, r0
 8000326:	b29a      	uxth	r2, r3
 8000328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032c:	491e      	ldr	r1, [pc, #120]	; (80003a8 <main+0x234>)
 800032e:	4820      	ldr	r0, [pc, #128]	; (80003b0 <main+0x23c>)
 8000330:	f001 ffd7 	bl	80022e2 <HAL_UART_Transmit>

  strcpy((char *)cliBufferTX, "=> ");
 8000334:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <main+0x234>)
 8000336:	4a27      	ldr	r2, [pc, #156]	; (80003d4 <main+0x260>)
 8000338:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 800033a:	481b      	ldr	r0, [pc, #108]	; (80003a8 <main+0x234>)
 800033c:	f7ff ff12 	bl	8000164 <strlen>
 8000340:	4603      	mov	r3, r0
 8000342:	b29a      	uxth	r2, r3
 8000344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000348:	4917      	ldr	r1, [pc, #92]	; (80003a8 <main+0x234>)
 800034a:	4819      	ldr	r0, [pc, #100]	; (80003b0 <main+0x23c>)
 800034c:	f001 ffc9 	bl	80022e2 <HAL_UART_Transmit>

//saving spot
  strcpy((char *)cliBufferTX, "\x1b[s");
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <main+0x234>)
 8000352:	4a21      	ldr	r2, [pc, #132]	; (80003d8 <main+0x264>)
 8000354:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8000356:	4814      	ldr	r0, [pc, #80]	; (80003a8 <main+0x234>)
 8000358:	f7ff ff04 	bl	8000164 <strlen>
 800035c:	4603      	mov	r3, r0
 800035e:	b29a      	uxth	r2, r3
 8000360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000364:	4910      	ldr	r1, [pc, #64]	; (80003a8 <main+0x234>)
 8000366:	4812      	ldr	r0, [pc, #72]	; (80003b0 <main+0x23c>)
 8000368:	f001 ffbb 	bl	80022e2 <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800036c:	f002 fce6 	bl	8002d3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000370:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <main+0x268>)
 8000372:	2100      	movs	r1, #0
 8000374:	481a      	ldr	r0, [pc, #104]	; (80003e0 <main+0x26c>)
 8000376:	f002 fd47 	bl	8002e08 <osThreadNew>
 800037a:	4603      	mov	r3, r0
 800037c:	4a19      	ldr	r2, [pc, #100]	; (80003e4 <main+0x270>)
 800037e:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000380:	4a19      	ldr	r2, [pc, #100]	; (80003e8 <main+0x274>)
 8000382:	2100      	movs	r1, #0
 8000384:	4819      	ldr	r0, [pc, #100]	; (80003ec <main+0x278>)
 8000386:	f002 fd3f 	bl	8002e08 <osThreadNew>
 800038a:	4603      	mov	r3, r0
 800038c:	4a18      	ldr	r2, [pc, #96]	; (80003f0 <main+0x27c>)
 800038e:	6013      	str	r3, [r2, #0]

  /* creation of StatusTask */
  StatusTaskHandle = osThreadNew(StartStatusTask, NULL, &StatusTask_attributes);
 8000390:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <main+0x280>)
 8000392:	2100      	movs	r1, #0
 8000394:	4818      	ldr	r0, [pc, #96]	; (80003f8 <main+0x284>)
 8000396:	f002 fd37 	bl	8002e08 <osThreadNew>
 800039a:	4603      	mov	r3, r0
 800039c:	4a17      	ldr	r2, [pc, #92]	; (80003fc <main+0x288>)
 800039e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003a0:	f002 fcfe 	bl	8002da0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x230>
 80003a6:	bf00      	nop
 80003a8:	20000128 	.word	0x20000128
 80003ac:	08006f28 	.word	0x08006f28
 80003b0:	20000094 	.word	0x20000094
 80003b4:	08006f30 	.word	0x08006f30
 80003b8:	08006f38 	.word	0x08006f38
 80003bc:	08006f50 	.word	0x08006f50
 80003c0:	00303035 	.word	0x00303035
 80003c4:	08006f5c 	.word	0x08006f5c
 80003c8:	08006f64 	.word	0x08006f64
 80003cc:	08006fb4 	.word	0x08006fb4
 80003d0:	08006fbc 	.word	0x08006fbc
 80003d4:	00203e3d 	.word	0x00203e3d
 80003d8:	00735b1b 	.word	0x00735b1b
 80003dc:	08007038 	.word	0x08007038
 80003e0:	08000609 	.word	0x08000609
 80003e4:	2000011c 	.word	0x2000011c
 80003e8:	0800705c 	.word	0x0800705c
 80003ec:	0800062d 	.word	0x0800062d
 80003f0:	20000120 	.word	0x20000120
 80003f4:	08007080 	.word	0x08007080
 80003f8:	08000809 	.word	0x08000809
 80003fc:	20000124 	.word	0x20000124

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b090      	sub	sp, #64	; 0x40
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0318 	add.w	r3, r7, #24
 800040a:	2228      	movs	r2, #40	; 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f005 fab0 	bl	8005974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000422:	2302      	movs	r3, #2
 8000424:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000426:	2301      	movs	r3, #1
 8000428:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042a:	2310      	movs	r3, #16
 800042c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000432:	2300      	movs	r3, #0
 8000434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000436:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800043a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4618      	mov	r0, r3
 8000442:	f001 f86d 	bl	8001520 <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800044c:	f000 fa74 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
 8000452:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2302      	movs	r3, #2
 8000456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fada 	bl	8001a24 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000476:	f000 fa5f 	bl	8000938 <Error_Handler>
  }
}
 800047a:	bf00      	nop
 800047c:	3740      	adds	r7, #64	; 0x40
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <MX_USART2_UART_Init+0x50>)
 800048c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 8000490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_USART2_UART_Init+0x4c>)
 80004bc:	f001 fec4 	bl	8002248 <HAL_UART_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004c6:	f000 fa37 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000094 	.word	0x20000094
 80004d4:	40004400 	.word	0x40004400

080004d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <MX_USART3_UART_Init+0x50>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 8000510:	f001 fe9a 	bl	8002248 <HAL_UART_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800051a:	f000 fa0d 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200000d8 	.word	0x200000d8
 8000528:	40004800 	.word	0x40004800

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000540:	4b2d      	ldr	r3, [pc, #180]	; (80005f8 <MX_GPIO_Init+0xcc>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a2c      	ldr	r2, [pc, #176]	; (80005f8 <MX_GPIO_Init+0xcc>)
 8000546:	f043 0310 	orr.w	r3, r3, #16
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <MX_GPIO_Init+0xcc>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0310 	and.w	r3, r3, #16
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <MX_GPIO_Init+0xcc>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a26      	ldr	r2, [pc, #152]	; (80005f8 <MX_GPIO_Init+0xcc>)
 800055e:	f043 0320 	orr.w	r3, r3, #32
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <MX_GPIO_Init+0xcc>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0320 	and.w	r3, r3, #32
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <MX_GPIO_Init+0xcc>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <MX_GPIO_Init+0xcc>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_GPIO_Init+0xcc>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0304 	and.w	r3, r3, #4
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_GPIO_Init+0xcc>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <MX_GPIO_Init+0xcc>)
 800058e:	f043 0308 	orr.w	r3, r3, #8
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_GPIO_Init+0xcc>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0308 	and.w	r3, r3, #8
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	4815      	ldr	r0, [pc, #84]	; (80005fc <MX_GPIO_Init+0xd0>)
 80005a6:	f000 ff67 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_GPIO_Init+0xd4>)
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	4811      	ldr	r0, [pc, #68]	; (8000604 <MX_GPIO_Init+0xd8>)
 80005c0:	f000 fdd6 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005c4:	2320      	movs	r3, #32
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4808      	ldr	r0, [pc, #32]	; (80005fc <MX_GPIO_Init+0xd0>)
 80005dc:	f000 fdc8 	bl	8001170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2105      	movs	r1, #5
 80005e4:	2028      	movs	r0, #40	; 0x28
 80005e6:	f000 fce8 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ea:	2028      	movs	r0, #40	; 0x28
 80005ec:	f000 fd01 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800
 8000600:	10110000 	.word	0x10110000
 8000604:	40011000 	.word	0x40011000

08000608 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000610:	2120      	movs	r1, #32
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <StartBlink01+0x1c>)
 8000614:	f000 ff48 	bl	80014a8 <HAL_GPIO_TogglePin>
    osDelay(period);
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <StartBlink01+0x20>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fcdd 	bl	8002fdc <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000622:	e7f5      	b.n	8000610 <StartBlink01+0x8>
 8000624:	40010800 	.word	0x40010800
 8000628:	20000000 	.word	0x20000000

0800062c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)           //CLI TASK I just didn't change the name from the demo
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	int x;
	uint8_t input[20];
  /* Infinite loop */
  for(;;)
  {
	  x = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c



	  	  	  while(cliBufferTX[0] != '\r')
 8000638:	e038      	b.n	80006ac <StartBlink02+0x80>
	  	  	  {
	   			  if(HAL_UART_Receive(&huart2, cliBufferRX, 1, 300) == HAL_OK)
 800063a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800063e:	2201      	movs	r2, #1
 8000640:	4966      	ldr	r1, [pc, #408]	; (80007dc <StartBlink02+0x1b0>)
 8000642:	4867      	ldr	r0, [pc, #412]	; (80007e0 <StartBlink02+0x1b4>)
 8000644:	f001 fedf 	bl	8002406 <HAL_UART_Receive>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d12e      	bne.n	80006ac <StartBlink02+0x80>
	  			  {
	   				  if(cliBufferRX[0] == '\b')
 800064e:	4b63      	ldr	r3, [pc, #396]	; (80007dc <StartBlink02+0x1b0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b08      	cmp	r3, #8
 8000654:	d114      	bne.n	8000680 <StartBlink02+0x54>
	 	  				  {
	 	  					  cliBufferTX[0] = cliBufferRX[0];
 8000656:	4b61      	ldr	r3, [pc, #388]	; (80007dc <StartBlink02+0x1b0>)
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	4b62      	ldr	r3, [pc, #392]	; (80007e4 <StartBlink02+0x1b8>)
 800065c:	701a      	strb	r2, [r3, #0]
	 	  					  cliBufferTX[1] = ' ';
 800065e:	4b61      	ldr	r3, [pc, #388]	; (80007e4 <StartBlink02+0x1b8>)
 8000660:	2220      	movs	r2, #32
 8000662:	705a      	strb	r2, [r3, #1]
	 	  					  cliBufferTX[2] = '\b';
 8000664:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <StartBlink02+0x1b8>)
 8000666:	2208      	movs	r2, #8
 8000668:	709a      	strb	r2, [r3, #2]
	 	  					  HAL_UART_Transmit(&huart2, cliBufferTX, 3, 1000);
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	2203      	movs	r2, #3
 8000670:	495c      	ldr	r1, [pc, #368]	; (80007e4 <StartBlink02+0x1b8>)
 8000672:	485b      	ldr	r0, [pc, #364]	; (80007e0 <StartBlink02+0x1b4>)
 8000674:	f001 fe35 	bl	80022e2 <HAL_UART_Transmit>
	 	  					  x--;
 8000678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067a:	3b01      	subs	r3, #1
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800067e:	e015      	b.n	80006ac <StartBlink02+0x80>
	 	  				  }
	 	  				  else
	 	  				  {
	 	  					  cliBufferTX[0] = cliBufferRX[0];
 8000680:	4b56      	ldr	r3, [pc, #344]	; (80007dc <StartBlink02+0x1b0>)
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	4b57      	ldr	r3, [pc, #348]	; (80007e4 <StartBlink02+0x1b8>)
 8000686:	701a      	strb	r2, [r3, #0]
	 	  					  input[x] = cliBufferRX[0];
 8000688:	4b54      	ldr	r3, [pc, #336]	; (80007dc <StartBlink02+0x1b0>)
 800068a:	7819      	ldrb	r1, [r3, #0]
 800068c:	f107 020c 	add.w	r2, r7, #12
 8000690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000692:	4413      	add	r3, r2
 8000694:	460a      	mov	r2, r1
 8000696:	701a      	strb	r2, [r3, #0]
	 	  					  HAL_UART_Transmit(&huart2, cliBufferTX, 1, 1000);
 8000698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069c:	2201      	movs	r2, #1
 800069e:	4951      	ldr	r1, [pc, #324]	; (80007e4 <StartBlink02+0x1b8>)
 80006a0:	484f      	ldr	r0, [pc, #316]	; (80007e0 <StartBlink02+0x1b4>)
 80006a2:	f001 fe1e 	bl	80022e2 <HAL_UART_Transmit>
	 	  					  x++;
 80006a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a8:	3301      	adds	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	  while(cliBufferTX[0] != '\r')
 80006ac:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <StartBlink02+0x1b8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b0d      	cmp	r3, #13
 80006b2:	d1c2      	bne.n	800063a <StartBlink02+0xe>

	  	  	  	  char *command;
	  	  	 	  char *token;


	  	  	 	  strcpy((char *)cliBufferTX, "\r\n");//making space
 80006b4:	4b4b      	ldr	r3, [pc, #300]	; (80007e4 <StartBlink02+0x1b8>)
 80006b6:	4a4c      	ldr	r2, [pc, #304]	; (80007e8 <StartBlink02+0x1bc>)
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	4611      	mov	r1, r2
 80006bc:	8019      	strh	r1, [r3, #0]
 80006be:	3302      	adds	r3, #2
 80006c0:	0c12      	lsrs	r2, r2, #16
 80006c2:	701a      	strb	r2, [r3, #0]
	  	  	 	  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80006c4:	4847      	ldr	r0, [pc, #284]	; (80007e4 <StartBlink02+0x1b8>)
 80006c6:	f7ff fd4d 	bl	8000164 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	4944      	ldr	r1, [pc, #272]	; (80007e4 <StartBlink02+0x1b8>)
 80006d4:	4842      	ldr	r0, [pc, #264]	; (80007e0 <StartBlink02+0x1b4>)
 80006d6:	f001 fe04 	bl	80022e2 <HAL_UART_Transmit>


	  	  	 	  while(x < 20 && input[x] != '\0')//Nulling out the rest of the string
 80006da:	e008      	b.n	80006ee <StartBlink02+0xc2>
	  	  	 		{
	  	  	 			input[x] = '\0';
 80006dc:	f107 020c 	add.w	r2, r7, #12
 80006e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e2:	4413      	add	r3, r2
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	  	  	 			x++;
 80006e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ea:	3301      	adds	r3, #1
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	 	  while(x < 20 && input[x] != '\0')//Nulling out the rest of the string
 80006ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f0:	2b13      	cmp	r3, #19
 80006f2:	dc06      	bgt.n	8000702 <StartBlink02+0xd6>
 80006f4:	f107 020c 	add.w	r2, r7, #12
 80006f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1ec      	bne.n	80006dc <StartBlink02+0xb0>
	  	  	 		}

 				  token = strtok((char *)input, " ");//getting command
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4939      	ldr	r1, [pc, #228]	; (80007ec <StartBlink02+0x1c0>)
 8000708:	4618      	mov	r0, r3
 800070a:	f005 f963 	bl	80059d4 <strtok>
 800070e:	6278      	str	r0, [r7, #36]	; 0x24
	  			  command = token;
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	623b      	str	r3, [r7, #32]
	  	  		  token = strtok(NULL, " ");//getting period
 8000714:	4935      	ldr	r1, [pc, #212]	; (80007ec <StartBlink02+0x1c0>)
 8000716:	2000      	movs	r0, #0
 8000718:	f005 f95c 	bl	80059d4 <strtok>
 800071c:	6278      	str	r0, [r7, #36]	; 0x24
	  			  if(strcmp(command, "period") == 0 && atoi(token) > 0)//checking command is correct
 800071e:	4934      	ldr	r1, [pc, #208]	; (80007f0 <StartBlink02+0x1c4>)
 8000720:	6a38      	ldr	r0, [r7, #32]
 8000722:	f7ff fd15 	bl	8000150 <strcmp>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10f      	bne.n	800074c <StartBlink02+0x120>
 800072c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800072e:	f005 f8e5 	bl	80058fc <atoi>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	dd09      	ble.n	800074c <StartBlink02+0x120>
	  			  {
	  	  				  period = atoi(token);//assigning the period
 8000738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800073a:	f005 f8df 	bl	80058fc <atoi>
 800073e:	4603      	mov	r3, r0
 8000740:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <StartBlink02+0x1c8>)
 8000742:	6013      	str	r3, [r2, #0]
	  	  				  periodSet = 1;//telling the CLI to update the period
 8000744:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <StartBlink02+0x1cc>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	e018      	b.n	800077e <StartBlink02+0x152>
	 			  }
				  else if(input[0] != '\r')//error checking
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	2b0d      	cmp	r3, #13
 8000750:	d015      	beq.n	800077e <StartBlink02+0x152>
	  			  {
	 	  			  strcpy((char *)cliBufferTX, "\nError. Try again.\r\n");
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <StartBlink02+0x1b8>)
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <StartBlink02+0x1d0>)
 8000756:	4614      	mov	r4, r2
 8000758:	461d      	mov	r5, r3
 800075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000762:	6020      	str	r0, [r4, #0]
 8000764:	3404      	adds	r4, #4
 8000766:	7021      	strb	r1, [r4, #0]
	 	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8000768:	481e      	ldr	r0, [pc, #120]	; (80007e4 <StartBlink02+0x1b8>)
 800076a:	f7ff fcfb 	bl	8000164 <strlen>
 800076e:	4603      	mov	r3, r0
 8000770:	b29a      	uxth	r2, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	491b      	ldr	r1, [pc, #108]	; (80007e4 <StartBlink02+0x1b8>)
 8000778:	4819      	ldr	r0, [pc, #100]	; (80007e0 <StartBlink02+0x1b4>)
 800077a:	f001 fdb2 	bl	80022e2 <HAL_UART_Transmit>
	  	  		  }


	  	  		  for(int i = 0; i < 20; i++)//clearing input
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
 8000782:	e008      	b.n	8000796 <StartBlink02+0x16a>
	  	  		  {
	  	  			input[i] = '\0';
 8000784:	f107 020c 	add.w	r2, r7, #12
 8000788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078a:	4413      	add	r3, r2
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
	  	  		  for(int i = 0; i < 20; i++)//clearing input
 8000790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000792:	3301      	adds	r3, #1
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
 8000796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000798:	2b13      	cmp	r3, #19
 800079a:	ddf3      	ble.n	8000784 <StartBlink02+0x158>
	  	  		  }

	  	  		  strcpy((char *)cliBufferTX, "=> ");
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <StartBlink02+0x1b8>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <StartBlink02+0x1d4>)
 80007a0:	601a      	str	r2, [r3, #0]
 	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80007a2:	4810      	ldr	r0, [pc, #64]	; (80007e4 <StartBlink02+0x1b8>)
 80007a4:	f7ff fcde 	bl	8000164 <strlen>
 80007a8:	4603      	mov	r3, r0
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <StartBlink02+0x1b8>)
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <StartBlink02+0x1b4>)
 80007b4:	f001 fd95 	bl	80022e2 <HAL_UART_Transmit>

 	  			  strcpy((char *)cliBufferTX, "\x1b[s");//save spot
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <StartBlink02+0x1b8>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <StartBlink02+0x1d8>)
 80007bc:	601a      	str	r2, [r3, #0]
 	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <StartBlink02+0x1b8>)
 80007c0:	f7ff fcd0 	bl	8000164 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	4905      	ldr	r1, [pc, #20]	; (80007e4 <StartBlink02+0x1b8>)
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <StartBlink02+0x1b4>)
 80007d0:	f001 fd87 	bl	80022e2 <HAL_UART_Transmit>




    osDelay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f002 fc01 	bl	8002fdc <osDelay>
  {
 80007da:	e72b      	b.n	8000634 <StartBlink02+0x8>
 80007dc:	20000160 	.word	0x20000160
 80007e0:	20000094 	.word	0x20000094
 80007e4:	20000128 	.word	0x20000128
 80007e8:	08006fc4 	.word	0x08006fc4
 80007ec:	08006fc8 	.word	0x08006fc8
 80007f0:	08006fcc 	.word	0x08006fcc
 80007f4:	20000000 	.word	0x20000000
 80007f8:	2000016c 	.word	0x2000016c
 80007fc:	08006fd4 	.word	0x08006fd4
 8000800:	00203e3d 	.word	0x00203e3d
 8000804:	00735b1b 	.word	0x00735b1b

08000808 <StartStatusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusTask */
void StartStatusTask(void *argument)
{
 8000808:	b5b0      	push	{r4, r5, r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusTask */
  /* Infinite loop */
  for(;;)
  {
	  if(periodSet == 1)
 8000810:	4b36      	ldr	r3, [pc, #216]	; (80008ec <StartStatusTask+0xe4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d165      	bne.n	80008e4 <StartStatusTask+0xdc>
	  {
	  		  sprintf((char *)periodString, "%d", period);
 8000818:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <StartStatusTask+0xe8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4935      	ldr	r1, [pc, #212]	; (80008f4 <StartStatusTask+0xec>)
 8000820:	4835      	ldr	r0, [pc, #212]	; (80008f8 <StartStatusTask+0xf0>)
 8000822:	f005 f8af 	bl	8005984 <siprintf>

	  		  //go to counter
	  		  strcpy((char *)cliBufferTX, "\x1b[0;9H");
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <StartStatusTask+0xf4>)
 8000828:	4a35      	ldr	r2, [pc, #212]	; (8000900 <StartStatusTask+0xf8>)
 800082a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800082e:	6018      	str	r0, [r3, #0]
 8000830:	3304      	adds	r3, #4
 8000832:	8019      	strh	r1, [r3, #0]
 8000834:	3302      	adds	r3, #2
 8000836:	0c0a      	lsrs	r2, r1, #16
 8000838:	701a      	strb	r2, [r3, #0]
	  		  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 800083a:	4830      	ldr	r0, [pc, #192]	; (80008fc <StartStatusTask+0xf4>)
 800083c:	f7ff fc92 	bl	8000164 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	b29a      	uxth	r2, r3
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	492c      	ldr	r1, [pc, #176]	; (80008fc <StartStatusTask+0xf4>)
 800084a:	482e      	ldr	r0, [pc, #184]	; (8000904 <StartStatusTask+0xfc>)
 800084c:	f001 fd49 	bl	80022e2 <HAL_UART_Transmit>

	  		  //blank out
	  		  strcpy((char *)cliBufferTX, "                       ");
 8000850:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <StartStatusTask+0xf4>)
 8000852:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <StartStatusTask+0x100>)
 8000854:	4614      	mov	r4, r2
 8000856:	461d      	mov	r5, r3
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000860:	e884 0003 	stmia.w	r4, {r0, r1}
	  		  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8000864:	4825      	ldr	r0, [pc, #148]	; (80008fc <StartStatusTask+0xf4>)
 8000866:	f7ff fc7d 	bl	8000164 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	b29a      	uxth	r2, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	4922      	ldr	r1, [pc, #136]	; (80008fc <StartStatusTask+0xf4>)
 8000874:	4823      	ldr	r0, [pc, #140]	; (8000904 <StartStatusTask+0xfc>)
 8000876:	f001 fd34 	bl	80022e2 <HAL_UART_Transmit>

	  		  //go to counter
	  		  strcpy((char *)cliBufferTX, "\x1b[0;9H");
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <StartStatusTask+0xf4>)
 800087c:	4a20      	ldr	r2, [pc, #128]	; (8000900 <StartStatusTask+0xf8>)
 800087e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000882:	6018      	str	r0, [r3, #0]
 8000884:	3304      	adds	r3, #4
 8000886:	8019      	strh	r1, [r3, #0]
 8000888:	3302      	adds	r3, #2
 800088a:	0c0a      	lsrs	r2, r1, #16
 800088c:	701a      	strb	r2, [r3, #0]
	  		  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 800088e:	481b      	ldr	r0, [pc, #108]	; (80008fc <StartStatusTask+0xf4>)
 8000890:	f7ff fc68 	bl	8000164 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089c:	4917      	ldr	r1, [pc, #92]	; (80008fc <StartStatusTask+0xf4>)
 800089e:	4819      	ldr	r0, [pc, #100]	; (8000904 <StartStatusTask+0xfc>)
 80008a0:	f001 fd1f 	bl	80022e2 <HAL_UART_Transmit>

	  		  //printing the period to CLI
	  		  strcpy((char *)cliBufferTX, (const char *)periodString);
 80008a4:	4914      	ldr	r1, [pc, #80]	; (80008f8 <StartStatusTask+0xf0>)
 80008a6:	4815      	ldr	r0, [pc, #84]	; (80008fc <StartStatusTask+0xf4>)
 80008a8:	f005 f88c 	bl	80059c4 <strcpy>
	  		  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80008ac:	4813      	ldr	r0, [pc, #76]	; (80008fc <StartStatusTask+0xf4>)
 80008ae:	f7ff fc59 	bl	8000164 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	4910      	ldr	r1, [pc, #64]	; (80008fc <StartStatusTask+0xf4>)
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <StartStatusTask+0xfc>)
 80008be:	f001 fd10 	bl	80022e2 <HAL_UART_Transmit>


		      strcpy((char *)cliBufferTX, "\x1b[u");//return to curs
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <StartStatusTask+0xf4>)
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <StartStatusTask+0x104>)
 80008c6:	601a      	str	r2, [r3, #0]
	  		  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <StartStatusTask+0xf4>)
 80008ca:	f7ff fc4b 	bl	8000164 <strlen>
 80008ce:	4603      	mov	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	4909      	ldr	r1, [pc, #36]	; (80008fc <StartStatusTask+0xf4>)
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <StartStatusTask+0xfc>)
 80008da:	f001 fd02 	bl	80022e2 <HAL_UART_Transmit>

	  		  periodSet = 0;//reset
 80008de:	4b03      	ldr	r3, [pc, #12]	; (80008ec <StartStatusTask+0xe4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f002 fb79 	bl	8002fdc <osDelay>
	  if(periodSet == 1)
 80008ea:	e791      	b.n	8000810 <StartStatusTask+0x8>
 80008ec:	2000016c 	.word	0x2000016c
 80008f0:	20000000 	.word	0x20000000
 80008f4:	08006fec 	.word	0x08006fec
 80008f8:	20000170 	.word	0x20000170
 80008fc:	20000128 	.word	0x20000128
 8000900:	08006ff0 	.word	0x08006ff0
 8000904:	20000094 	.word	0x20000094
 8000908:	08006ff8 	.word	0x08006ff8
 800090c:	00755b1b 	.word	0x00755b1b

08000910 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a05      	ldr	r2, [pc, #20]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d101      	bne.n	8000926 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000922:	f000 fa55 	bl	8000dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  //In case the task loop accidentally exits
  osThreadTerminate(NULL);
 8000926:	2000      	movs	r0, #0
 8000928:	f002 fb18 	bl	8002f5c <osThreadTerminate>
  /* USER CODE END Callback 1 */
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40000800 	.word	0x40000800

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <HAL_MspInit+0x68>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_MspInit+0x68>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_MspInit+0x68>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_MspInit+0x68>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <HAL_MspInit+0x68>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x68>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 fb1a 	bl	8000fba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_MspInit+0x6c>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_MspInit+0x6c>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010000 	.word	0x40010000

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a35      	ldr	r2, [pc, #212]	; (8000aa4 <HAL_UART_MspInit+0xf0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d124      	bne.n	8000a1e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d4:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	4a33      	ldr	r2, [pc, #204]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 80009da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009de:	61d3      	str	r3, [r2, #28]
 80009e0:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a2d      	ldr	r2, [pc, #180]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a04:	230c      	movs	r3, #12
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	4619      	mov	r1, r3
 8000a16:	4825      	ldr	r0, [pc, #148]	; (8000aac <HAL_UART_MspInit+0xf8>)
 8000a18:	f000 fbaa 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a1c:	e03e      	b.n	8000a9c <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART3)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d139      	bne.n	8000a9c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 8000a2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a32:	61d3      	str	r3, [r2, #28]
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 8000a46:	f043 0308 	orr.w	r3, r3, #8
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_UART_MspInit+0xf4>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0308 	and.w	r3, r3, #8
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a6e:	f000 fb7f 	bl	8001170 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0318 	add.w	r3, r7, #24
 8000a84:	4619      	mov	r1, r3
 8000a86:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a88:	f000 fb72 	bl	8001170 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2105      	movs	r1, #5
 8000a90:	2027      	movs	r0, #39	; 0x27
 8000a92:	f000 fa92 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a96:	2027      	movs	r0, #39	; 0x27
 8000a98:	f000 faab 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	; 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40004800 	.word	0x40004800
 8000ab4:	40010c00 	.word	0x40010c00

08000ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	201e      	movs	r0, #30
 8000ace:	f000 fa74 	bl	8000fba <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ad2:	201e      	movs	r0, #30
 8000ad4:	f000 fa8d 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_InitTick+0xa0>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <HAL_InitTick+0xa0>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	61d3      	str	r3, [r2, #28]
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_InitTick+0xa0>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af0:	f107 0210 	add.w	r2, r7, #16
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 f90c 	bl	8001d18 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b00:	f001 f8e2 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8000b04:	4603      	mov	r3, r0
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <HAL_InitTick+0xa4>)
 8000b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b12:	0c9b      	lsrs	r3, r3, #18
 8000b14:	3b01      	subs	r3, #1
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <HAL_InitTick+0xac>)
 8000b1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b24:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b3a:	f001 f93b 	bl	8001db4 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d104      	bne.n	8000b4e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b46:	f001 f98d 	bl	8001e64 <HAL_TIM_Base_Start_IT>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	e000      	b.n	8000b50 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3730      	adds	r7, #48	; 0x30
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	2000017c 	.word	0x2000017c
 8000b64:	40000800 	.word	0x40000800

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM4_IRQHandler+0x10>)
 8000b9a:	f001 f9b5 	bl	8001f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000017c 	.word	0x2000017c

08000ba8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART3_IRQHandler+0x10>)
 8000bae:	f001 fccd 	bl	800254c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000d8 	.word	0x200000d8

08000bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bc4:	f000 fc8a 	bl	80014dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	return 1;
 8000bd0:	2301      	movs	r3, #1
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <_kill>:

int _kill(int pid, int sig)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000be4:	f004 fe8e 	bl	8005904 <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2216      	movs	r2, #22
 8000bec:	601a      	str	r2, [r3, #0]
	return -1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_exit>:

void _exit (int status)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c02:	f04f 31ff 	mov.w	r1, #4294967295
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ffe7 	bl	8000bda <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c0c:	e7fe      	b.n	8000c0c <_exit+0x12>

08000c0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e00a      	b.n	8000c36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c20:	f3af 8000 	nop.w
 8000c24:	4601      	mov	r1, r0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	60ba      	str	r2, [r7, #8]
 8000c2c:	b2ca      	uxtb	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	dbf0      	blt.n	8000c20 <_read+0x12>
	}

return len;
 8000c3e:	687b      	ldr	r3, [r7, #4]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e009      	b.n	8000c6e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	60ba      	str	r2, [r7, #8]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	dbf1      	blt.n	8000c5a <_write+0x12>
	}
	return len;
 8000c76:	687b      	ldr	r3, [r7, #4]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_close>:

int _close(int file)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	return -1;
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <_isatty>:

int _isatty(int file)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	return 1;
 8000cbc:	2301      	movs	r3, #1
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f004 fdf8 	bl	8005904 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20005000 	.word	0x20005000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	200001c4 	.word	0x200001c4
 8000d48:	20001b28 	.word	0x20001b28

08000d4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	; (8000d9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d7e:	f7ff ffe5 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f004 fdc5 	bl	8005910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff f9f5 	bl	8000174 <main>
  bx lr
 8000d8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d94:	0800730c 	.word	0x0800730c
  ldr r2, =_sbss
 8000d98:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d9c:	20001b24 	.word	0x20001b24

08000da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_2_IRQHandler>
	...

08000da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x28>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f8f5 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f7ff fe7c 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fdc0 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x1c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x20>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_IncTick+0x20>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	200001c8 	.word	0x200001c8

08000df4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <HAL_GetTick+0x10>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	200001c8 	.word	0x200001c8

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff fff0 	bl	8000df4 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffe0 	bl	8000df4 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000000c 	.word	0x2000000c

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4906      	ldr	r1, [pc, #24]	; (8000ee8 <__NVIC_EnableIRQ+0x34>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff4f 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff64 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ffb2 	bl	8000f40 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff81 	bl	8000eec <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff57 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001020:	2b02      	cmp	r3, #2
 8001022:	d008      	beq.n	8001036 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2204      	movs	r2, #4
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e020      	b.n	8001078 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 020e 	bic.w	r2, r2, #14
 8001044:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0201 	bic.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105e:	2101      	movs	r1, #1
 8001060:	fa01 f202 	lsl.w	r2, r1, r2
 8001064:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001096:	2b02      	cmp	r3, #2
 8001098:	d005      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2204      	movs	r2, #4
 800109e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e051      	b.n	800114a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 020e 	bic.w	r2, r2, #14
 80010b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a22      	ldr	r2, [pc, #136]	; (8001154 <HAL_DMA_Abort_IT+0xd0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d029      	beq.n	8001124 <HAL_DMA_Abort_IT+0xa0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <HAL_DMA_Abort_IT+0xd4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d022      	beq.n	8001120 <HAL_DMA_Abort_IT+0x9c>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a1f      	ldr	r2, [pc, #124]	; (800115c <HAL_DMA_Abort_IT+0xd8>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d01a      	beq.n	800111a <HAL_DMA_Abort_IT+0x96>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_DMA_Abort_IT+0xdc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d012      	beq.n	8001114 <HAL_DMA_Abort_IT+0x90>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <HAL_DMA_Abort_IT+0xe0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d00a      	beq.n	800110e <HAL_DMA_Abort_IT+0x8a>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <HAL_DMA_Abort_IT+0xe4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d102      	bne.n	8001108 <HAL_DMA_Abort_IT+0x84>
 8001102:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001106:	e00e      	b.n	8001126 <HAL_DMA_Abort_IT+0xa2>
 8001108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800110c:	e00b      	b.n	8001126 <HAL_DMA_Abort_IT+0xa2>
 800110e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001112:	e008      	b.n	8001126 <HAL_DMA_Abort_IT+0xa2>
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	e005      	b.n	8001126 <HAL_DMA_Abort_IT+0xa2>
 800111a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111e:	e002      	b.n	8001126 <HAL_DMA_Abort_IT+0xa2>
 8001120:	2310      	movs	r3, #16
 8001122:	e000      	b.n	8001126 <HAL_DMA_Abort_IT+0xa2>
 8001124:	2301      	movs	r3, #1
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_DMA_Abort_IT+0xe8>)
 8001128:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	4798      	blx	r3
    } 
  }
  return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020008 	.word	0x40020008
 8001158:	4002001c 	.word	0x4002001c
 800115c:	40020030 	.word	0x40020030
 8001160:	40020044 	.word	0x40020044
 8001164:	40020058 	.word	0x40020058
 8001168:	4002006c 	.word	0x4002006c
 800116c:	40020000 	.word	0x40020000

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b08b      	sub	sp, #44	; 0x2c
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	e169      	b.n	8001458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001184:	2201      	movs	r2, #1
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8158 	bne.w	8001452 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4a9a      	ldr	r2, [pc, #616]	; (8001410 <HAL_GPIO_Init+0x2a0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d05e      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011ac:	4a98      	ldr	r2, [pc, #608]	; (8001410 <HAL_GPIO_Init+0x2a0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d875      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011b2:	4a98      	ldr	r2, [pc, #608]	; (8001414 <HAL_GPIO_Init+0x2a4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d058      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011b8:	4a96      	ldr	r2, [pc, #600]	; (8001414 <HAL_GPIO_Init+0x2a4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d86f      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011be:	4a96      	ldr	r2, [pc, #600]	; (8001418 <HAL_GPIO_Init+0x2a8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d052      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011c4:	4a94      	ldr	r2, [pc, #592]	; (8001418 <HAL_GPIO_Init+0x2a8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d869      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ca:	4a94      	ldr	r2, [pc, #592]	; (800141c <HAL_GPIO_Init+0x2ac>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d04c      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011d0:	4a92      	ldr	r2, [pc, #584]	; (800141c <HAL_GPIO_Init+0x2ac>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d863      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011d6:	4a92      	ldr	r2, [pc, #584]	; (8001420 <HAL_GPIO_Init+0x2b0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d046      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011dc:	4a90      	ldr	r2, [pc, #576]	; (8001420 <HAL_GPIO_Init+0x2b0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d85d      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d82a      	bhi.n	800123c <HAL_GPIO_Init+0xcc>
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d859      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ea:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <HAL_GPIO_Init+0x80>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	08001245 	.word	0x08001245
 80011f8:	08001257 	.word	0x08001257
 80011fc:	08001299 	.word	0x08001299
 8001200:	0800129f 	.word	0x0800129f
 8001204:	0800129f 	.word	0x0800129f
 8001208:	0800129f 	.word	0x0800129f
 800120c:	0800129f 	.word	0x0800129f
 8001210:	0800129f 	.word	0x0800129f
 8001214:	0800129f 	.word	0x0800129f
 8001218:	0800129f 	.word	0x0800129f
 800121c:	0800129f 	.word	0x0800129f
 8001220:	0800129f 	.word	0x0800129f
 8001224:	0800129f 	.word	0x0800129f
 8001228:	0800129f 	.word	0x0800129f
 800122c:	0800129f 	.word	0x0800129f
 8001230:	0800129f 	.word	0x0800129f
 8001234:	0800124d 	.word	0x0800124d
 8001238:	08001261 	.word	0x08001261
 800123c:	4a79      	ldr	r2, [pc, #484]	; (8001424 <HAL_GPIO_Init+0x2b4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001242:	e02c      	b.n	800129e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e029      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	3304      	adds	r3, #4
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e024      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	3308      	adds	r3, #8
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e01f      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	330c      	adds	r3, #12
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e01a      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001272:	2304      	movs	r3, #4
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e013      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001280:	2308      	movs	r3, #8
 8001282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	611a      	str	r2, [r3, #16]
          break;
 800128a:	e009      	b.n	80012a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800128c:	2308      	movs	r3, #8
 800128e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	615a      	str	r2, [r3, #20]
          break;
 8001296:	e003      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          break;
 800129e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d801      	bhi.n	80012aa <HAL_GPIO_Init+0x13a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	e001      	b.n	80012ae <HAL_GPIO_Init+0x13e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3304      	adds	r3, #4
 80012ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d802      	bhi.n	80012bc <HAL_GPIO_Init+0x14c>
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_Init+0x152>
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	3b08      	subs	r3, #8
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	210f      	movs	r1, #15
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	6a39      	ldr	r1, [r7, #32]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	431a      	orrs	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80b1 	beq.w	8001452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x2b8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_GPIO_Init+0x2b8>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_GPIO_Init+0x2b8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_Init+0x2bc>)
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a40      	ldr	r2, [pc, #256]	; (8001430 <HAL_GPIO_Init+0x2c0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d013      	beq.n	800135c <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a3f      	ldr	r2, [pc, #252]	; (8001434 <HAL_GPIO_Init+0x2c4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00d      	beq.n	8001358 <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a3e      	ldr	r2, [pc, #248]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0x1e4>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3d      	ldr	r2, [pc, #244]	; (800143c <HAL_GPIO_Init+0x2cc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_GPIO_Init+0x1e0>
 800134c:	2303      	movs	r3, #3
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001350:	2304      	movs	r3, #4
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001354:	2302      	movs	r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1ee>
 800135c:	2300      	movs	r3, #0
 800135e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800136e:	492f      	ldr	r1, [pc, #188]	; (800142c <HAL_GPIO_Init+0x2bc>)
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	492c      	ldr	r1, [pc, #176]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	4928      	ldr	r1, [pc, #160]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4922      	ldr	r1, [pc, #136]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	491e      	ldr	r1, [pc, #120]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	4918      	ldr	r1, [pc, #96]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4914      	ldr	r1, [pc, #80]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d021      	beq.n	8001444 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
 800140c:	e021      	b.n	8001452 <HAL_GPIO_Init+0x2e2>
 800140e:	bf00      	nop
 8001410:	10320000 	.word	0x10320000
 8001414:	10310000 	.word	0x10310000
 8001418:	10220000 	.word	0x10220000
 800141c:	10210000 	.word	0x10210000
 8001420:	10120000 	.word	0x10120000
 8001424:	10110000 	.word	0x10110000
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000
 8001430:	40010800 	.word	0x40010800
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40011000 	.word	0x40011000
 800143c:	40011400 	.word	0x40011400
 8001440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_GPIO_Init+0x304>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	43db      	mvns	r3, r3
 800144c:	4909      	ldr	r1, [pc, #36]	; (8001474 <HAL_GPIO_Init+0x304>)
 800144e:	4013      	ands	r3, r2
 8001450:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	3301      	adds	r3, #1
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	f47f ae8e 	bne.w	8001184 <HAL_GPIO_Init+0x14>
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	372c      	adds	r7, #44	; 0x2c
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43d9      	mvns	r1, r3
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	400b      	ands	r3, r1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	611a      	str	r2, [r3, #16]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f806 	bl	800150c <HAL_GPIO_EXTI_Callback>
  }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e272      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8087 	beq.w	800164e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001540:	4b92      	ldr	r3, [pc, #584]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b04      	cmp	r3, #4
 800154a:	d00c      	beq.n	8001566 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800154c:	4b8f      	ldr	r3, [pc, #572]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	d112      	bne.n	800157e <HAL_RCC_OscConfig+0x5e>
 8001558:	4b8c      	ldr	r3, [pc, #560]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d10b      	bne.n	800157e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001566:	4b89      	ldr	r3, [pc, #548]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d06c      	beq.n	800164c <HAL_RCC_OscConfig+0x12c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d168      	bne.n	800164c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e24c      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x76>
 8001588:	4b80      	ldr	r3, [pc, #512]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a7f      	ldr	r2, [pc, #508]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800158e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	e02e      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x98>
 800159e:	4b7b      	ldr	r3, [pc, #492]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7a      	ldr	r2, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b78      	ldr	r3, [pc, #480]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a77      	ldr	r2, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e01d      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0xbc>
 80015c2:	4b72      	ldr	r3, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a71      	ldr	r2, [pc, #452]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b6f      	ldr	r3, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a6e      	ldr	r2, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0xd4>
 80015dc:	4b6b      	ldr	r3, [pc, #428]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6a      	ldr	r2, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b68      	ldr	r3, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a67      	ldr	r2, [pc, #412]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fbfa 	bl	8000df4 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fbf6 	bl	8000df4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e200      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b5d      	ldr	r3, [pc, #372]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0xe4>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fbe6 	bl	8000df4 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fbe2 	bl	8000df4 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1ec      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x10c>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d063      	beq.n	8001722 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800165a:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d11c      	bne.n	80016ac <HAL_RCC_OscConfig+0x18c>
 8001672:	4b46      	ldr	r3, [pc, #280]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d116      	bne.n	80016ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <HAL_RCC_OscConfig+0x176>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d001      	beq.n	8001696 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e1c0      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b3d      	ldr	r3, [pc, #244]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4939      	ldr	r1, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	e03a      	b.n	8001722 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb9b 	bl	8000df4 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fb97 	bl	8000df4 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e1a1      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4927      	ldr	r1, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
 80016f4:	e015      	b.n	8001722 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb7a 	bl	8000df4 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff fb76 	bl	8000df4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e180      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d03a      	beq.n	80017a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d019      	beq.n	800176a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_RCC_OscConfig+0x274>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff fb5a 	bl	8000df4 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff fb56 	bl	8000df4 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e160      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_RCC_OscConfig+0x26c>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f000 fb08 	bl	8001d78 <RCC_Delay>
 8001768:	e01c      	b.n	80017a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_RCC_OscConfig+0x274>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff fb40 	bl	8000df4 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001776:	e00f      	b.n	8001798 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fb3c 	bl	8000df4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d908      	bls.n	8001798 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e146      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	42420000 	.word	0x42420000
 8001794:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	4b92      	ldr	r3, [pc, #584]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e9      	bne.n	8001778 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a6 	beq.w	80018fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b8b      	ldr	r3, [pc, #556]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10d      	bne.n	80017de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a87      	ldr	r2, [pc, #540]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017de:	4b82      	ldr	r3, [pc, #520]	; (80019e8 <HAL_RCC_OscConfig+0x4c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d118      	bne.n	800181c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x4c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a7e      	ldr	r2, [pc, #504]	; (80019e8 <HAL_RCC_OscConfig+0x4c8>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f6:	f7ff fafd 	bl	8000df4 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fe:	f7ff faf9 	bl	8000df4 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b64      	cmp	r3, #100	; 0x64
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e103      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <HAL_RCC_OscConfig+0x4c8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x312>
 8001824:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a6e      	ldr	r2, [pc, #440]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	e02d      	b.n	800188e <HAL_RCC_OscConfig+0x36e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x334>
 800183a:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a69      	ldr	r2, [pc, #420]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6213      	str	r3, [r2, #32]
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	e01c      	b.n	800188e <HAL_RCC_OscConfig+0x36e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0x356>
 800185c:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a60      	ldr	r2, [pc, #384]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	4b5e      	ldr	r3, [pc, #376]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4a5d      	ldr	r2, [pc, #372]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6213      	str	r3, [r2, #32]
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0x36e>
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4a5a      	ldr	r2, [pc, #360]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	6213      	str	r3, [r2, #32]
 8001882:	4b58      	ldr	r3, [pc, #352]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d015      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff faad 	bl	8000df4 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff faa9 	bl	8000df4 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0b1      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ee      	beq.n	800189e <HAL_RCC_OscConfig+0x37e>
 80018c0:	e014      	b.n	80018ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fa97 	bl	8000df4 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff fa93 	bl	8000df4 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e09b      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ee      	bne.n	80018ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	4b3c      	ldr	r3, [pc, #240]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8087 	beq.w	8001a16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d061      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d146      	bne.n	80019aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_RCC_OscConfig+0x4cc>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff fa67 	bl	8000df4 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff fa63 	bl	8000df4 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e06d      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d108      	bne.n	8001964 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	4921      	ldr	r1, [pc, #132]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a19      	ldr	r1, [r3, #32]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	430b      	orrs	r3, r1
 8001976:	491b      	ldr	r1, [pc, #108]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x4cc>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff fa37 	bl	8000df4 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff fa33 	bl	8000df4 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e03d      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x46a>
 80019a8:	e035      	b.n	8001a16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_RCC_OscConfig+0x4cc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fa20 	bl	8000df4 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff fa1c 	bl	8000df4 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e026      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x498>
 80019d6:	e01e      	b.n	8001a16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e019      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40007000 	.word	0x40007000
 80019ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x500>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000

08001a24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d0      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d910      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	4965      	ldr	r1, [pc, #404]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d040      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d115      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e073      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06b      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 0203 	bic.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4936      	ldr	r1, [pc, #216]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b14:	f7ff f96e 	bl	8000df4 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7ff f96a 	bl	8000df4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e053      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 020c 	and.w	r2, r3, #12
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d1eb      	bne.n	8001b1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d210      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 0207 	bic.w	r2, r3, #7
 8001b5a:	4922      	ldr	r1, [pc, #136]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	; (8001bec <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1cc>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1d0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe ff70 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	080070a4 	.word	0x080070a4
 8001bf0:	20000004 	.word	0x20000004
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	b490      	push	{r4, r7}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bfe:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c00:	1d3c      	adds	r4, r7, #4
 8001c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c08:	f240 2301 	movw	r3, #513	; 0x201
 8001c0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x40>
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x46>
 8001c36:	e02b      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c3a:	623b      	str	r3, [r7, #32]
      break;
 8001c3c:	e02b      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	0c9b      	lsrs	r3, r3, #18
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3328      	adds	r3, #40	; 0x28
 8001c48:	443b      	add	r3, r7
 8001c4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d012      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	0c5b      	lsrs	r3, r3, #17
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	3328      	adds	r3, #40	; 0x28
 8001c66:	443b      	add	r3, r7
 8001c68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c72:	fb03 f202 	mul.w	r2, r3, r2
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	e004      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	623b      	str	r3, [r7, #32]
      break;
 8001c8e:	e002      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c92:	623b      	str	r3, [r7, #32]
      break;
 8001c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c96:	6a3b      	ldr	r3, [r7, #32]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc90      	pop	{r4, r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	08007010 	.word	0x08007010
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	003d0900 	.word	0x003d0900

08001cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ccc:	f7ff fff2 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	080070b4 	.word	0x080070b4

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	0adb      	lsrs	r3, r3, #11
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4903      	ldr	r1, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	080070b4 	.word	0x080070b4

08001d18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	220f      	movs	r2, #15
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_RCC_GetClockConfig+0x58>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0203 	and.w	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_RCC_GetClockConfig+0x58>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_GetClockConfig+0x58>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_RCC_GetClockConfig+0x58>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0207 	and.w	r2, r3, #7
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40022000 	.word	0x40022000

08001d78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <RCC_Delay+0x34>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <RCC_Delay+0x38>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	0a5b      	lsrs	r3, r3, #9
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d94:	bf00      	nop
  }
  while (Delay --);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	60fa      	str	r2, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f9      	bne.n	8001d94 <RCC_Delay+0x1c>
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000004 	.word	0x20000004
 8001db0:	10624dd3 	.word	0x10624dd3

08001db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e041      	b.n	8001e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f839 	bl	8001e52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3304      	adds	r3, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4610      	mov	r0, r2
 8001df4:	f000 f9b4 	bl	8002160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d001      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e03a      	b.n	8001ef2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a18      	ldr	r2, [pc, #96]	; (8001efc <HAL_TIM_Base_Start_IT+0x98>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00e      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x58>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea6:	d009      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x58>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <HAL_TIM_Base_Start_IT+0x9c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x58>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <HAL_TIM_Base_Start_IT+0xa0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d111      	bne.n	8001ee0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d010      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ede:	e007      	b.n	8001ef0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800

08001f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0202 	mvn.w	r2, #2
 8001f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8ed 	bl	800212a <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8e0 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8ef 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0204 	mvn.w	r2, #4
 8001f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8c3 	bl	800212a <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8b6 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8c5 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d122      	bne.n	800200c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0208 	mvn.w	r2, #8
 8001fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f899 	bl	800212a <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f88c 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f89b 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b10      	cmp	r3, #16
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b10      	cmp	r3, #16
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0210 	mvn.w	r2, #16
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2208      	movs	r2, #8
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f86f 	bl	800212a <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f862 	bl	8002118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f871 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0201 	mvn.w	r2, #1
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe fc42 	bl	8000910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b80      	cmp	r3, #128	; 0x80
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a4:	2b80      	cmp	r3, #128	; 0x80
 80020a6:	d107      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8bf 	bl	8002236 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d0:	2b40      	cmp	r3, #64	; 0x40
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f835 	bl	800214e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0220 	mvn.w	r2, #32
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f88a 	bl	8002224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a29      	ldr	r2, [pc, #164]	; (8002218 <TIM_Base_SetConfig+0xb8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <TIM_Base_SetConfig+0x30>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0x30>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a26      	ldr	r2, [pc, #152]	; (800221c <TIM_Base_SetConfig+0xbc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0x30>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <TIM_Base_SetConfig+0xc0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d108      	bne.n	80021a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <TIM_Base_SetConfig+0xb8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00b      	beq.n	80021c2 <TIM_Base_SetConfig+0x62>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d007      	beq.n	80021c2 <TIM_Base_SetConfig+0x62>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <TIM_Base_SetConfig+0xbc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d003      	beq.n	80021c2 <TIM_Base_SetConfig+0x62>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a18      	ldr	r2, [pc, #96]	; (8002220 <TIM_Base_SetConfig+0xc0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d108      	bne.n	80021d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <TIM_Base_SetConfig+0xb8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d103      	bne.n	8002208 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	615a      	str	r2, [r3, #20]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	40012c00 	.word	0x40012c00
 800221c:	40000400 	.word	0x40000400
 8002220:	40000800 	.word	0x40000800

08002224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e03f      	b.n	80022da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fba0 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2224      	movs	r2, #36	; 0x24
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800228a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fcc7 	bl	8002c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b08a      	sub	sp, #40	; 0x28
 80022e6:	af02      	add	r7, sp, #8
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d17c      	bne.n	80023fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_UART_Transmit+0x2c>
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e075      	b.n	80023fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_UART_Transmit+0x3e>
 800231c:	2302      	movs	r3, #2
 800231e:	e06e      	b.n	80023fe <HAL_UART_Transmit+0x11c>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2221      	movs	r2, #33	; 0x21
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002336:	f7fe fd5d 	bl	8000df4 <HAL_GetTick>
 800233a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	88fa      	ldrh	r2, [r7, #6]
 8002346:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002350:	d108      	bne.n	8002364 <HAL_UART_Transmit+0x82>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d104      	bne.n	8002364 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	e003      	b.n	800236c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002374:	e02a      	b.n	80023cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2200      	movs	r2, #0
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fab3 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e036      	b.n	80023fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10b      	bne.n	80023ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	3302      	adds	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	e007      	b.n	80023be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	3301      	adds	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1cf      	bne.n	8002376 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2200      	movs	r2, #0
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fa83 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e006      	b.n	80023fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b08a      	sub	sp, #40	; 0x28
 800240a:	af02      	add	r7, sp, #8
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	4613      	mov	r3, r2
 8002414:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b20      	cmp	r3, #32
 8002424:	f040 808c 	bne.w	8002540 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_UART_Receive+0x2e>
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e084      	b.n	8002542 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_UART_Receive+0x40>
 8002442:	2302      	movs	r3, #2
 8002444:	e07d      	b.n	8002542 <HAL_UART_Receive+0x13c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2222      	movs	r2, #34	; 0x22
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002462:	f7fe fcc7 	bl	8000df4 <HAL_GetTick>
 8002466:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	d108      	bne.n	8002490 <HAL_UART_Receive+0x8a>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d104      	bne.n	8002490 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	e003      	b.n	8002498 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024a0:	e043      	b.n	800252a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2120      	movs	r1, #32
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fa1d 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e042      	b.n	8002542 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	3302      	adds	r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e01f      	b.n	800251c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d007      	beq.n	80024f6 <HAL_UART_Receive+0xf0>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <HAL_UART_Receive+0xfe>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e008      	b.n	8002516 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002510:	b2da      	uxtb	r2, r3
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1b6      	bne.n	80024a2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_UART_IRQHandler+0x52>
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa99 	bl	8002ace <UART_Receive_IT>
      return;
 800259c:	e17b      	b.n	8002896 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80b1 	beq.w	8002708 <HAL_UART_IRQHandler+0x1bc>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_UART_IRQHandler+0x70>
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80a6 	beq.w	8002708 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_UART_IRQHandler+0x90>
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f043 0201 	orr.w	r2, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_UART_IRQHandler+0xb0>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f043 0202 	orr.w	r2, r3, #2
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_UART_IRQHandler+0xd0>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f043 0204 	orr.w	r2, r3, #4
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00f      	beq.n	8002646 <HAL_UART_IRQHandler+0xfa>
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d104      	bne.n	800263a <HAL_UART_IRQHandler+0xee>
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f043 0208 	orr.w	r2, r3, #8
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 811e 	beq.w	800288c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_UART_IRQHandler+0x11e>
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fa32 	bl	8002ace <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <HAL_UART_IRQHandler+0x146>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d031      	beq.n	80026f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f974 	bl	8002980 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d023      	beq.n	80026ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d013      	beq.n	80026e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	4a76      	ldr	r2, [pc, #472]	; (800289c <HAL_UART_IRQHandler+0x350>)
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fcda 	bl	8001084 <HAL_DMA_Abort_IT>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e0:	4610      	mov	r0, r2
 80026e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	e00e      	b.n	8002704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8ec 	bl	80028c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	e00a      	b.n	8002704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8e8 	bl	80028c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	e006      	b.n	8002704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8e4 	bl	80028c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002702:	e0c3      	b.n	800288c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002704:	bf00      	nop
    return;
 8002706:	e0c1      	b.n	800288c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	2b01      	cmp	r3, #1
 800270e:	f040 80a1 	bne.w	8002854 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 809b 	beq.w	8002854 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8095 	beq.w	8002854 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d04e      	beq.n	80027ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002758:	8a3b      	ldrh	r3, [r7, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8098 	beq.w	8002890 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002764:	8a3a      	ldrh	r2, [r7, #16]
 8002766:	429a      	cmp	r2, r3
 8002768:	f080 8092 	bcs.w	8002890 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8a3a      	ldrh	r2, [r7, #16]
 8002770:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b20      	cmp	r3, #32
 800277a:	d02b      	beq.n	80027d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800278a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0210 	bic.w	r2, r2, #16
 80027c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fc1d 	bl	800100e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f876 	bl	80028d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80027ea:	e051      	b.n	8002890 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d047      	beq.n	8002894 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002804:	8a7b      	ldrh	r3, [r7, #18]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d044      	beq.n	8002894 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002818:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0210 	bic.w	r2, r2, #16
 8002846:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002848:	8a7b      	ldrh	r3, [r7, #18]
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f842 	bl	80028d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002852:	e01f      	b.n	8002894 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_UART_IRQHandler+0x324>
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f8c9 	bl	8002a00 <UART_Transmit_IT>
    return;
 800286e:	e012      	b.n	8002896 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <HAL_UART_IRQHandler+0x34a>
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f90a 	bl	8002a9e <UART_EndTransmit_IT>
    return;
 800288a:	e004      	b.n	8002896 <HAL_UART_IRQHandler+0x34a>
    return;
 800288c:	bf00      	nop
 800288e:	e002      	b.n	8002896 <HAL_UART_IRQHandler+0x34a>
      return;
 8002890:	bf00      	nop
 8002892:	e000      	b.n	8002896 <HAL_UART_IRQHandler+0x34a>
      return;
 8002894:	bf00      	nop
  }
}
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	080029d9 	.word	0x080029d9

080028a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fc:	e02c      	b.n	8002958 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d028      	beq.n	8002958 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <UART_WaitOnFlagUntilTimeout+0x30>
 800290c:	f7fe fa72 	bl	8000df4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	429a      	cmp	r2, r3
 800291a:	d21d      	bcs.n	8002958 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800292a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e00f      	b.n	8002978 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	429a      	cmp	r2, r3
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	429a      	cmp	r2, r3
 8002974:	d0c3      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002996:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0210 	bic.w	r2, r2, #16
 80029be:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ff66 	bl	80028c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b21      	cmp	r3, #33	; 0x21
 8002a12:	d13e      	bne.n	8002a92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1c:	d114      	bne.n	8002a48 <UART_Transmit_IT+0x48>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d110      	bne.n	8002a48 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	1c9a      	adds	r2, r3, #2
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	621a      	str	r2, [r3, #32]
 8002a46:	e008      	b.n	8002a5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	1c59      	adds	r1, r3, #1
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6211      	str	r1, [r2, #32]
 8002a52:	781a      	ldrb	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4619      	mov	r1, r3
 8002a68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a92:	2302      	movs	r3, #2
  }
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff feee 	bl	80028a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b22      	cmp	r3, #34	; 0x22
 8002ae0:	f040 8099 	bne.w	8002c16 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aec:	d117      	bne.n	8002b1e <UART_Receive_IT+0x50>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d113      	bne.n	8002b1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	1c9a      	adds	r2, r3, #2
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b1c:	e026      	b.n	8002b6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b30:	d007      	beq.n	8002b42 <UART_Receive_IT+0x74>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <UART_Receive_IT+0x82>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e008      	b.n	8002b62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d148      	bne.n	8002c12 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0220 	bic.w	r2, r2, #32
 8002b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d123      	bne.n	8002c08 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0210 	bic.w	r2, r2, #16
 8002bd4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d10a      	bne.n	8002bfa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fe68 	bl	80028d6 <HAL_UARTEx_RxEventCallback>
 8002c06:	e002      	b.n	8002c0e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fe52 	bl	80028b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e002      	b.n	8002c18 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
  }
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c5a:	f023 030c 	bic.w	r3, r3, #12
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2c      	ldr	r2, [pc, #176]	; (8002d34 <UART_SetConfig+0x114>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d103      	bne.n	8002c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff f832 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	e002      	b.n	8002c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c90:	f7ff f81a 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8002c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <UART_SetConfig+0x118>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	0119      	lsls	r1, r3, #4
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009a      	lsls	r2, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <UART_SetConfig+0x118>)
 8002cce:	fba3 0302 	umull	r0, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2064      	movs	r0, #100	; 0x64
 8002cd6:	fb00 f303 	mul.w	r3, r0, r3
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	3332      	adds	r3, #50	; 0x32
 8002ce0:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <UART_SetConfig+0x118>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cec:	4419      	add	r1, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <UART_SetConfig+0x118>)
 8002d06:	fba3 0302 	umull	r0, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2064      	movs	r0, #100	; 0x64
 8002d0e:	fb00 f303 	mul.w	r3, r0, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	3332      	adds	r3, #50	; 0x32
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <UART_SetConfig+0x118>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	440a      	add	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40013800 	.word	0x40013800
 8002d38:	51eb851f 	.word	0x51eb851f

08002d3c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d42:	f3ef 8305 	mrs	r3, IPSR
 8002d46:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d52:	607b      	str	r3, [r7, #4]
  return(result);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <osKernelInitialize+0x32>
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <osKernelInitialize+0x60>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d109      	bne.n	8002d76 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d62:	f3ef 8311 	mrs	r3, BASEPRI
 8002d66:	603b      	str	r3, [r7, #0]
  return(result);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d6e:	f06f 0305 	mvn.w	r3, #5
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e00c      	b.n	8002d90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <osKernelInitialize+0x60>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d105      	bne.n	8002d8a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <osKernelInitialize+0x60>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e002      	b.n	8002d90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d90:	68fb      	ldr	r3, [r7, #12]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	200001cc 	.word	0x200001cc

08002da0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002da6:	f3ef 8305 	mrs	r3, IPSR
 8002daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db2:	f3ef 8310 	mrs	r3, PRIMASK
 8002db6:	607b      	str	r3, [r7, #4]
  return(result);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <osKernelStart+0x32>
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <osKernelStart+0x64>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d109      	bne.n	8002dda <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dca:	603b      	str	r3, [r7, #0]
  return(result);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <osKernelStart+0x3a>
    stat = osErrorISR;
 8002dd2:	f06f 0305 	mvn.w	r3, #5
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e00e      	b.n	8002df8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <osKernelStart+0x64>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <osKernelStart+0x64>)
 8002de4:	2202      	movs	r2, #2
 8002de6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002de8:	f001 f984 	bl	80040f4 <vTaskStartScheduler>
      stat = osOK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e002      	b.n	8002df8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002df8:	68fb      	ldr	r3, [r7, #12]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200001cc 	.word	0x200001cc

08002e08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b092      	sub	sp, #72	; 0x48
 8002e0c:	af04      	add	r7, sp, #16
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e18:	f3ef 8305 	mrs	r3, IPSR
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 8094 	bne.w	8002f4e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e26:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2a:	623b      	str	r3, [r7, #32]
  return(result);
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 808d 	bne.w	8002f4e <osThreadNew+0x146>
 8002e34:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <osThreadNew+0x150>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d106      	bne.n	8002e4a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e3c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e40:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 8082 	bne.w	8002f4e <osThreadNew+0x146>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d07e      	beq.n	8002f4e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002e54:	2318      	movs	r3, #24
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002e58:	2300      	movs	r3, #0
 8002e5a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002e5c:	f107 031b 	add.w	r3, r7, #27
 8002e60:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d045      	beq.n	8002efa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <osThreadNew+0x74>
        name = attr->name;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <osThreadNew+0x9a>
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	2b38      	cmp	r3, #56	; 0x38
 8002e94:	d805      	bhi.n	8002ea2 <osThreadNew+0x9a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <osThreadNew+0x9e>
        return (NULL);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e054      	b.n	8002f50 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <osThreadNew+0xd4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b5b      	cmp	r3, #91	; 0x5b
 8002ec4:	d90a      	bls.n	8002edc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <osThreadNew+0xd4>
        mem = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eda:	e010      	b.n	8002efe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10c      	bne.n	8002efe <osThreadNew+0xf6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d108      	bne.n	8002efe <osThreadNew+0xf6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d104      	bne.n	8002efe <osThreadNew+0xf6>
          mem = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef8:	e001      	b.n	8002efe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d110      	bne.n	8002f26 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f0c:	9202      	str	r2, [sp, #8]
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fe52 	bl	8003bc4 <xTaskCreateStatic>
 8002f20:	4603      	mov	r3, r0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e013      	b.n	8002f4e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d110      	bne.n	8002f4e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fe9c 	bl	8003c7c <xTaskCreate>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d001      	beq.n	8002f4e <osThreadNew+0x146>
          hTask = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f4e:	697b      	ldr	r3, [r7, #20]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3738      	adds	r7, #56	; 0x38
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200001cc 	.word	0x200001cc

08002f5c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f68:	f3ef 8305 	mrs	r3, IPSR
 8002f6c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10f      	bne.n	8002f94 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f74:	f3ef 8310 	mrs	r3, PRIMASK
 8002f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <osThreadTerminate+0x38>
 8002f80:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <osThreadTerminate+0x7c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d109      	bne.n	8002f9c <osThreadTerminate+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f88:	f3ef 8311 	mrs	r3, BASEPRI
 8002f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <osThreadTerminate+0x40>
    stat = osErrorISR;
 8002f94:	f06f 0305 	mvn.w	r3, #5
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	e017      	b.n	8002fcc <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8002fa2:	f06f 0303 	mvn.w	r3, #3
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	e010      	b.n	8002fcc <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8002faa:	69b8      	ldr	r0, [r7, #24]
 8002fac:	f001 f848 	bl	8004040 <eTaskGetState>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d005      	beq.n	8002fc6 <osThreadTerminate+0x6a>
      stat = osOK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8002fbe:	69b8      	ldr	r0, [r7, #24]
 8002fc0:	f000 ff98 	bl	8003ef4 <vTaskDelete>
 8002fc4:	e002      	b.n	8002fcc <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8002fc6:	f06f 0302 	mvn.w	r3, #2
 8002fca:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200001cc 	.word	0x200001cc

08002fdc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fe4:	f3ef 8305 	mrs	r3, IPSR
 8002fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8002fea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10f      	bne.n	8003010 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <osDelay+0x34>
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <osDelay+0x58>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d109      	bne.n	8003018 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003004:	f3ef 8311 	mrs	r3, BASEPRI
 8003008:	60bb      	str	r3, [r7, #8]
  return(result);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <osDelay+0x3c>
    stat = osErrorISR;
 8003010:	f06f 0305 	mvn.w	r3, #5
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	e007      	b.n	8003028 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 ffd8 	bl	8003fd8 <vTaskDelay>
    }
  }

  return (stat);
 8003028:	697b      	ldr	r3, [r7, #20]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200001cc 	.word	0x200001cc

08003038 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a06      	ldr	r2, [pc, #24]	; (8003060 <vApplicationGetIdleTaskMemory+0x28>)
 8003048:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4a05      	ldr	r2, [pc, #20]	; (8003064 <vApplicationGetIdleTaskMemory+0x2c>)
 800304e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2280      	movs	r2, #128	; 0x80
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	200001d0 	.word	0x200001d0
 8003064:	2000022c 	.word	0x2000022c

08003068 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a07      	ldr	r2, [pc, #28]	; (8003094 <vApplicationGetTimerTaskMemory+0x2c>)
 8003078:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4a06      	ldr	r2, [pc, #24]	; (8003098 <vApplicationGetTimerTaskMemory+0x30>)
 800307e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003086:	601a      	str	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	2000042c 	.word	0x2000042c
 8003098:	20000488 	.word	0x20000488

0800309c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f103 0208 	add.w	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f103 0208 	add.w	r2, r3, #8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f103 0208 	add.w	r2, r3, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d103      	bne.n	8003158 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e00c      	b.n	8003172 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3308      	adds	r3, #8
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e002      	b.n	8003166 <vListInsert+0x2e>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	429a      	cmp	r2, r3
 8003170:	d2f6      	bcs.n	8003160 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	601a      	str	r2, [r3, #0]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6892      	ldr	r2, [r2, #8]
 80031be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6852      	ldr	r2, [r2, #4]
 80031c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d103      	bne.n	80031dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
	...

080031fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003222:	bf00      	nop
 8003224:	e7fe      	b.n	8003224 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003226:	f002 f891 	bl	800534c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	441a      	add	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	3b01      	subs	r3, #1
 8003258:	68f9      	ldr	r1, [r7, #12]
 800325a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	441a      	add	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	22ff      	movs	r2, #255	; 0xff
 800326a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	22ff      	movs	r2, #255	; 0xff
 8003272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d114      	bne.n	80032a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01a      	beq.n	80032ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3310      	adds	r3, #16
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f9bd 	bl	8004608 <xTaskRemoveFromEventList>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d012      	beq.n	80032ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <xQueueGenericReset+0xcc>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	e009      	b.n	80032ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3310      	adds	r3, #16
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fef6 	bl	800309c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3324      	adds	r3, #36	; 0x24
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fef1 	bl	800309c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032ba:	f002 f877 	bl	80053ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032be:	2301      	movs	r3, #1
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	e000ed04 	.word	0xe000ed04

080032cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08e      	sub	sp, #56	; 0x38
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <xQueueGenericCreateStatic+0x52>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <xQueueGenericCreateStatic+0x56>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <xQueueGenericCreateStatic+0x58>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	623b      	str	r3, [r7, #32]
}
 800333a:	bf00      	nop
 800333c:	e7fe      	b.n	800333c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <xQueueGenericCreateStatic+0x7e>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <xQueueGenericCreateStatic+0x82>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <xQueueGenericCreateStatic+0x84>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	61fb      	str	r3, [r7, #28]
}
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800336a:	2350      	movs	r3, #80	; 0x50
 800336c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b50      	cmp	r3, #80	; 0x50
 8003372:	d00a      	beq.n	800338a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	61bb      	str	r3, [r7, #24]
}
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00d      	beq.n	80033b0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800339c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f805 	bl	80033ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3730      	adds	r7, #48	; 0x30
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e002      	b.n	80033dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033e8:	2101      	movs	r1, #1
 80033ea:	69b8      	ldr	r0, [r7, #24]
 80033ec:	f7ff ff06 	bl	80031fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	; 0x38
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800340e:	2300      	movs	r3, #0
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <xQueueGenericSend+0x32>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800342e:	bf00      	nop
 8003430:	e7fe      	b.n	8003430 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d103      	bne.n	8003440 <xQueueGenericSend+0x40>
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <xQueueGenericSend+0x44>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <xQueueGenericSend+0x46>
 8003444:	2300      	movs	r3, #0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <xQueueGenericSend+0x60>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d103      	bne.n	800346e <xQueueGenericSend+0x6e>
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <xQueueGenericSend+0x72>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <xQueueGenericSend+0x74>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <xQueueGenericSend+0x8e>
	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	623b      	str	r3, [r7, #32]
}
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800348e:	f001 fa7d 	bl	800498c <xTaskGetSchedulerState>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <xQueueGenericSend+0x9e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <xQueueGenericSend+0xa2>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <xQueueGenericSend+0xa4>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <xQueueGenericSend+0xbe>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	61fb      	str	r3, [r7, #28]
}
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034be:	f001 ff45 	bl	800534c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <xQueueGenericSend+0xd4>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d129      	bne.n	8003528 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034da:	f000 fa07 	bl	80038ec <prvCopyDataToQueue>
 80034de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d010      	beq.n	800350a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 f88b 	bl	8004608 <xTaskRemoveFromEventList>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034f8:	4b3f      	ldr	r3, [pc, #252]	; (80035f8 <xQueueGenericSend+0x1f8>)
 80034fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	e00a      	b.n	8003520 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003510:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <xQueueGenericSend+0x1f8>)
 8003512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003520:	f001 ff44 	bl	80053ac <vPortExitCritical>
				return pdPASS;
 8003524:	2301      	movs	r3, #1
 8003526:	e063      	b.n	80035f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800352e:	f001 ff3d 	bl	80053ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003532:	2300      	movs	r3, #0
 8003534:	e05c      	b.n	80035f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4618      	mov	r0, r3
 8003542:	f001 f8c5 	bl	80046d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003546:	2301      	movs	r3, #1
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800354a:	f001 ff2f 	bl	80053ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800354e:	f000 fe37 	bl	80041c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003552:	f001 fefb 	bl	800534c <vPortEnterCritical>
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800355c:	b25b      	sxtb	r3, r3
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d103      	bne.n	800356c <xQueueGenericSend+0x16c>
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003572:	b25b      	sxtb	r3, r3
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d103      	bne.n	8003582 <xQueueGenericSend+0x182>
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003582:	f001 ff13 	bl	80053ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003586:	1d3a      	adds	r2, r7, #4
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f001 f8b4 	bl	80046fc <xTaskCheckForTimeOut>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d124      	bne.n	80035e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800359a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800359c:	f000 fa9e 	bl	8003adc <prvIsQueueFull>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d018      	beq.n	80035d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	3310      	adds	r3, #16
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 ffda 	bl	8004568 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035b6:	f000 fa29 	bl	8003a0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035ba:	f000 fe0f 	bl	80041dc <xTaskResumeAll>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f47f af7c 	bne.w	80034be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <xQueueGenericSend+0x1f8>)
 80035c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	e772      	b.n	80034be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035da:	f000 fa17 	bl	8003a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035de:	f000 fdfd 	bl	80041dc <xTaskResumeAll>
 80035e2:	e76c      	b.n	80034be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035e6:	f000 fa11 	bl	8003a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035ea:	f000 fdf7 	bl	80041dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035ee:	2300      	movs	r3, #0
		}
	}
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3738      	adds	r7, #56	; 0x38
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	e000ed04 	.word	0xe000ed04

080035fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08e      	sub	sp, #56	; 0x38
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10a      	bne.n	800362a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003626:	bf00      	nop
 8003628:	e7fe      	b.n	8003628 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d103      	bne.n	8003638 <xQueueGenericSendFromISR+0x3c>
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <xQueueGenericSendFromISR+0x40>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <xQueueGenericSendFromISR+0x42>
 800363c:	2300      	movs	r3, #0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	623b      	str	r3, [r7, #32]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d103      	bne.n	8003666 <xQueueGenericSendFromISR+0x6a>
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <xQueueGenericSendFromISR+0x6e>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <xQueueGenericSendFromISR+0x70>
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61fb      	str	r3, [r7, #28]
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003686:	f001 ff23 	bl	80054d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800368a:	f3ef 8211 	mrs	r2, BASEPRI
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	61ba      	str	r2, [r7, #24]
 80036a0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <xQueueGenericSendFromISR+0xbc>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d12c      	bne.n	8003712 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c8:	f000 f910 	bl	80038ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d112      	bne.n	80036fc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	3324      	adds	r3, #36	; 0x24
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 ff90 	bl	8004608 <xTaskRemoveFromEventList>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00e      	beq.n	800370c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e007      	b.n	800370c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003700:	3301      	adds	r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	b25a      	sxtb	r2, r3
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800370c:	2301      	movs	r3, #1
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003710:	e001      	b.n	8003716 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003712:	2300      	movs	r3, #0
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003720:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003724:	4618      	mov	r0, r3
 8003726:	3738      	adds	r7, #56	; 0x38
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	; 0x30
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003738:	2300      	movs	r3, #0
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <xQueueReceive+0x30>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	623b      	str	r3, [r7, #32]
}
 8003758:	bf00      	nop
 800375a:	e7fe      	b.n	800375a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d103      	bne.n	800376a <xQueueReceive+0x3e>
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <xQueueReceive+0x42>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <xQueueReceive+0x44>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <xQueueReceive+0x5e>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	61fb      	str	r3, [r7, #28]
}
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800378a:	f001 f8ff 	bl	800498c <xTaskGetSchedulerState>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <xQueueReceive+0x6e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <xQueueReceive+0x72>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <xQueueReceive+0x74>
 800379e:	2300      	movs	r3, #0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <xQueueReceive+0x8e>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	61bb      	str	r3, [r7, #24]
}
 80037b6:	bf00      	nop
 80037b8:	e7fe      	b.n	80037b8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ba:	f001 fdc7 	bl	800534c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01f      	beq.n	800380a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ce:	f000 f8f7 	bl	80039c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00f      	beq.n	8003802 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	3310      	adds	r3, #16
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 ff0e 	bl	8004608 <xTaskRemoveFromEventList>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037f2:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <xQueueReceive+0x1bc>)
 80037f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003802:	f001 fdd3 	bl	80053ac <vPortExitCritical>
				return pdPASS;
 8003806:	2301      	movs	r3, #1
 8003808:	e069      	b.n	80038de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003810:	f001 fdcc 	bl	80053ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003814:	2300      	movs	r3, #0
 8003816:	e062      	b.n	80038de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800381e:	f107 0310 	add.w	r3, r7, #16
 8003822:	4618      	mov	r0, r3
 8003824:	f000 ff54 	bl	80046d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800382c:	f001 fdbe 	bl	80053ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003830:	f000 fcc6 	bl	80041c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003834:	f001 fd8a 	bl	800534c <vPortEnterCritical>
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800383e:	b25b      	sxtb	r3, r3
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d103      	bne.n	800384e <xQueueReceive+0x122>
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003854:	b25b      	sxtb	r3, r3
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d103      	bne.n	8003864 <xQueueReceive+0x138>
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003864:	f001 fda2 	bl	80053ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003868:	1d3a      	adds	r2, r7, #4
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f000 ff43 	bl	80046fc <xTaskCheckForTimeOut>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d123      	bne.n	80038c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800387c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387e:	f000 f917 	bl	8003ab0 <prvIsQueueEmpty>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	3324      	adds	r3, #36	; 0x24
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fe69 	bl	8004568 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003898:	f000 f8b8 	bl	8003a0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800389c:	f000 fc9e 	bl	80041dc <xTaskResumeAll>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d189      	bne.n	80037ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <xQueueReceive+0x1bc>)
 80038a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	e780      	b.n	80037ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ba:	f000 f8a7 	bl	8003a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038be:	f000 fc8d 	bl	80041dc <xTaskResumeAll>
 80038c2:	e77a      	b.n	80037ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c6:	f000 f8a1 	bl	8003a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ca:	f000 fc87 	bl	80041dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d0:	f000 f8ee 	bl	8003ab0 <prvIsQueueEmpty>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f43f af6f 	beq.w	80037ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3730      	adds	r7, #48	; 0x30
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10d      	bne.n	8003926 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d14d      	bne.n	80039ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4618      	mov	r0, r3
 8003918:	f001 f856 	bl	80049c8 <xTaskPriorityDisinherit>
 800391c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	e043      	b.n	80039ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d119      	bne.n	8003960 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6898      	ldr	r0, [r3, #8]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	461a      	mov	r2, r3
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	f002 f80e 	bl	8005958 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d32b      	bcc.n	80039ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	e026      	b.n	80039ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68d8      	ldr	r0, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	461a      	mov	r2, r3
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	f001 fff4 	bl	8005958 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	425b      	negs	r3, r3
 800397a:	441a      	add	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	425b      	negs	r3, r3
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d105      	bne.n	80039ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039b6:	697b      	ldr	r3, [r7, #20]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	441a      	add	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d303      	bcc.n	80039f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68d9      	ldr	r1, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	461a      	mov	r2, r3
 80039fe:	6838      	ldr	r0, [r7, #0]
 8003a00:	f001 ffaa 	bl	8005958 <memcpy>
	}
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a14:	f001 fc9a 	bl	800534c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a20:	e011      	b.n	8003a46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d012      	beq.n	8003a50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3324      	adds	r3, #36	; 0x24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fdea 	bl	8004608 <xTaskRemoveFromEventList>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a3a:	f000 fec1 	bl	80047c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	dce9      	bgt.n	8003a22 <prvUnlockQueue+0x16>
 8003a4e:	e000      	b.n	8003a52 <prvUnlockQueue+0x46>
					break;
 8003a50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	22ff      	movs	r2, #255	; 0xff
 8003a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a5a:	f001 fca7 	bl	80053ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a5e:	f001 fc75 	bl	800534c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a6a:	e011      	b.n	8003a90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d012      	beq.n	8003a9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3310      	adds	r3, #16
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fdc5 	bl	8004608 <xTaskRemoveFromEventList>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a84:	f000 fe9c 	bl	80047c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a88:	7bbb      	ldrb	r3, [r7, #14]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	dce9      	bgt.n	8003a6c <prvUnlockQueue+0x60>
 8003a98:	e000      	b.n	8003a9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003aa4:	f001 fc82 	bl	80053ac <vPortExitCritical>
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ab8:	f001 fc48 	bl	800534c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e001      	b.n	8003ace <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ace:	f001 fc6d 	bl	80053ac <vPortExitCritical>

	return xReturn;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ae4:	f001 fc32 	bl	800534c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d102      	bne.n	8003afa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e001      	b.n	8003afe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003afe:	f001 fc55 	bl	80053ac <vPortExitCritical>

	return xReturn;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e014      	b.n	8003b46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b1c:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <vQueueAddToRegistry+0x4c>)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b28:	490b      	ldr	r1, [pc, #44]	; (8003b58 <vQueueAddToRegistry+0x4c>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <vQueueAddToRegistry+0x4c>)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b3e:	e006      	b.n	8003b4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b07      	cmp	r3, #7
 8003b4a:	d9e7      	bls.n	8003b1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	20000888 	.word	0x20000888

08003b5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b6c:	f001 fbee 	bl	800534c <vPortEnterCritical>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b76:	b25b      	sxtb	r3, r3
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d103      	bne.n	8003b86 <vQueueWaitForMessageRestricted+0x2a>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b8c:	b25b      	sxtb	r3, r3
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d103      	bne.n	8003b9c <vQueueWaitForMessageRestricted+0x40>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9c:	f001 fc06 	bl	80053ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3324      	adds	r3, #36	; 0x24
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fcfd 	bl	80045b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7ff ff28 	bl	8003a0c <prvUnlockQueue>
	}
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08e      	sub	sp, #56	; 0x38
 8003bc8:	af04      	add	r7, sp, #16
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xTaskCreateStatic+0x2a>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	623b      	str	r3, [r7, #32]
}
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <xTaskCreateStatic+0x46>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61fb      	str	r3, [r7, #28]
}
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c0a:	235c      	movs	r3, #92	; 0x5c
 8003c0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b5c      	cmp	r3, #92	; 0x5c
 8003c12:	d00a      	beq.n	8003c2a <xTaskCreateStatic+0x66>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	61bb      	str	r3, [r7, #24]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01e      	beq.n	8003c6e <xTaskCreateStatic+0xaa>
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01b      	beq.n	8003c6e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9303      	str	r3, [sp, #12]
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f850 	bl	8003d06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c68:	f000 f8d4 	bl	8003e14 <prvAddNewTaskToReadyList>
 8003c6c:	e001      	b.n	8003c72 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c72:	697b      	ldr	r3, [r7, #20]
	}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3728      	adds	r7, #40	; 0x28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08c      	sub	sp, #48	; 0x30
 8003c80:	af04      	add	r7, sp, #16
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 fc5b 	bl	800554c <pvPortMalloc>
 8003c96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00e      	beq.n	8003cbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c9e:	205c      	movs	r0, #92	; 0x5c
 8003ca0:	f001 fc54 	bl	800554c <pvPortMalloc>
 8003ca4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb2:	e005      	b.n	8003cc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cb4:	6978      	ldr	r0, [r7, #20]
 8003cb6:	f001 fd0d 	bl	80056d4 <vPortFree>
 8003cba:	e001      	b.n	8003cc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d017      	beq.n	8003cf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9303      	str	r3, [sp, #12]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	9302      	str	r3, [sp, #8]
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f80e 	bl	8003d06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cea:	69f8      	ldr	r0, [r7, #28]
 8003cec:	f000 f892 	bl	8003e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e002      	b.n	8003cfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
	}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b088      	sub	sp, #32
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	21a5      	movs	r1, #165	; 0xa5
 8003d20:	f001 fe28 	bl	8005974 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f023 0307 	bic.w	r3, r3, #7
 8003d3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	617b      	str	r3, [r7, #20]
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e012      	b.n	8003d8a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	7819      	ldrb	r1, [r3, #0]
 8003d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	3334      	adds	r3, #52	; 0x34
 8003d74:	460a      	mov	r2, r1
 8003d76:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d006      	beq.n	8003d92 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b0f      	cmp	r3, #15
 8003d8e:	d9e9      	bls.n	8003d64 <prvInitialiseNewTask+0x5e>
 8003d90:	e000      	b.n	8003d94 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003d92:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	2b37      	cmp	r3, #55	; 0x37
 8003da0:	d901      	bls.n	8003da6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003da2:	2337      	movs	r3, #55	; 0x37
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	2200      	movs	r2, #0
 8003db6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff f98c 	bl	80030da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff f987 	bl	80030da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	2200      	movs	r2, #0
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	69b8      	ldr	r0, [r7, #24]
 8003df6:	f001 f9bb 	bl	8005170 <pxPortInitialiseStack>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e0c:	bf00      	nop
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e1c:	f001 fa96 	bl	800534c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e20:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3301      	adds	r3, #1
 8003e26:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e32:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d110      	bne.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e40:	f000 fce2 	bl	8004808 <prvInitialiseTaskLists>
 8003e44:	e00d      	b.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e46:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <prvAddNewTaskToReadyList+0xcc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e4e:	4b23      	ldr	r3, [pc, #140]	; (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d802      	bhi.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <prvAddNewTaskToReadyList+0xd0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <prvAddNewTaskToReadyList+0xd0>)
 8003e6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <prvAddNewTaskToReadyList+0xd0>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <prvAddNewTaskToReadyList+0xd4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d903      	bls.n	8003e88 <prvAddNewTaskToReadyList+0x74>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <prvAddNewTaskToReadyList+0xd4>)
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4a15      	ldr	r2, [pc, #84]	; (8003eec <prvAddNewTaskToReadyList+0xd8>)
 8003e96:	441a      	add	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f7ff f927 	bl	80030f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ea4:	f001 fa82 	bl	80053ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <prvAddNewTaskToReadyList+0xcc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d207      	bcs.n	8003ece <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <prvAddNewTaskToReadyList+0xdc>)
 8003ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000d9c 	.word	0x20000d9c
 8003edc:	200008c8 	.word	0x200008c8
 8003ee0:	20000da8 	.word	0x20000da8
 8003ee4:	20000db8 	.word	0x20000db8
 8003ee8:	20000da4 	.word	0x20000da4
 8003eec:	200008cc 	.word	0x200008cc
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003efc:	f001 fa26 	bl	800534c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <vTaskDelete+0x18>
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <vTaskDelete+0xc4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	e000      	b.n	8003f0e <vTaskDelete+0x1a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff f947 	bl	80031a8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3318      	adds	r3, #24
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff f93e 	bl	80031a8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003f2c:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <vTaskDelete+0xc8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <vTaskDelete+0xc8>)
 8003f34:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <vTaskDelete+0xc4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d10b      	bne.n	8003f58 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3304      	adds	r3, #4
 8003f44:	4619      	mov	r1, r3
 8003f46:	481e      	ldr	r0, [pc, #120]	; (8003fc0 <vTaskDelete+0xcc>)
 8003f48:	f7ff f8d3 	bl	80030f2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <vTaskDelete+0xd0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <vTaskDelete+0xd0>)
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e009      	b.n	8003f6c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003f58:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <vTaskDelete+0xd4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <vTaskDelete+0xd4>)
 8003f60:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fcbe 	bl	80048e4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003f68:	f000 fcec 	bl	8004944 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8003f6c:	f001 fa1e 	bl	80053ac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003f70:	4b16      	ldr	r3, [pc, #88]	; (8003fcc <vTaskDelete+0xd8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <vTaskDelete+0xc4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d116      	bne.n	8003fb0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003f82:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <vTaskDelete+0xdc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <vTaskDelete+0xac>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60bb      	str	r3, [r7, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <vTaskDelete+0xe0>)
 8003fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200008c8 	.word	0x200008c8
 8003fbc:	20000db8 	.word	0x20000db8
 8003fc0:	20000d70 	.word	0x20000d70
 8003fc4:	20000d84 	.word	0x20000d84
 8003fc8:	20000d9c 	.word	0x20000d9c
 8003fcc:	20000da8 	.word	0x20000da8
 8003fd0:	20000dc4 	.word	0x20000dc4
 8003fd4:	e000ed04 	.word	0xe000ed04

08003fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d017      	beq.n	800401a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <vTaskDelay+0x60>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <vTaskDelay+0x30>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	60bb      	str	r3, [r7, #8]
}
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004008:	f000 f8da 	bl	80041c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800400c:	2100      	movs	r1, #0
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fd48 	bl	8004aa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004014:	f000 f8e2 	bl	80041dc <xTaskResumeAll>
 8004018:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d107      	bne.n	8004030 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <vTaskDelay+0x64>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000dc4 	.word	0x20000dc4
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <eTaskGetState+0x28>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	60bb      	str	r3, [r7, #8]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <eTaskGetState+0xa0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	d102      	bne.n	8004078 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004072:	2300      	movs	r3, #0
 8004074:	75fb      	strb	r3, [r7, #23]
 8004076:	e02d      	b.n	80040d4 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 8004078:	f001 f968 	bl	800534c <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004082:	f001 f993 	bl	80053ac <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8004086:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <eTaskGetState+0xa4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	429a      	cmp	r2, r3
 800408e:	d004      	beq.n	800409a <eTaskGetState+0x5a>
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <eTaskGetState+0xa8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	429a      	cmp	r2, r3
 8004098:	d102      	bne.n	80040a0 <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800409a:	2302      	movs	r3, #2
 800409c:	75fb      	strb	r3, [r7, #23]
 800409e:	e019      	b.n	80040d4 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <eTaskGetState+0xac>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d109      	bne.n	80040bc <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 80040b0:	2303      	movs	r3, #3
 80040b2:	75fb      	strb	r3, [r7, #23]
 80040b4:	e00e      	b.n	80040d4 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 80040b6:	2302      	movs	r3, #2
 80040b8:	75fb      	strb	r3, [r7, #23]
 80040ba:	e00b      	b.n	80040d4 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <eTaskGetState+0xb0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d002      	beq.n	80040ca <eTaskGetState+0x8a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80040ca:	2304      	movs	r3, #4
 80040cc:	75fb      	strb	r3, [r7, #23]
 80040ce:	e001      	b.n	80040d4 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80040d0:	2301      	movs	r3, #1
 80040d2:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200008c8 	.word	0x200008c8
 80040e4:	20000d54 	.word	0x20000d54
 80040e8:	20000d58 	.word	0x20000d58
 80040ec:	20000d88 	.word	0x20000d88
 80040f0:	20000d70 	.word	0x20000d70

080040f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	; 0x28
 80040f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004102:	463a      	mov	r2, r7
 8004104:	1d39      	adds	r1, r7, #4
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe ff94 	bl	8003038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004110:	6839      	ldr	r1, [r7, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	9202      	str	r2, [sp, #8]
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	2300      	movs	r3, #0
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	2300      	movs	r3, #0
 8004120:	460a      	mov	r2, r1
 8004122:	4921      	ldr	r1, [pc, #132]	; (80041a8 <vTaskStartScheduler+0xb4>)
 8004124:	4821      	ldr	r0, [pc, #132]	; (80041ac <vTaskStartScheduler+0xb8>)
 8004126:	f7ff fd4d 	bl	8003bc4 <xTaskCreateStatic>
 800412a:	4603      	mov	r3, r0
 800412c:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <vTaskStartScheduler+0xbc>)
 800412e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004130:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <vTaskStartScheduler+0xbc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004138:	2301      	movs	r3, #1
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e001      	b.n	8004142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d102      	bne.n	800414e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004148:	f000 fd00 	bl	8004b4c <xTimerCreateTimerTask>
 800414c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d116      	bne.n	8004182 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	613b      	str	r3, [r7, #16]
}
 8004166:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004168:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <vTaskStartScheduler+0xc0>)
 800416a:	f04f 32ff 	mov.w	r2, #4294967295
 800416e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <vTaskStartScheduler+0xc4>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004176:	4b11      	ldr	r3, [pc, #68]	; (80041bc <vTaskStartScheduler+0xc8>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800417c:	f001 f874 	bl	8005268 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004180:	e00e      	b.n	80041a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d10a      	bne.n	80041a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	60fb      	str	r3, [r7, #12]
}
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <vTaskStartScheduler+0xaa>
}
 80041a0:	bf00      	nop
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	08007020 	.word	0x08007020
 80041ac:	080047d9 	.word	0x080047d9
 80041b0:	20000dc0 	.word	0x20000dc0
 80041b4:	20000dbc 	.word	0x20000dbc
 80041b8:	20000da8 	.word	0x20000da8
 80041bc:	20000da0 	.word	0x20000da0

080041c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <vTaskSuspendAll+0x18>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	4a03      	ldr	r2, [pc, #12]	; (80041d8 <vTaskSuspendAll+0x18>)
 80041cc:	6013      	str	r3, [r2, #0]
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000dc4 	.word	0x20000dc4

080041dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041ea:	4b42      	ldr	r3, [pc, #264]	; (80042f4 <xTaskResumeAll+0x118>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <xTaskResumeAll+0x2c>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	603b      	str	r3, [r7, #0]
}
 8004204:	bf00      	nop
 8004206:	e7fe      	b.n	8004206 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004208:	f001 f8a0 	bl	800534c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800420c:	4b39      	ldr	r3, [pc, #228]	; (80042f4 <xTaskResumeAll+0x118>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3b01      	subs	r3, #1
 8004212:	4a38      	ldr	r2, [pc, #224]	; (80042f4 <xTaskResumeAll+0x118>)
 8004214:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <xTaskResumeAll+0x118>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d162      	bne.n	80042e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <xTaskResumeAll+0x11c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d05e      	beq.n	80042e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004226:	e02f      	b.n	8004288 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004228:	4b34      	ldr	r3, [pc, #208]	; (80042fc <xTaskResumeAll+0x120>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3318      	adds	r3, #24
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe ffb7 	bl	80031a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3304      	adds	r3, #4
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe ffb2 	bl	80031a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <xTaskResumeAll+0x124>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d903      	bls.n	8004258 <xTaskResumeAll+0x7c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <xTaskResumeAll+0x124>)
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <xTaskResumeAll+0x128>)
 8004266:	441a      	add	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f7fe ff3f 	bl	80030f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	4b23      	ldr	r3, [pc, #140]	; (8004308 <xTaskResumeAll+0x12c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004282:	4b22      	ldr	r3, [pc, #136]	; (800430c <xTaskResumeAll+0x130>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004288:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <xTaskResumeAll+0x120>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1cb      	bne.n	8004228 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004296:	f000 fb55 	bl	8004944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <xTaskResumeAll+0x134>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d010      	beq.n	80042c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042a6:	f000 f845 	bl	8004334 <xTaskIncrementTick>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042b0:	4b16      	ldr	r3, [pc, #88]	; (800430c <xTaskResumeAll+0x130>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f1      	bne.n	80042a6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <xTaskResumeAll+0x134>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <xTaskResumeAll+0x130>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042d4:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <xTaskResumeAll+0x138>)
 80042d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042e4:	f001 f862 	bl	80053ac <vPortExitCritical>

	return xAlreadyYielded;
 80042e8:	68bb      	ldr	r3, [r7, #8]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000dc4 	.word	0x20000dc4
 80042f8:	20000d9c 	.word	0x20000d9c
 80042fc:	20000d5c 	.word	0x20000d5c
 8004300:	20000da4 	.word	0x20000da4
 8004304:	200008cc 	.word	0x200008cc
 8004308:	200008c8 	.word	0x200008c8
 800430c:	20000db0 	.word	0x20000db0
 8004310:	20000dac 	.word	0x20000dac
 8004314:	e000ed04 	.word	0xe000ed04

08004318 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <xTaskGetTickCount+0x18>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004324:	687b      	ldr	r3, [r7, #4]
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	20000da0 	.word	0x20000da0

08004334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433e:	4b51      	ldr	r3, [pc, #324]	; (8004484 <xTaskIncrementTick+0x150>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 808e 	bne.w	8004464 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004348:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <xTaskIncrementTick+0x154>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004350:	4a4d      	ldr	r2, [pc, #308]	; (8004488 <xTaskIncrementTick+0x154>)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d120      	bne.n	800439e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800435c:	4b4b      	ldr	r3, [pc, #300]	; (800448c <xTaskIncrementTick+0x158>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <xTaskIncrementTick+0x48>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	603b      	str	r3, [r7, #0]
}
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <xTaskIncrementTick+0x46>
 800437c:	4b43      	ldr	r3, [pc, #268]	; (800448c <xTaskIncrementTick+0x158>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b43      	ldr	r3, [pc, #268]	; (8004490 <xTaskIncrementTick+0x15c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a41      	ldr	r2, [pc, #260]	; (800448c <xTaskIncrementTick+0x158>)
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4a41      	ldr	r2, [pc, #260]	; (8004490 <xTaskIncrementTick+0x15c>)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b40      	ldr	r3, [pc, #256]	; (8004494 <xTaskIncrementTick+0x160>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	4a3f      	ldr	r2, [pc, #252]	; (8004494 <xTaskIncrementTick+0x160>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	f000 fad3 	bl	8004944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800439e:	4b3e      	ldr	r3, [pc, #248]	; (8004498 <xTaskIncrementTick+0x164>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d34e      	bcc.n	8004446 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043a8:	4b38      	ldr	r3, [pc, #224]	; (800448c <xTaskIncrementTick+0x158>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <xTaskIncrementTick+0x82>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xTaskIncrementTick+0x84>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043bc:	4b36      	ldr	r3, [pc, #216]	; (8004498 <xTaskIncrementTick+0x164>)
 80043be:	f04f 32ff 	mov.w	r2, #4294967295
 80043c2:	601a      	str	r2, [r3, #0]
					break;
 80043c4:	e03f      	b.n	8004446 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <xTaskIncrementTick+0x158>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d203      	bcs.n	80043e6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043de:	4a2e      	ldr	r2, [pc, #184]	; (8004498 <xTaskIncrementTick+0x164>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6013      	str	r3, [r2, #0]
						break;
 80043e4:	e02f      	b.n	8004446 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fedc 	bl	80031a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	3318      	adds	r3, #24
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe fed3 	bl	80031a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004406:	4b25      	ldr	r3, [pc, #148]	; (800449c <xTaskIncrementTick+0x168>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d903      	bls.n	8004416 <xTaskIncrementTick+0xe2>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	4a22      	ldr	r2, [pc, #136]	; (800449c <xTaskIncrementTick+0x168>)
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <xTaskIncrementTick+0x16c>)
 8004424:	441a      	add	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	3304      	adds	r3, #4
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f7fe fe60 	bl	80030f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004436:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <xTaskIncrementTick+0x170>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	429a      	cmp	r2, r3
 800443e:	d3b3      	bcc.n	80043a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004444:	e7b0      	b.n	80043a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004446:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <xTaskIncrementTick+0x170>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	4914      	ldr	r1, [pc, #80]	; (80044a0 <xTaskIncrementTick+0x16c>)
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d907      	bls.n	800446e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800445e:	2301      	movs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e004      	b.n	800446e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004464:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <xTaskIncrementTick+0x174>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <xTaskIncrementTick+0x174>)
 800446c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <xTaskIncrementTick+0x178>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004476:	2301      	movs	r3, #1
 8004478:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800447a:	697b      	ldr	r3, [r7, #20]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000dc4 	.word	0x20000dc4
 8004488:	20000da0 	.word	0x20000da0
 800448c:	20000d54 	.word	0x20000d54
 8004490:	20000d58 	.word	0x20000d58
 8004494:	20000db4 	.word	0x20000db4
 8004498:	20000dbc 	.word	0x20000dbc
 800449c:	20000da4 	.word	0x20000da4
 80044a0:	200008cc 	.word	0x200008cc
 80044a4:	200008c8 	.word	0x200008c8
 80044a8:	20000dac 	.word	0x20000dac
 80044ac:	20000db0 	.word	0x20000db0

080044b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044b6:	4b27      	ldr	r3, [pc, #156]	; (8004554 <vTaskSwitchContext+0xa4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044be:	4b26      	ldr	r3, [pc, #152]	; (8004558 <vTaskSwitchContext+0xa8>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044c4:	e041      	b.n	800454a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <vTaskSwitchContext+0xa8>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044cc:	4b23      	ldr	r3, [pc, #140]	; (800455c <vTaskSwitchContext+0xac>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e010      	b.n	80044f6 <vTaskSwitchContext+0x46>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	607b      	str	r3, [r7, #4]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <vTaskSwitchContext+0x3e>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	491a      	ldr	r1, [pc, #104]	; (8004560 <vTaskSwitchContext+0xb0>)
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0e4      	beq.n	80044d4 <vTaskSwitchContext+0x24>
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4a12      	ldr	r2, [pc, #72]	; (8004560 <vTaskSwitchContext+0xb0>)
 8004516:	4413      	add	r3, r2
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	3308      	adds	r3, #8
 800452c:	429a      	cmp	r2, r3
 800452e:	d104      	bne.n	800453a <vTaskSwitchContext+0x8a>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4a08      	ldr	r2, [pc, #32]	; (8004564 <vTaskSwitchContext+0xb4>)
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4a05      	ldr	r2, [pc, #20]	; (800455c <vTaskSwitchContext+0xac>)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6013      	str	r3, [r2, #0]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	20000dc4 	.word	0x20000dc4
 8004558:	20000db0 	.word	0x20000db0
 800455c:	20000da4 	.word	0x20000da4
 8004560:	200008cc 	.word	0x200008cc
 8004564:	200008c8 	.word	0x200008c8

08004568 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60fb      	str	r3, [r7, #12]
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800458e:	4b07      	ldr	r3, [pc, #28]	; (80045ac <vTaskPlaceOnEventList+0x44>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3318      	adds	r3, #24
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fe fdce 	bl	8003138 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800459c:	2101      	movs	r1, #1
 800459e:	6838      	ldr	r0, [r7, #0]
 80045a0:	f000 fa80 	bl	8004aa4 <prvAddCurrentTaskToDelayedList>
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200008c8 	.word	0x200008c8

080045b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	617b      	str	r3, [r7, #20]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <vTaskPlaceOnEventListRestricted+0x54>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3318      	adds	r3, #24
 80045de:	4619      	mov	r1, r3
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7fe fd86 	bl	80030f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
 80045f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	68b8      	ldr	r0, [r7, #8]
 80045f6:	f000 fa55 	bl	8004aa4 <prvAddCurrentTaskToDelayedList>
	}
 80045fa:	bf00      	nop
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	200008c8 	.word	0x200008c8

08004608 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60fb      	str	r3, [r7, #12]
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	3318      	adds	r3, #24
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fdb5 	bl	80031a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463e:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <xTaskRemoveFromEventList+0xb0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d11d      	bne.n	8004682 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3304      	adds	r3, #4
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fdac 	bl	80031a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <xTaskRemoveFromEventList+0xb4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d903      	bls.n	8004664 <xTaskRemoveFromEventList+0x5c>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	4a16      	ldr	r2, [pc, #88]	; (80046bc <xTaskRemoveFromEventList+0xb4>)
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <xTaskRemoveFromEventList+0xb8>)
 8004672:	441a      	add	r2, r3
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f7fe fd39 	bl	80030f2 <vListInsertEnd>
 8004680:	e005      	b.n	800468e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	3318      	adds	r3, #24
 8004686:	4619      	mov	r1, r3
 8004688:	480e      	ldr	r0, [pc, #56]	; (80046c4 <xTaskRemoveFromEventList+0xbc>)
 800468a:	f7fe fd32 	bl	80030f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004692:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <xTaskRemoveFromEventList+0xc0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	429a      	cmp	r2, r3
 800469a:	d905      	bls.n	80046a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <xTaskRemoveFromEventList+0xc4>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e001      	b.n	80046ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046ac:	697b      	ldr	r3, [r7, #20]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000dc4 	.word	0x20000dc4
 80046bc:	20000da4 	.word	0x20000da4
 80046c0:	200008cc 	.word	0x200008cc
 80046c4:	20000d5c 	.word	0x20000d5c
 80046c8:	200008c8 	.word	0x200008c8
 80046cc:	20000db0 	.word	0x20000db0

080046d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <vTaskInternalSetTimeOutState+0x24>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <vTaskInternalSetTimeOutState+0x28>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	605a      	str	r2, [r3, #4]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000db4 	.word	0x20000db4
 80046f8:	20000da0 	.word	0x20000da0

080046fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	613b      	str	r3, [r7, #16]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	60fb      	str	r3, [r7, #12]
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800473e:	f000 fe05 	bl	800534c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004742:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <xTaskCheckForTimeOut+0xbc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d102      	bne.n	8004762 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	e023      	b.n	80047aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <xTaskCheckForTimeOut+0xc0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d007      	beq.n	800477e <xTaskCheckForTimeOut+0x82>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	429a      	cmp	r2, r3
 8004776:	d302      	bcc.n	800477e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004778:	2301      	movs	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e015      	b.n	80047aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	429a      	cmp	r2, r3
 8004786:	d20b      	bcs.n	80047a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	1ad2      	subs	r2, r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff ff9b 	bl	80046d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	e004      	b.n	80047aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047aa:	f000 fdff 	bl	80053ac <vPortExitCritical>

	return xReturn;
 80047ae:	69fb      	ldr	r3, [r7, #28]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000da0 	.word	0x20000da0
 80047bc:	20000db4 	.word	0x20000db4

080047c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <vTaskMissedYield+0x14>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
}
 80047ca:	bf00      	nop
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000db0 	.word	0x20000db0

080047d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047e0:	f000 f852 	bl	8004888 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <prvIdleTask+0x28>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d9f9      	bls.n	80047e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <prvIdleTask+0x2c>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047fc:	e7f0      	b.n	80047e0 <prvIdleTask+0x8>
 80047fe:	bf00      	nop
 8004800:	200008cc 	.word	0x200008cc
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	e00c      	b.n	800482e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4a12      	ldr	r2, [pc, #72]	; (8004868 <prvInitialiseTaskLists+0x60>)
 8004820:	4413      	add	r3, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe fc3a 	bl	800309c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3301      	adds	r3, #1
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b37      	cmp	r3, #55	; 0x37
 8004832:	d9ef      	bls.n	8004814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004834:	480d      	ldr	r0, [pc, #52]	; (800486c <prvInitialiseTaskLists+0x64>)
 8004836:	f7fe fc31 	bl	800309c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800483a:	480d      	ldr	r0, [pc, #52]	; (8004870 <prvInitialiseTaskLists+0x68>)
 800483c:	f7fe fc2e 	bl	800309c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004840:	480c      	ldr	r0, [pc, #48]	; (8004874 <prvInitialiseTaskLists+0x6c>)
 8004842:	f7fe fc2b 	bl	800309c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004846:	480c      	ldr	r0, [pc, #48]	; (8004878 <prvInitialiseTaskLists+0x70>)
 8004848:	f7fe fc28 	bl	800309c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800484c:	480b      	ldr	r0, [pc, #44]	; (800487c <prvInitialiseTaskLists+0x74>)
 800484e:	f7fe fc25 	bl	800309c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <prvInitialiseTaskLists+0x78>)
 8004854:	4a05      	ldr	r2, [pc, #20]	; (800486c <prvInitialiseTaskLists+0x64>)
 8004856:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <prvInitialiseTaskLists+0x7c>)
 800485a:	4a05      	ldr	r2, [pc, #20]	; (8004870 <prvInitialiseTaskLists+0x68>)
 800485c:	601a      	str	r2, [r3, #0]
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200008cc 	.word	0x200008cc
 800486c:	20000d2c 	.word	0x20000d2c
 8004870:	20000d40 	.word	0x20000d40
 8004874:	20000d5c 	.word	0x20000d5c
 8004878:	20000d70 	.word	0x20000d70
 800487c:	20000d88 	.word	0x20000d88
 8004880:	20000d54 	.word	0x20000d54
 8004884:	20000d58 	.word	0x20000d58

08004888 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800488e:	e019      	b.n	80048c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004890:	f000 fd5c 	bl	800534c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004894:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <prvCheckTasksWaitingTermination+0x50>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fc81 	bl	80031a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048a6:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <prvCheckTasksWaitingTermination+0x54>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	4a0b      	ldr	r2, [pc, #44]	; (80048dc <prvCheckTasksWaitingTermination+0x54>)
 80048ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <prvCheckTasksWaitingTermination+0x58>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <prvCheckTasksWaitingTermination+0x58>)
 80048b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048ba:	f000 fd77 	bl	80053ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f810 	bl	80048e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <prvCheckTasksWaitingTermination+0x58>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e1      	bne.n	8004890 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000d70 	.word	0x20000d70
 80048dc:	20000d9c 	.word	0x20000d9c
 80048e0:	20000d84 	.word	0x20000d84

080048e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d108      	bne.n	8004908 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 feea 	bl	80056d4 <vPortFree>
				vPortFree( pxTCB );
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fee7 	bl	80056d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004906:	e018      	b.n	800493a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800490e:	2b01      	cmp	r3, #1
 8004910:	d103      	bne.n	800491a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fede 	bl	80056d4 <vPortFree>
	}
 8004918:	e00f      	b.n	800493a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004920:	2b02      	cmp	r3, #2
 8004922:	d00a      	beq.n	800493a <prvDeleteTCB+0x56>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60fb      	str	r3, [r7, #12]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <prvDeleteTCB+0x54>
	}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <prvResetNextTaskUnblockTime+0x40>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <prvResetNextTaskUnblockTime+0x14>
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <prvResetNextTaskUnblockTime+0x16>
 8004958:	2300      	movs	r3, #0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <prvResetNextTaskUnblockTime+0x44>)
 8004960:	f04f 32ff 	mov.w	r2, #4294967295
 8004964:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004966:	e008      	b.n	800497a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <prvResetNextTaskUnblockTime+0x40>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4a04      	ldr	r2, [pc, #16]	; (8004988 <prvResetNextTaskUnblockTime+0x44>)
 8004978:	6013      	str	r3, [r2, #0]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	20000d54 	.word	0x20000d54
 8004988:	20000dbc 	.word	0x20000dbc

0800498c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <xTaskGetSchedulerState+0x34>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800499a:	2301      	movs	r3, #1
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	e008      	b.n	80049b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049a0:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <xTaskGetSchedulerState+0x38>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049a8:	2302      	movs	r3, #2
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	e001      	b.n	80049b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049b2:	687b      	ldr	r3, [r7, #4]
	}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000da8 	.word	0x20000da8
 80049c4:	20000dc4 	.word	0x20000dc4

080049c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d056      	beq.n	8004a8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049de:	4b2e      	ldr	r3, [pc, #184]	; (8004a98 <xTaskPriorityDisinherit+0xd0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d00a      	beq.n	80049fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	60bb      	str	r3, [r7, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	e7fe      	b.n	8004a1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	1e5a      	subs	r2, r3, #1
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d02c      	beq.n	8004a8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d128      	bne.n	8004a8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fbb2 	bl	80031a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <xTaskPriorityDisinherit+0xd4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d903      	bls.n	8004a6c <xTaskPriorityDisinherit+0xa4>
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <xTaskPriorityDisinherit+0xd4>)
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <xTaskPriorityDisinherit+0xd8>)
 8004a7a:	441a      	add	r2, r3
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7fe fb35 	bl	80030f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a8c:	697b      	ldr	r3, [r7, #20]
	}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	200008c8 	.word	0x200008c8
 8004a9c:	20000da4 	.word	0x20000da4
 8004aa0:	200008cc 	.word	0x200008cc

08004aa4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aae:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ab4:	4b20      	ldr	r3, [pc, #128]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe fb74 	bl	80031a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d10a      	bne.n	8004ade <prvAddCurrentTaskToDelayedList+0x3a>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ace:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4819      	ldr	r0, [pc, #100]	; (8004b3c <prvAddCurrentTaskToDelayedList+0x98>)
 8004ad8:	f7fe fb0b 	bl	80030f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004adc:	e026      	b.n	8004b2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d209      	bcs.n	8004b0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af6:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f7fe fb18 	bl	8003138 <vListInsert>
}
 8004b08:	e010      	b.n	8004b2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7fe fb0e 	bl	8003138 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d202      	bcs.n	8004b2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b26:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6013      	str	r3, [r2, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000da0 	.word	0x20000da0
 8004b38:	200008c8 	.word	0x200008c8
 8004b3c:	20000d88 	.word	0x20000d88
 8004b40:	20000d58 	.word	0x20000d58
 8004b44:	20000d54 	.word	0x20000d54
 8004b48:	20000dbc 	.word	0x20000dbc

08004b4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b56:	f000 facb 	bl	80050f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <xTimerCreateTimerTask+0x80>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d021      	beq.n	8004ba6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b6a:	1d3a      	adds	r2, r7, #4
 8004b6c:	f107 0108 	add.w	r1, r7, #8
 8004b70:	f107 030c 	add.w	r3, r7, #12
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe fa77 	bl	8003068 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	9202      	str	r2, [sp, #8]
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	2302      	movs	r3, #2
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	460a      	mov	r2, r1
 8004b8c:	4910      	ldr	r1, [pc, #64]	; (8004bd0 <xTimerCreateTimerTask+0x84>)
 8004b8e:	4811      	ldr	r0, [pc, #68]	; (8004bd4 <xTimerCreateTimerTask+0x88>)
 8004b90:	f7ff f818 	bl	8003bc4 <xTaskCreateStatic>
 8004b94:	4603      	mov	r3, r0
 8004b96:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <xTimerCreateTimerTask+0x8c>)
 8004b98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <xTimerCreateTimerTask+0x8c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	613b      	str	r3, [r7, #16]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000df8 	.word	0x20000df8
 8004bd0:	08007028 	.word	0x08007028
 8004bd4:	08004cf9 	.word	0x08004cf9
 8004bd8:	20000dfc 	.word	0x20000dfc

08004bdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	623b      	str	r3, [r7, #32]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <xTimerGenericCommand+0x98>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d02a      	beq.n	8004c68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b05      	cmp	r3, #5
 8004c22:	dc18      	bgt.n	8004c56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c24:	f7ff feb2 	bl	800498c <xTaskGetSchedulerState>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d109      	bne.n	8004c42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <xTimerGenericCommand+0x98>)
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f107 0110 	add.w	r1, r7, #16
 8004c36:	2300      	movs	r3, #0
 8004c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3a:	f7fe fbe1 	bl	8003400 <xQueueGenericSend>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24
 8004c40:	e012      	b.n	8004c68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <xTimerGenericCommand+0x98>)
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f107 0110 	add.w	r1, r7, #16
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f7fe fbd7 	bl	8003400 <xQueueGenericSend>
 8004c52:	6278      	str	r0, [r7, #36]	; 0x24
 8004c54:	e008      	b.n	8004c68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <xTimerGenericCommand+0x98>)
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	f107 0110 	add.w	r1, r7, #16
 8004c5e:	2300      	movs	r3, #0
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	f7fe fccb 	bl	80035fc <xQueueGenericSendFromISR>
 8004c66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3728      	adds	r7, #40	; 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000df8 	.word	0x20000df8

08004c78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <prvProcessExpiredTimer+0x7c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fa89 	bl	80031a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d122      	bne.n	8004ce4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	18d1      	adds	r1, r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	6978      	ldr	r0, [r7, #20]
 8004cac:	f000 f8c8 	bl	8004e40 <prvInsertTimerInActiveList>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	6978      	ldr	r0, [r7, #20]
 8004cc2:	f7ff ff8b 	bl	8004bdc <xTimerGenericCommand>
 8004cc6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	60fb      	str	r3, [r7, #12]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	6978      	ldr	r0, [r7, #20]
 8004cea:	4798      	blx	r3
}
 8004cec:	bf00      	nop
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000df0 	.word	0x20000df0

08004cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d00:	f107 0308 	add.w	r3, r7, #8
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 f857 	bl	8004db8 <prvGetNextExpireTime>
 8004d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f803 	bl	8004d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d16:	f000 f8d5 	bl	8004ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d1a:	e7f1      	b.n	8004d00 <prvTimerTask+0x8>

08004d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d26:	f7ff fa4b 	bl	80041c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f866 	bl	8004e00 <prvSampleTimeNow>
 8004d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d130      	bne.n	8004d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <prvProcessTimerOrBlockTask+0x3c>
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d806      	bhi.n	8004d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d4a:	f7ff fa47 	bl	80041dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff ff91 	bl	8004c78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d56:	e024      	b.n	8004da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d5e:	4b13      	ldr	r3, [pc, #76]	; (8004dac <prvProcessTimerOrBlockTask+0x90>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d70:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <prvProcessTimerOrBlockTask+0x94>)
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f7fe feed 	bl	8003b5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d82:	f7ff fa2b 	bl	80041dc <xTaskResumeAll>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <prvProcessTimerOrBlockTask+0x98>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	f3bf 8f6f 	isb	sy
}
 8004d9c:	e001      	b.n	8004da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d9e:	f7ff fa1d 	bl	80041dc <xTaskResumeAll>
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000df4 	.word	0x20000df4
 8004db0:	20000df8 	.word	0x20000df8
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <prvGetNextExpireTime+0x44>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d105      	bne.n	8004dea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dde:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <prvGetNextExpireTime+0x44>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e001      	b.n	8004dee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dee:	68fb      	ldr	r3, [r7, #12]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000df0 	.word	0x20000df0

08004e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e08:	f7ff fa86 	bl	8004318 <xTaskGetTickCount>
 8004e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <prvSampleTimeNow+0x3c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d205      	bcs.n	8004e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e18:	f000 f908 	bl	800502c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e002      	b.n	8004e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e2a:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <prvSampleTimeNow+0x3c>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e30:	68fb      	ldr	r3, [r7, #12]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000e00 	.word	0x20000e00

08004e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d812      	bhi.n	8004e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	1ad2      	subs	r2, r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e74:	2301      	movs	r3, #1
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e01b      	b.n	8004eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <prvInsertTimerInActiveList+0x7c>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3304      	adds	r3, #4
 8004e82:	4619      	mov	r1, r3
 8004e84:	4610      	mov	r0, r2
 8004e86:	f7fe f957 	bl	8003138 <vListInsert>
 8004e8a:	e012      	b.n	8004eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d206      	bcs.n	8004ea2 <prvInsertTimerInActiveList+0x62>
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d302      	bcc.n	8004ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e007      	b.n	8004eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <prvInsertTimerInActiveList+0x80>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f7fe f943 	bl	8003138 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004eb2:	697b      	ldr	r3, [r7, #20]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000df4 	.word	0x20000df4
 8004ec0:	20000df0 	.word	0x20000df0

08004ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eca:	e09d      	b.n	8005008 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	da18      	bge.n	8004f04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	61fb      	str	r3, [r7, #28]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004efa:	6850      	ldr	r0, [r2, #4]
 8004efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004efe:	6892      	ldr	r2, [r2, #8]
 8004f00:	4611      	mov	r1, r2
 8004f02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	db7d      	blt.n	8005006 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	3304      	adds	r3, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe f944 	bl	80031a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f20:	463b      	mov	r3, r7
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff ff6c 	bl	8004e00 <prvSampleTimeNow>
 8004f28:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b09      	cmp	r3, #9
 8004f2e:	d86b      	bhi.n	8005008 <prvProcessReceivedCommands+0x144>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <prvProcessReceivedCommands+0x74>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f61 	.word	0x08004f61
 8004f3c:	08004f61 	.word	0x08004f61
 8004f40:	08004f61 	.word	0x08004f61
 8004f44:	08005009 	.word	0x08005009
 8004f48:	08004fbd 	.word	0x08004fbd
 8004f4c:	08004ff5 	.word	0x08004ff5
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f61 	.word	0x08004f61
 8004f58:	08005009 	.word	0x08005009
 8004f5c:	08004fbd 	.word	0x08004fbd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	18d1      	adds	r1, r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f6e:	f7ff ff67 	bl	8004e40 <prvInsertTimerInActiveList>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d047      	beq.n	8005008 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f7e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d13f      	bne.n	8005008 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	441a      	add	r2, r3
 8004f90:	2300      	movs	r3, #0
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2300      	movs	r3, #0
 8004f96:	2100      	movs	r1, #0
 8004f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9a:	f7ff fe1f 	bl	8004bdc <xTimerGenericCommand>
 8004f9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d130      	bne.n	8005008 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	61bb      	str	r3, [r7, #24]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10a      	bne.n	8004fe0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	617b      	str	r3, [r7, #20]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	18d1      	adds	r1, r2, r3
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fee:	f7ff ff27 	bl	8004e40 <prvInsertTimerInActiveList>
					break;
 8004ff2:	e009      	b.n	8005008 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005000:	f000 fb68 	bl	80056d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005004:	e000      	b.n	8005008 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005006:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005008:	4b07      	ldr	r3, [pc, #28]	; (8005028 <prvProcessReceivedCommands+0x164>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	1d39      	adds	r1, r7, #4
 800500e:	2200      	movs	r2, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe fb8b 	bl	800372c <xQueueReceive>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	f47f af57 	bne.w	8004ecc <prvProcessReceivedCommands+0x8>
	}
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	3730      	adds	r7, #48	; 0x30
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000df8 	.word	0x20000df8

0800502c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005032:	e045      	b.n	80050c0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005034:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <prvSwitchTimerLists+0xbc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800503e:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <prvSwitchTimerLists+0xbc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3304      	adds	r3, #4
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe f8ab 	bl	80031a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d12e      	bne.n	80050c0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4413      	add	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d90e      	bls.n	8005092 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005080:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <prvSwitchTimerLists+0xbc>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7fe f854 	bl	8003138 <vListInsert>
 8005090:	e016      	b.n	80050c0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005092:	2300      	movs	r3, #0
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	2100      	movs	r1, #0
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff fd9d 	bl	8004bdc <xTimerGenericCommand>
 80050a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	603b      	str	r3, [r7, #0]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050c0:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <prvSwitchTimerLists+0xbc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1b4      	bne.n	8005034 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <prvSwitchTimerLists+0xbc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <prvSwitchTimerLists+0xc0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <prvSwitchTimerLists+0xbc>)
 80050d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050d8:	4a04      	ldr	r2, [pc, #16]	; (80050ec <prvSwitchTimerLists+0xc0>)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	6013      	str	r3, [r2, #0]
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000df0 	.word	0x20000df0
 80050ec:	20000df4 	.word	0x20000df4

080050f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050f6:	f000 f929 	bl	800534c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050fa:	4b15      	ldr	r3, [pc, #84]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d120      	bne.n	8005144 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005102:	4814      	ldr	r0, [pc, #80]	; (8005154 <prvCheckForValidListAndQueue+0x64>)
 8005104:	f7fd ffca 	bl	800309c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005108:	4813      	ldr	r0, [pc, #76]	; (8005158 <prvCheckForValidListAndQueue+0x68>)
 800510a:	f7fd ffc7 	bl	800309c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <prvCheckForValidListAndQueue+0x6c>)
 8005110:	4a10      	ldr	r2, [pc, #64]	; (8005154 <prvCheckForValidListAndQueue+0x64>)
 8005112:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <prvCheckForValidListAndQueue+0x70>)
 8005116:	4a10      	ldr	r2, [pc, #64]	; (8005158 <prvCheckForValidListAndQueue+0x68>)
 8005118:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800511a:	2300      	movs	r3, #0
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <prvCheckForValidListAndQueue+0x74>)
 8005120:	4a11      	ldr	r2, [pc, #68]	; (8005168 <prvCheckForValidListAndQueue+0x78>)
 8005122:	2110      	movs	r1, #16
 8005124:	200a      	movs	r0, #10
 8005126:	f7fe f8d1 	bl	80032cc <xQueueGenericCreateStatic>
 800512a:	4603      	mov	r3, r0
 800512c:	4a08      	ldr	r2, [pc, #32]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 800512e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <prvCheckForValidListAndQueue+0x60>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	490b      	ldr	r1, [pc, #44]	; (800516c <prvCheckForValidListAndQueue+0x7c>)
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fce4 	bl	8003b0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005144:	f000 f932 	bl	80053ac <vPortExitCritical>
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000df8 	.word	0x20000df8
 8005154:	20000dc8 	.word	0x20000dc8
 8005158:	20000ddc 	.word	0x20000ddc
 800515c:	20000df0 	.word	0x20000df0
 8005160:	20000df4 	.word	0x20000df4
 8005164:	20000ea4 	.word	0x20000ea4
 8005168:	20000e04 	.word	0x20000e04
 800516c:	08007030 	.word	0x08007030

08005170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3b04      	subs	r3, #4
 8005180:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3b04      	subs	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3b04      	subs	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <pxPortInitialiseStack+0x54>)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	3b14      	subs	r3, #20
 80051aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b20      	subs	r3, #32
 80051b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr
 80051c4:	080051c9 	.word	0x080051c9

080051c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <prvTaskExitError+0x54>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d00a      	beq.n	80051f2 <prvTaskExitError+0x2a>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <prvTaskExitError+0x28>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	60bb      	str	r3, [r7, #8]
}
 8005204:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005206:	bf00      	nop
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0fc      	beq.n	8005208 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000010 	.word	0x20000010

08005220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <pxCurrentTCBConst2>)
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	6808      	ldr	r0, [r1, #0]
 8005226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800522a:	f380 8809 	msr	PSP, r0
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8811 	msr	BASEPRI, r0
 800523a:	f04e 0e0d 	orr.w	lr, lr, #13
 800523e:	4770      	bx	lr

08005240 <pxCurrentTCBConst2>:
 8005240:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005248:	4806      	ldr	r0, [pc, #24]	; (8005264 <prvPortStartFirstTask+0x1c>)
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	6800      	ldr	r0, [r0, #0]
 800524e:	f380 8808 	msr	MSP, r0
 8005252:	b662      	cpsie	i
 8005254:	b661      	cpsie	f
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	df00      	svc	0
 8005260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005262:	bf00      	nop
 8005264:	e000ed08 	.word	0xe000ed08

08005268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800526e:	4b32      	ldr	r3, [pc, #200]	; (8005338 <xPortStartScheduler+0xd0>)
 8005270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	22ff      	movs	r2, #255	; 0xff
 800527e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b2a      	ldr	r3, [pc, #168]	; (800533c <xPortStartScheduler+0xd4>)
 8005294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005296:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <xPortStartScheduler+0xd8>)
 8005298:	2207      	movs	r2, #7
 800529a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800529c:	e009      	b.n	80052b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800529e:	4b28      	ldr	r3, [pc, #160]	; (8005340 <xPortStartScheduler+0xd8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	4a26      	ldr	r2, [pc, #152]	; (8005340 <xPortStartScheduler+0xd8>)
 80052a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d0ef      	beq.n	800529e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052be:	4b20      	ldr	r3, [pc, #128]	; (8005340 <xPortStartScheduler+0xd8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f1c3 0307 	rsb	r3, r3, #7
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d00a      	beq.n	80052e0 <xPortStartScheduler+0x78>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	60bb      	str	r3, [r7, #8]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052e0:	4b17      	ldr	r3, [pc, #92]	; (8005340 <xPortStartScheduler+0xd8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	4a16      	ldr	r2, [pc, #88]	; (8005340 <xPortStartScheduler+0xd8>)
 80052e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <xPortStartScheduler+0xd8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <xPortStartScheduler+0xd8>)
 80052f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <xPortStartScheduler+0xdc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a10      	ldr	r2, [pc, #64]	; (8005344 <xPortStartScheduler+0xdc>)
 8005304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800530a:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <xPortStartScheduler+0xdc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <xPortStartScheduler+0xdc>)
 8005310:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005314:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005316:	f000 f8b9 	bl	800548c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <xPortStartScheduler+0xe0>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005320:	f7ff ff92 	bl	8005248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005324:	f7ff f8c4 	bl	80044b0 <vTaskSwitchContext>
	prvTaskExitError();
 8005328:	f7ff ff4e 	bl	80051c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	e000e400 	.word	0xe000e400
 800533c:	20000ef4 	.word	0x20000ef4
 8005340:	20000ef8 	.word	0x20000ef8
 8005344:	e000ed20 	.word	0xe000ed20
 8005348:	20000010 	.word	0x20000010

0800534c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	607b      	str	r3, [r7, #4]
}
 8005364:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <vPortEnterCritical+0x58>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3301      	adds	r3, #1
 800536c:	4a0d      	ldr	r2, [pc, #52]	; (80053a4 <vPortEnterCritical+0x58>)
 800536e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005370:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <vPortEnterCritical+0x58>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d10f      	bne.n	8005398 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <vPortEnterCritical+0x5c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <vPortEnterCritical+0x4c>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	603b      	str	r3, [r7, #0]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <vPortEnterCritical+0x4a>
	}
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000010 	.word	0x20000010
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053b2:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <vPortExitCritical+0x4c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <vPortExitCritical+0x24>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	607b      	str	r3, [r7, #4]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <vPortExitCritical+0x4c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <vPortExitCritical+0x4c>)
 80053d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053da:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <vPortExitCritical+0x4c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d105      	bne.n	80053ee <vPortExitCritical+0x42>
 80053e2:	2300      	movs	r3, #0
 80053e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f383 8811 	msr	BASEPRI, r3
}
 80053ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr
 80053f8:	20000010 	.word	0x20000010
 80053fc:	00000000 	.word	0x00000000

08005400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005400:	f3ef 8009 	mrs	r0, PSP
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <pxCurrentTCBConst>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005410:	6010      	str	r0, [r2, #0]
 8005412:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005416:	f04f 0050 	mov.w	r0, #80	; 0x50
 800541a:	f380 8811 	msr	BASEPRI, r0
 800541e:	f7ff f847 	bl	80044b0 <vTaskSwitchContext>
 8005422:	f04f 0000 	mov.w	r0, #0
 8005426:	f380 8811 	msr	BASEPRI, r0
 800542a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800542e:	6819      	ldr	r1, [r3, #0]
 8005430:	6808      	ldr	r0, [r1, #0]
 8005432:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005436:	f380 8809 	msr	PSP, r0
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	4770      	bx	lr

08005440 <pxCurrentTCBConst>:
 8005440:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop

08005448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	607b      	str	r3, [r7, #4]
}
 8005460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005462:	f7fe ff67 	bl	8004334 <xTaskIncrementTick>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <SysTick_Handler+0x40>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	2300      	movs	r3, #0
 8005476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f383 8811 	msr	BASEPRI, r3
}
 800547e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <vPortSetupTimerInterrupt+0x30>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <vPortSetupTimerInterrupt+0x34>)
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800549c:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <vPortSetupTimerInterrupt+0x38>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <vPortSetupTimerInterrupt+0x3c>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	099b      	lsrs	r3, r3, #6
 80054a8:	4a08      	ldr	r2, [pc, #32]	; (80054cc <vPortSetupTimerInterrupt+0x40>)
 80054aa:	3b01      	subs	r3, #1
 80054ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ae:	4b03      	ldr	r3, [pc, #12]	; (80054bc <vPortSetupTimerInterrupt+0x30>)
 80054b0:	2207      	movs	r2, #7
 80054b2:	601a      	str	r2, [r3, #0]
}
 80054b4:	bf00      	nop
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr
 80054bc:	e000e010 	.word	0xe000e010
 80054c0:	e000e018 	.word	0xe000e018
 80054c4:	20000004 	.word	0x20000004
 80054c8:	10624dd3 	.word	0x10624dd3
 80054cc:	e000e014 	.word	0xe000e014

080054d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054d6:	f3ef 8305 	mrs	r3, IPSR
 80054da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b0f      	cmp	r3, #15
 80054e0:	d914      	bls.n	800550c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054e2:	4a16      	ldr	r2, [pc, #88]	; (800553c <vPortValidateInterruptPriority+0x6c>)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <vPortValidateInterruptPriority+0x70>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	7afa      	ldrb	r2, [r7, #11]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d20a      	bcs.n	800550c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	607b      	str	r3, [r7, #4]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <vPortValidateInterruptPriority+0x74>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <vPortValidateInterruptPriority+0x78>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d90a      	bls.n	8005532 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	603b      	str	r3, [r7, #0]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <vPortValidateInterruptPriority+0x60>
	}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	e000e3f0 	.word	0xe000e3f0
 8005540:	20000ef4 	.word	0x20000ef4
 8005544:	e000ed0c 	.word	0xe000ed0c
 8005548:	20000ef8 	.word	0x20000ef8

0800554c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005558:	f7fe fe32 	bl	80041c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800555c:	4b58      	ldr	r3, [pc, #352]	; (80056c0 <pvPortMalloc+0x174>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005564:	f000 f910 	bl	8005788 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005568:	4b56      	ldr	r3, [pc, #344]	; (80056c4 <pvPortMalloc+0x178>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4013      	ands	r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	f040 808e 	bne.w	8005692 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01d      	beq.n	80055b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800557c:	2208      	movs	r2, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b00      	cmp	r3, #0
 800558c:	d014      	beq.n	80055b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f023 0307 	bic.w	r3, r3, #7
 8005594:	3308      	adds	r3, #8
 8005596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <pvPortMalloc+0x6c>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	617b      	str	r3, [r7, #20]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d069      	beq.n	8005692 <pvPortMalloc+0x146>
 80055be:	4b42      	ldr	r3, [pc, #264]	; (80056c8 <pvPortMalloc+0x17c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d864      	bhi.n	8005692 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055c8:	4b40      	ldr	r3, [pc, #256]	; (80056cc <pvPortMalloc+0x180>)
 80055ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055cc:	4b3f      	ldr	r3, [pc, #252]	; (80056cc <pvPortMalloc+0x180>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055d2:	e004      	b.n	80055de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d903      	bls.n	80055f0 <pvPortMalloc+0xa4>
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f1      	bne.n	80055d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055f0:	4b33      	ldr	r3, [pc, #204]	; (80056c0 <pvPortMalloc+0x174>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d04b      	beq.n	8005692 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2208      	movs	r2, #8
 8005600:	4413      	add	r3, r2
 8005602:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	1ad2      	subs	r2, r2, r3
 8005614:	2308      	movs	r3, #8
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	429a      	cmp	r2, r3
 800561a:	d91f      	bls.n	800565c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800561c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <pvPortMalloc+0xf8>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	613b      	str	r3, [r7, #16]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005656:	69b8      	ldr	r0, [r7, #24]
 8005658:	f000 f8f8 	bl	800584c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800565c:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <pvPortMalloc+0x17c>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <pvPortMalloc+0x17c>)
 8005668:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800566a:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <pvPortMalloc+0x17c>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <pvPortMalloc+0x184>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d203      	bcs.n	800567e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005676:	4b14      	ldr	r3, [pc, #80]	; (80056c8 <pvPortMalloc+0x17c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <pvPortMalloc+0x184>)
 800567c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <pvPortMalloc+0x178>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	431a      	orrs	r2, r3
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005692:	f7fe fda3 	bl	80041dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <pvPortMalloc+0x16a>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <pvPortMalloc+0x168>
	return pvReturn;
 80056b6:	69fb      	ldr	r3, [r7, #28]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3728      	adds	r7, #40	; 0x28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20001b04 	.word	0x20001b04
 80056c4:	20001b10 	.word	0x20001b10
 80056c8:	20001b08 	.word	0x20001b08
 80056cc:	20001afc 	.word	0x20001afc
 80056d0:	20001b0c 	.word	0x20001b0c

080056d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d048      	beq.n	8005778 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056e6:	2308      	movs	r3, #8
 80056e8:	425b      	negs	r3, r3
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4413      	add	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	4b21      	ldr	r3, [pc, #132]	; (8005780 <vPortFree+0xac>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <vPortFree+0x44>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60fb      	str	r3, [r7, #12]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <vPortFree+0x62>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	60bb      	str	r3, [r7, #8]
}
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <vPortFree+0xac>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d019      	beq.n	8005778 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d115      	bne.n	8005778 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <vPortFree+0xac>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	43db      	mvns	r3, r3
 8005756:	401a      	ands	r2, r3
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800575c:	f7fe fd30 	bl	80041c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	4b07      	ldr	r3, [pc, #28]	; (8005784 <vPortFree+0xb0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4413      	add	r3, r2
 800576a:	4a06      	ldr	r2, [pc, #24]	; (8005784 <vPortFree+0xb0>)
 800576c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800576e:	6938      	ldr	r0, [r7, #16]
 8005770:	f000 f86c 	bl	800584c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005774:	f7fe fd32 	bl	80041dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005778:	bf00      	nop
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20001b10 	.word	0x20001b10
 8005784:	20001b08 	.word	0x20001b08

08005788 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800578e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005792:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005794:	4b27      	ldr	r3, [pc, #156]	; (8005834 <prvHeapInit+0xac>)
 8005796:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00c      	beq.n	80057bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3307      	adds	r3, #7
 80057a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <prvHeapInit+0xac>)
 80057b8:	4413      	add	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057c0:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <prvHeapInit+0xb0>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057c6:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <prvHeapInit+0xb0>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4413      	add	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057d4:	2208      	movs	r2, #8
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0307 	bic.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a15      	ldr	r2, [pc, #84]	; (800583c <prvHeapInit+0xb4>)
 80057e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ea:	4b14      	ldr	r3, [pc, #80]	; (800583c <prvHeapInit+0xb4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2200      	movs	r2, #0
 80057f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057f2:	4b12      	ldr	r3, [pc, #72]	; (800583c <prvHeapInit+0xb4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	1ad2      	subs	r2, r2, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005808:	4b0c      	ldr	r3, [pc, #48]	; (800583c <prvHeapInit+0xb4>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <prvHeapInit+0xb8>)
 8005816:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4a09      	ldr	r2, [pc, #36]	; (8005844 <prvHeapInit+0xbc>)
 800581e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <prvHeapInit+0xc0>)
 8005822:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005826:	601a      	str	r2, [r3, #0]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000efc 	.word	0x20000efc
 8005838:	20001afc 	.word	0x20001afc
 800583c:	20001b04 	.word	0x20001b04
 8005840:	20001b0c 	.word	0x20001b0c
 8005844:	20001b08 	.word	0x20001b08
 8005848:	20001b10 	.word	0x20001b10

0800584c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005854:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <prvInsertBlockIntoFreeList+0xa8>)
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e002      	b.n	8005860 <prvInsertBlockIntoFreeList+0x14>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d8f7      	bhi.n	800585a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	4413      	add	r3, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d108      	bne.n	800588e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	441a      	add	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	441a      	add	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d118      	bne.n	80058d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <prvInsertBlockIntoFreeList+0xac>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d00d      	beq.n	80058ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	441a      	add	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e008      	b.n	80058dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <prvInsertBlockIntoFreeList+0xac>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e003      	b.n	80058dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d002      	beq.n	80058ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	20001afc 	.word	0x20001afc
 80058f8:	20001b04 	.word	0x20001b04

080058fc <atoi>:
 80058fc:	220a      	movs	r2, #10
 80058fe:	2100      	movs	r1, #0
 8005900:	f000 b940 	b.w	8005b84 <strtol>

08005904 <__errno>:
 8005904:	4b01      	ldr	r3, [pc, #4]	; (800590c <__errno+0x8>)
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20000014 	.word	0x20000014

08005910 <__libc_init_array>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	2600      	movs	r6, #0
 8005914:	4d0c      	ldr	r5, [pc, #48]	; (8005948 <__libc_init_array+0x38>)
 8005916:	4c0d      	ldr	r4, [pc, #52]	; (800594c <__libc_init_array+0x3c>)
 8005918:	1b64      	subs	r4, r4, r5
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	42a6      	cmp	r6, r4
 800591e:	d109      	bne.n	8005934 <__libc_init_array+0x24>
 8005920:	f001 fae8 	bl	8006ef4 <_init>
 8005924:	2600      	movs	r6, #0
 8005926:	4d0a      	ldr	r5, [pc, #40]	; (8005950 <__libc_init_array+0x40>)
 8005928:	4c0a      	ldr	r4, [pc, #40]	; (8005954 <__libc_init_array+0x44>)
 800592a:	1b64      	subs	r4, r4, r5
 800592c:	10a4      	asrs	r4, r4, #2
 800592e:	42a6      	cmp	r6, r4
 8005930:	d105      	bne.n	800593e <__libc_init_array+0x2e>
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	f855 3b04 	ldr.w	r3, [r5], #4
 8005938:	4798      	blx	r3
 800593a:	3601      	adds	r6, #1
 800593c:	e7ee      	b.n	800591c <__libc_init_array+0xc>
 800593e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005942:	4798      	blx	r3
 8005944:	3601      	adds	r6, #1
 8005946:	e7f2      	b.n	800592e <__libc_init_array+0x1e>
 8005948:	08007304 	.word	0x08007304
 800594c:	08007304 	.word	0x08007304
 8005950:	08007304 	.word	0x08007304
 8005954:	08007308 	.word	0x08007308

08005958 <memcpy>:
 8005958:	440a      	add	r2, r1
 800595a:	4291      	cmp	r1, r2
 800595c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005960:	d100      	bne.n	8005964 <memcpy+0xc>
 8005962:	4770      	bx	lr
 8005964:	b510      	push	{r4, lr}
 8005966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800596a:	4291      	cmp	r1, r2
 800596c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005970:	d1f9      	bne.n	8005966 <memcpy+0xe>
 8005972:	bd10      	pop	{r4, pc}

08005974 <memset>:
 8005974:	4603      	mov	r3, r0
 8005976:	4402      	add	r2, r0
 8005978:	4293      	cmp	r3, r2
 800597a:	d100      	bne.n	800597e <memset+0xa>
 800597c:	4770      	bx	lr
 800597e:	f803 1b01 	strb.w	r1, [r3], #1
 8005982:	e7f9      	b.n	8005978 <memset+0x4>

08005984 <siprintf>:
 8005984:	b40e      	push	{r1, r2, r3}
 8005986:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800598a:	b500      	push	{lr}
 800598c:	b09c      	sub	sp, #112	; 0x70
 800598e:	ab1d      	add	r3, sp, #116	; 0x74
 8005990:	9002      	str	r0, [sp, #8]
 8005992:	9006      	str	r0, [sp, #24]
 8005994:	9107      	str	r1, [sp, #28]
 8005996:	9104      	str	r1, [sp, #16]
 8005998:	4808      	ldr	r0, [pc, #32]	; (80059bc <siprintf+0x38>)
 800599a:	4909      	ldr	r1, [pc, #36]	; (80059c0 <siprintf+0x3c>)
 800599c:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a0:	9105      	str	r1, [sp, #20]
 80059a2:	6800      	ldr	r0, [r0, #0]
 80059a4:	a902      	add	r1, sp, #8
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f000 fa66 	bl	8005e78 <_svfiprintf_r>
 80059ac:	2200      	movs	r2, #0
 80059ae:	9b02      	ldr	r3, [sp, #8]
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	b01c      	add	sp, #112	; 0x70
 80059b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b8:	b003      	add	sp, #12
 80059ba:	4770      	bx	lr
 80059bc:	20000014 	.word	0x20000014
 80059c0:	ffff0208 	.word	0xffff0208

080059c4 <strcpy>:
 80059c4:	4603      	mov	r3, r0
 80059c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ca:	f803 2b01 	strb.w	r2, [r3], #1
 80059ce:	2a00      	cmp	r2, #0
 80059d0:	d1f9      	bne.n	80059c6 <strcpy+0x2>
 80059d2:	4770      	bx	lr

080059d4 <strtok>:
 80059d4:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <strtok+0x5c>)
 80059d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059da:	681f      	ldr	r7, [r3, #0]
 80059dc:	4605      	mov	r5, r0
 80059de:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80059e0:	460e      	mov	r6, r1
 80059e2:	b9ec      	cbnz	r4, 8005a20 <strtok+0x4c>
 80059e4:	2050      	movs	r0, #80	; 0x50
 80059e6:	f000 f907 	bl	8005bf8 <malloc>
 80059ea:	4602      	mov	r2, r0
 80059ec:	65b8      	str	r0, [r7, #88]	; 0x58
 80059ee:	b920      	cbnz	r0, 80059fa <strtok+0x26>
 80059f0:	2157      	movs	r1, #87	; 0x57
 80059f2:	4b10      	ldr	r3, [pc, #64]	; (8005a34 <strtok+0x60>)
 80059f4:	4810      	ldr	r0, [pc, #64]	; (8005a38 <strtok+0x64>)
 80059f6:	f000 f8cf 	bl	8005b98 <__assert_func>
 80059fa:	e9c0 4400 	strd	r4, r4, [r0]
 80059fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005a02:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005a06:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005a0a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005a0e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005a12:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005a16:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005a1a:	6184      	str	r4, [r0, #24]
 8005a1c:	7704      	strb	r4, [r0, #28]
 8005a1e:	6244      	str	r4, [r0, #36]	; 0x24
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a26:	2301      	movs	r3, #1
 8005a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2c:	f000 b806 	b.w	8005a3c <__strtok_r>
 8005a30:	20000014 	.word	0x20000014
 8005a34:	080070c0 	.word	0x080070c0
 8005a38:	080070d7 	.word	0x080070d7

08005a3c <__strtok_r>:
 8005a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a3e:	b908      	cbnz	r0, 8005a44 <__strtok_r+0x8>
 8005a40:	6810      	ldr	r0, [r2, #0]
 8005a42:	b188      	cbz	r0, 8005a68 <__strtok_r+0x2c>
 8005a44:	4604      	mov	r4, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a52:	b91e      	cbnz	r6, 8005a5c <__strtok_r+0x20>
 8005a54:	b965      	cbnz	r5, 8005a70 <__strtok_r+0x34>
 8005a56:	4628      	mov	r0, r5
 8005a58:	6015      	str	r5, [r2, #0]
 8005a5a:	e005      	b.n	8005a68 <__strtok_r+0x2c>
 8005a5c:	42b5      	cmp	r5, r6
 8005a5e:	d1f6      	bne.n	8005a4e <__strtok_r+0x12>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f0      	bne.n	8005a46 <__strtok_r+0xa>
 8005a64:	6014      	str	r4, [r2, #0]
 8005a66:	7003      	strb	r3, [r0, #0]
 8005a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a6a:	461c      	mov	r4, r3
 8005a6c:	e00c      	b.n	8005a88 <__strtok_r+0x4c>
 8005a6e:	b915      	cbnz	r5, 8005a76 <__strtok_r+0x3a>
 8005a70:	460e      	mov	r6, r1
 8005a72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a76:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005a7a:	42ab      	cmp	r3, r5
 8005a7c:	d1f7      	bne.n	8005a6e <__strtok_r+0x32>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f3      	beq.n	8005a6a <__strtok_r+0x2e>
 8005a82:	2300      	movs	r3, #0
 8005a84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005a88:	6014      	str	r4, [r2, #0]
 8005a8a:	e7ed      	b.n	8005a68 <__strtok_r+0x2c>

08005a8c <_strtol_l.constprop.0>:
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a92:	4680      	mov	r8, r0
 8005a94:	d001      	beq.n	8005a9a <_strtol_l.constprop.0+0xe>
 8005a96:	2b24      	cmp	r3, #36	; 0x24
 8005a98:	d906      	bls.n	8005aa8 <_strtol_l.constprop.0+0x1c>
 8005a9a:	f7ff ff33 	bl	8005904 <__errno>
 8005a9e:	2316      	movs	r3, #22
 8005aa0:	6003      	str	r3, [r0, #0]
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	4f35      	ldr	r7, [pc, #212]	; (8005b80 <_strtol_l.constprop.0+0xf4>)
 8005aac:	4628      	mov	r0, r5
 8005aae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ab2:	5de6      	ldrb	r6, [r4, r7]
 8005ab4:	f016 0608 	ands.w	r6, r6, #8
 8005ab8:	d1f8      	bne.n	8005aac <_strtol_l.constprop.0+0x20>
 8005aba:	2c2d      	cmp	r4, #45	; 0x2d
 8005abc:	d12f      	bne.n	8005b1e <_strtol_l.constprop.0+0x92>
 8005abe:	2601      	movs	r6, #1
 8005ac0:	782c      	ldrb	r4, [r5, #0]
 8005ac2:	1c85      	adds	r5, r0, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d057      	beq.n	8005b78 <_strtol_l.constprop.0+0xec>
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d109      	bne.n	8005ae0 <_strtol_l.constprop.0+0x54>
 8005acc:	2c30      	cmp	r4, #48	; 0x30
 8005ace:	d107      	bne.n	8005ae0 <_strtol_l.constprop.0+0x54>
 8005ad0:	7828      	ldrb	r0, [r5, #0]
 8005ad2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005ad6:	2858      	cmp	r0, #88	; 0x58
 8005ad8:	d149      	bne.n	8005b6e <_strtol_l.constprop.0+0xe2>
 8005ada:	2310      	movs	r3, #16
 8005adc:	786c      	ldrb	r4, [r5, #1]
 8005ade:	3502      	adds	r5, #2
 8005ae0:	2700      	movs	r7, #0
 8005ae2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005ae6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005aea:	fbbe f9f3 	udiv	r9, lr, r3
 8005aee:	4638      	mov	r0, r7
 8005af0:	fb03 ea19 	mls	sl, r3, r9, lr
 8005af4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005af8:	f1bc 0f09 	cmp.w	ip, #9
 8005afc:	d814      	bhi.n	8005b28 <_strtol_l.constprop.0+0x9c>
 8005afe:	4664      	mov	r4, ip
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	dd22      	ble.n	8005b4a <_strtol_l.constprop.0+0xbe>
 8005b04:	2f00      	cmp	r7, #0
 8005b06:	db1d      	blt.n	8005b44 <_strtol_l.constprop.0+0xb8>
 8005b08:	4581      	cmp	r9, r0
 8005b0a:	d31b      	bcc.n	8005b44 <_strtol_l.constprop.0+0xb8>
 8005b0c:	d101      	bne.n	8005b12 <_strtol_l.constprop.0+0x86>
 8005b0e:	45a2      	cmp	sl, r4
 8005b10:	db18      	blt.n	8005b44 <_strtol_l.constprop.0+0xb8>
 8005b12:	2701      	movs	r7, #1
 8005b14:	fb00 4003 	mla	r0, r0, r3, r4
 8005b18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b1c:	e7ea      	b.n	8005af4 <_strtol_l.constprop.0+0x68>
 8005b1e:	2c2b      	cmp	r4, #43	; 0x2b
 8005b20:	bf04      	itt	eq
 8005b22:	782c      	ldrbeq	r4, [r5, #0]
 8005b24:	1c85      	addeq	r5, r0, #2
 8005b26:	e7cd      	b.n	8005ac4 <_strtol_l.constprop.0+0x38>
 8005b28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005b2c:	f1bc 0f19 	cmp.w	ip, #25
 8005b30:	d801      	bhi.n	8005b36 <_strtol_l.constprop.0+0xaa>
 8005b32:	3c37      	subs	r4, #55	; 0x37
 8005b34:	e7e4      	b.n	8005b00 <_strtol_l.constprop.0+0x74>
 8005b36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005b3a:	f1bc 0f19 	cmp.w	ip, #25
 8005b3e:	d804      	bhi.n	8005b4a <_strtol_l.constprop.0+0xbe>
 8005b40:	3c57      	subs	r4, #87	; 0x57
 8005b42:	e7dd      	b.n	8005b00 <_strtol_l.constprop.0+0x74>
 8005b44:	f04f 37ff 	mov.w	r7, #4294967295
 8005b48:	e7e6      	b.n	8005b18 <_strtol_l.constprop.0+0x8c>
 8005b4a:	2f00      	cmp	r7, #0
 8005b4c:	da07      	bge.n	8005b5e <_strtol_l.constprop.0+0xd2>
 8005b4e:	2322      	movs	r3, #34	; 0x22
 8005b50:	4670      	mov	r0, lr
 8005b52:	f8c8 3000 	str.w	r3, [r8]
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	d0a4      	beq.n	8005aa4 <_strtol_l.constprop.0+0x18>
 8005b5a:	1e69      	subs	r1, r5, #1
 8005b5c:	e005      	b.n	8005b6a <_strtol_l.constprop.0+0xde>
 8005b5e:	b106      	cbz	r6, 8005b62 <_strtol_l.constprop.0+0xd6>
 8005b60:	4240      	negs	r0, r0
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	d09e      	beq.n	8005aa4 <_strtol_l.constprop.0+0x18>
 8005b66:	2f00      	cmp	r7, #0
 8005b68:	d1f7      	bne.n	8005b5a <_strtol_l.constprop.0+0xce>
 8005b6a:	6011      	str	r1, [r2, #0]
 8005b6c:	e79a      	b.n	8005aa4 <_strtol_l.constprop.0+0x18>
 8005b6e:	2430      	movs	r4, #48	; 0x30
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1b5      	bne.n	8005ae0 <_strtol_l.constprop.0+0x54>
 8005b74:	2308      	movs	r3, #8
 8005b76:	e7b3      	b.n	8005ae0 <_strtol_l.constprop.0+0x54>
 8005b78:	2c30      	cmp	r4, #48	; 0x30
 8005b7a:	d0a9      	beq.n	8005ad0 <_strtol_l.constprop.0+0x44>
 8005b7c:	230a      	movs	r3, #10
 8005b7e:	e7af      	b.n	8005ae0 <_strtol_l.constprop.0+0x54>
 8005b80:	08007171 	.word	0x08007171

08005b84 <strtol>:
 8005b84:	4613      	mov	r3, r2
 8005b86:	460a      	mov	r2, r1
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4802      	ldr	r0, [pc, #8]	; (8005b94 <strtol+0x10>)
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f7ff bf7d 	b.w	8005a8c <_strtol_l.constprop.0>
 8005b92:	bf00      	nop
 8005b94:	20000014 	.word	0x20000014

08005b98 <__assert_func>:
 8005b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <__assert_func+0x2c>)
 8005ba0:	4605      	mov	r5, r0
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68d8      	ldr	r0, [r3, #12]
 8005ba6:	b14c      	cbz	r4, 8005bbc <__assert_func+0x24>
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <__assert_func+0x30>)
 8005baa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005bae:	9100      	str	r1, [sp, #0]
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	4906      	ldr	r1, [pc, #24]	; (8005bcc <__assert_func+0x34>)
 8005bb4:	f000 f80e 	bl	8005bd4 <fiprintf>
 8005bb8:	f000 fe1c 	bl	80067f4 <abort>
 8005bbc:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <__assert_func+0x38>)
 8005bbe:	461c      	mov	r4, r3
 8005bc0:	e7f3      	b.n	8005baa <__assert_func+0x12>
 8005bc2:	bf00      	nop
 8005bc4:	20000014 	.word	0x20000014
 8005bc8:	08007134 	.word	0x08007134
 8005bcc:	08007141 	.word	0x08007141
 8005bd0:	0800716f 	.word	0x0800716f

08005bd4 <fiprintf>:
 8005bd4:	b40e      	push	{r1, r2, r3}
 8005bd6:	b503      	push	{r0, r1, lr}
 8005bd8:	4601      	mov	r1, r0
 8005bda:	ab03      	add	r3, sp, #12
 8005bdc:	4805      	ldr	r0, [pc, #20]	; (8005bf4 <fiprintf+0x20>)
 8005bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be2:	6800      	ldr	r0, [r0, #0]
 8005be4:	9301      	str	r3, [sp, #4]
 8005be6:	f000 fa6f 	bl	80060c8 <_vfiprintf_r>
 8005bea:	b002      	add	sp, #8
 8005bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bf0:	b003      	add	sp, #12
 8005bf2:	4770      	bx	lr
 8005bf4:	20000014 	.word	0x20000014

08005bf8 <malloc>:
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <malloc+0xc>)
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	f000 b86b 	b.w	8005cd8 <_malloc_r>
 8005c02:	bf00      	nop
 8005c04:	20000014 	.word	0x20000014

08005c08 <_free_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	2900      	cmp	r1, #0
 8005c0e:	d040      	beq.n	8005c92 <_free_r+0x8a>
 8005c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c14:	1f0c      	subs	r4, r1, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bfb8      	it	lt
 8005c1a:	18e4      	addlt	r4, r4, r3
 8005c1c:	f001 f836 	bl	8006c8c <__malloc_lock>
 8005c20:	4a1c      	ldr	r2, [pc, #112]	; (8005c94 <_free_r+0x8c>)
 8005c22:	6813      	ldr	r3, [r2, #0]
 8005c24:	b933      	cbnz	r3, 8005c34 <_free_r+0x2c>
 8005c26:	6063      	str	r3, [r4, #4]
 8005c28:	6014      	str	r4, [r2, #0]
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c30:	f001 b832 	b.w	8006c98 <__malloc_unlock>
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	d908      	bls.n	8005c4a <_free_r+0x42>
 8005c38:	6820      	ldr	r0, [r4, #0]
 8005c3a:	1821      	adds	r1, r4, r0
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	bf01      	itttt	eq
 8005c40:	6819      	ldreq	r1, [r3, #0]
 8005c42:	685b      	ldreq	r3, [r3, #4]
 8005c44:	1809      	addeq	r1, r1, r0
 8005c46:	6021      	streq	r1, [r4, #0]
 8005c48:	e7ed      	b.n	8005c26 <_free_r+0x1e>
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	b10b      	cbz	r3, 8005c54 <_free_r+0x4c>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d9fa      	bls.n	8005c4a <_free_r+0x42>
 8005c54:	6811      	ldr	r1, [r2, #0]
 8005c56:	1850      	adds	r0, r2, r1
 8005c58:	42a0      	cmp	r0, r4
 8005c5a:	d10b      	bne.n	8005c74 <_free_r+0x6c>
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	4401      	add	r1, r0
 8005c60:	1850      	adds	r0, r2, r1
 8005c62:	4283      	cmp	r3, r0
 8005c64:	6011      	str	r1, [r2, #0]
 8005c66:	d1e0      	bne.n	8005c2a <_free_r+0x22>
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4401      	add	r1, r0
 8005c6e:	6011      	str	r1, [r2, #0]
 8005c70:	6053      	str	r3, [r2, #4]
 8005c72:	e7da      	b.n	8005c2a <_free_r+0x22>
 8005c74:	d902      	bls.n	8005c7c <_free_r+0x74>
 8005c76:	230c      	movs	r3, #12
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	e7d6      	b.n	8005c2a <_free_r+0x22>
 8005c7c:	6820      	ldr	r0, [r4, #0]
 8005c7e:	1821      	adds	r1, r4, r0
 8005c80:	428b      	cmp	r3, r1
 8005c82:	bf01      	itttt	eq
 8005c84:	6819      	ldreq	r1, [r3, #0]
 8005c86:	685b      	ldreq	r3, [r3, #4]
 8005c88:	1809      	addeq	r1, r1, r0
 8005c8a:	6021      	streq	r1, [r4, #0]
 8005c8c:	6063      	str	r3, [r4, #4]
 8005c8e:	6054      	str	r4, [r2, #4]
 8005c90:	e7cb      	b.n	8005c2a <_free_r+0x22>
 8005c92:	bd38      	pop	{r3, r4, r5, pc}
 8005c94:	20001b14 	.word	0x20001b14

08005c98 <sbrk_aligned>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4e0e      	ldr	r6, [pc, #56]	; (8005cd4 <sbrk_aligned+0x3c>)
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	6831      	ldr	r1, [r6, #0]
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	b911      	cbnz	r1, 8005caa <sbrk_aligned+0x12>
 8005ca4:	f000 fcd6 	bl	8006654 <_sbrk_r>
 8005ca8:	6030      	str	r0, [r6, #0]
 8005caa:	4621      	mov	r1, r4
 8005cac:	4628      	mov	r0, r5
 8005cae:	f000 fcd1 	bl	8006654 <_sbrk_r>
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	d00a      	beq.n	8005ccc <sbrk_aligned+0x34>
 8005cb6:	1cc4      	adds	r4, r0, #3
 8005cb8:	f024 0403 	bic.w	r4, r4, #3
 8005cbc:	42a0      	cmp	r0, r4
 8005cbe:	d007      	beq.n	8005cd0 <sbrk_aligned+0x38>
 8005cc0:	1a21      	subs	r1, r4, r0
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 fcc6 	bl	8006654 <_sbrk_r>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d101      	bne.n	8005cd0 <sbrk_aligned+0x38>
 8005ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	20001b18 	.word	0x20001b18

08005cd8 <_malloc_r>:
 8005cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cdc:	1ccd      	adds	r5, r1, #3
 8005cde:	f025 0503 	bic.w	r5, r5, #3
 8005ce2:	3508      	adds	r5, #8
 8005ce4:	2d0c      	cmp	r5, #12
 8005ce6:	bf38      	it	cc
 8005ce8:	250c      	movcc	r5, #12
 8005cea:	2d00      	cmp	r5, #0
 8005cec:	4607      	mov	r7, r0
 8005cee:	db01      	blt.n	8005cf4 <_malloc_r+0x1c>
 8005cf0:	42a9      	cmp	r1, r5
 8005cf2:	d905      	bls.n	8005d00 <_malloc_r+0x28>
 8005cf4:	230c      	movs	r3, #12
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d00:	4e2e      	ldr	r6, [pc, #184]	; (8005dbc <_malloc_r+0xe4>)
 8005d02:	f000 ffc3 	bl	8006c8c <__malloc_lock>
 8005d06:	6833      	ldr	r3, [r6, #0]
 8005d08:	461c      	mov	r4, r3
 8005d0a:	bb34      	cbnz	r4, 8005d5a <_malloc_r+0x82>
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f7ff ffc2 	bl	8005c98 <sbrk_aligned>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	4604      	mov	r4, r0
 8005d18:	d14d      	bne.n	8005db6 <_malloc_r+0xde>
 8005d1a:	6834      	ldr	r4, [r6, #0]
 8005d1c:	4626      	mov	r6, r4
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	d140      	bne.n	8005da4 <_malloc_r+0xcc>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	4631      	mov	r1, r6
 8005d26:	4638      	mov	r0, r7
 8005d28:	eb04 0803 	add.w	r8, r4, r3
 8005d2c:	f000 fc92 	bl	8006654 <_sbrk_r>
 8005d30:	4580      	cmp	r8, r0
 8005d32:	d13a      	bne.n	8005daa <_malloc_r+0xd2>
 8005d34:	6821      	ldr	r1, [r4, #0]
 8005d36:	3503      	adds	r5, #3
 8005d38:	1a6d      	subs	r5, r5, r1
 8005d3a:	f025 0503 	bic.w	r5, r5, #3
 8005d3e:	3508      	adds	r5, #8
 8005d40:	2d0c      	cmp	r5, #12
 8005d42:	bf38      	it	cc
 8005d44:	250c      	movcc	r5, #12
 8005d46:	4638      	mov	r0, r7
 8005d48:	4629      	mov	r1, r5
 8005d4a:	f7ff ffa5 	bl	8005c98 <sbrk_aligned>
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d02b      	beq.n	8005daa <_malloc_r+0xd2>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	442b      	add	r3, r5
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	e00e      	b.n	8005d78 <_malloc_r+0xa0>
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	1b52      	subs	r2, r2, r5
 8005d5e:	d41e      	bmi.n	8005d9e <_malloc_r+0xc6>
 8005d60:	2a0b      	cmp	r2, #11
 8005d62:	d916      	bls.n	8005d92 <_malloc_r+0xba>
 8005d64:	1961      	adds	r1, r4, r5
 8005d66:	42a3      	cmp	r3, r4
 8005d68:	6025      	str	r5, [r4, #0]
 8005d6a:	bf18      	it	ne
 8005d6c:	6059      	strne	r1, [r3, #4]
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	bf08      	it	eq
 8005d72:	6031      	streq	r1, [r6, #0]
 8005d74:	5162      	str	r2, [r4, r5]
 8005d76:	604b      	str	r3, [r1, #4]
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f104 060b 	add.w	r6, r4, #11
 8005d7e:	f000 ff8b 	bl	8006c98 <__malloc_unlock>
 8005d82:	f026 0607 	bic.w	r6, r6, #7
 8005d86:	1d23      	adds	r3, r4, #4
 8005d88:	1af2      	subs	r2, r6, r3
 8005d8a:	d0b6      	beq.n	8005cfa <_malloc_r+0x22>
 8005d8c:	1b9b      	subs	r3, r3, r6
 8005d8e:	50a3      	str	r3, [r4, r2]
 8005d90:	e7b3      	b.n	8005cfa <_malloc_r+0x22>
 8005d92:	6862      	ldr	r2, [r4, #4]
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	bf0c      	ite	eq
 8005d98:	6032      	streq	r2, [r6, #0]
 8005d9a:	605a      	strne	r2, [r3, #4]
 8005d9c:	e7ec      	b.n	8005d78 <_malloc_r+0xa0>
 8005d9e:	4623      	mov	r3, r4
 8005da0:	6864      	ldr	r4, [r4, #4]
 8005da2:	e7b2      	b.n	8005d0a <_malloc_r+0x32>
 8005da4:	4634      	mov	r4, r6
 8005da6:	6876      	ldr	r6, [r6, #4]
 8005da8:	e7b9      	b.n	8005d1e <_malloc_r+0x46>
 8005daa:	230c      	movs	r3, #12
 8005dac:	4638      	mov	r0, r7
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	f000 ff72 	bl	8006c98 <__malloc_unlock>
 8005db4:	e7a1      	b.n	8005cfa <_malloc_r+0x22>
 8005db6:	6025      	str	r5, [r4, #0]
 8005db8:	e7de      	b.n	8005d78 <_malloc_r+0xa0>
 8005dba:	bf00      	nop
 8005dbc:	20001b14 	.word	0x20001b14

08005dc0 <__ssputs_r>:
 8005dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	688e      	ldr	r6, [r1, #8]
 8005dc6:	4682      	mov	sl, r0
 8005dc8:	429e      	cmp	r6, r3
 8005dca:	460c      	mov	r4, r1
 8005dcc:	4690      	mov	r8, r2
 8005dce:	461f      	mov	r7, r3
 8005dd0:	d838      	bhi.n	8005e44 <__ssputs_r+0x84>
 8005dd2:	898a      	ldrh	r2, [r1, #12]
 8005dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005dd8:	d032      	beq.n	8005e40 <__ssputs_r+0x80>
 8005dda:	6825      	ldr	r5, [r4, #0]
 8005ddc:	6909      	ldr	r1, [r1, #16]
 8005dde:	3301      	adds	r3, #1
 8005de0:	eba5 0901 	sub.w	r9, r5, r1
 8005de4:	6965      	ldr	r5, [r4, #20]
 8005de6:	444b      	add	r3, r9
 8005de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005df0:	106d      	asrs	r5, r5, #1
 8005df2:	429d      	cmp	r5, r3
 8005df4:	bf38      	it	cc
 8005df6:	461d      	movcc	r5, r3
 8005df8:	0553      	lsls	r3, r2, #21
 8005dfa:	d531      	bpl.n	8005e60 <__ssputs_r+0xa0>
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f7ff ff6b 	bl	8005cd8 <_malloc_r>
 8005e02:	4606      	mov	r6, r0
 8005e04:	b950      	cbnz	r0, 8005e1c <__ssputs_r+0x5c>
 8005e06:	230c      	movs	r3, #12
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	f8ca 3000 	str.w	r3, [sl]
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	6921      	ldr	r1, [r4, #16]
 8005e20:	f7ff fd9a 	bl	8005958 <memcpy>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	6126      	str	r6, [r4, #16]
 8005e32:	444e      	add	r6, r9
 8005e34:	6026      	str	r6, [r4, #0]
 8005e36:	463e      	mov	r6, r7
 8005e38:	6165      	str	r5, [r4, #20]
 8005e3a:	eba5 0509 	sub.w	r5, r5, r9
 8005e3e:	60a5      	str	r5, [r4, #8]
 8005e40:	42be      	cmp	r6, r7
 8005e42:	d900      	bls.n	8005e46 <__ssputs_r+0x86>
 8005e44:	463e      	mov	r6, r7
 8005e46:	4632      	mov	r2, r6
 8005e48:	4641      	mov	r1, r8
 8005e4a:	6820      	ldr	r0, [r4, #0]
 8005e4c:	f000 ff04 	bl	8006c58 <memmove>
 8005e50:	68a3      	ldr	r3, [r4, #8]
 8005e52:	2000      	movs	r0, #0
 8005e54:	1b9b      	subs	r3, r3, r6
 8005e56:	60a3      	str	r3, [r4, #8]
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	4433      	add	r3, r6
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	e7db      	b.n	8005e18 <__ssputs_r+0x58>
 8005e60:	462a      	mov	r2, r5
 8005e62:	f000 ff1f 	bl	8006ca4 <_realloc_r>
 8005e66:	4606      	mov	r6, r0
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d1e1      	bne.n	8005e30 <__ssputs_r+0x70>
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	6921      	ldr	r1, [r4, #16]
 8005e70:	f7ff feca 	bl	8005c08 <_free_r>
 8005e74:	e7c7      	b.n	8005e06 <__ssputs_r+0x46>
	...

08005e78 <_svfiprintf_r>:
 8005e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	4698      	mov	r8, r3
 8005e7e:	898b      	ldrh	r3, [r1, #12]
 8005e80:	4607      	mov	r7, r0
 8005e82:	061b      	lsls	r3, r3, #24
 8005e84:	460d      	mov	r5, r1
 8005e86:	4614      	mov	r4, r2
 8005e88:	b09d      	sub	sp, #116	; 0x74
 8005e8a:	d50e      	bpl.n	8005eaa <_svfiprintf_r+0x32>
 8005e8c:	690b      	ldr	r3, [r1, #16]
 8005e8e:	b963      	cbnz	r3, 8005eaa <_svfiprintf_r+0x32>
 8005e90:	2140      	movs	r1, #64	; 0x40
 8005e92:	f7ff ff21 	bl	8005cd8 <_malloc_r>
 8005e96:	6028      	str	r0, [r5, #0]
 8005e98:	6128      	str	r0, [r5, #16]
 8005e9a:	b920      	cbnz	r0, 8005ea6 <_svfiprintf_r+0x2e>
 8005e9c:	230c      	movs	r3, #12
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	e0d1      	b.n	800604a <_svfiprintf_r+0x1d2>
 8005ea6:	2340      	movs	r3, #64	; 0x40
 8005ea8:	616b      	str	r3, [r5, #20]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	9309      	str	r3, [sp, #36]	; 0x24
 8005eae:	2320      	movs	r3, #32
 8005eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eb4:	2330      	movs	r3, #48	; 0x30
 8005eb6:	f04f 0901 	mov.w	r9, #1
 8005eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006064 <_svfiprintf_r+0x1ec>
 8005ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	469a      	mov	sl, r3
 8005eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ece:	b10a      	cbz	r2, 8005ed4 <_svfiprintf_r+0x5c>
 8005ed0:	2a25      	cmp	r2, #37	; 0x25
 8005ed2:	d1f9      	bne.n	8005ec8 <_svfiprintf_r+0x50>
 8005ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ed8:	d00b      	beq.n	8005ef2 <_svfiprintf_r+0x7a>
 8005eda:	465b      	mov	r3, fp
 8005edc:	4622      	mov	r2, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	f7ff ff6d 	bl	8005dc0 <__ssputs_r>
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f000 80aa 	beq.w	8006040 <_svfiprintf_r+0x1c8>
 8005eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eee:	445a      	add	r2, fp
 8005ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80a2 	beq.w	8006040 <_svfiprintf_r+0x1c8>
 8005efc:	2300      	movs	r3, #0
 8005efe:	f04f 32ff 	mov.w	r2, #4294967295
 8005f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f06:	f10a 0a01 	add.w	sl, sl, #1
 8005f0a:	9304      	str	r3, [sp, #16]
 8005f0c:	9307      	str	r3, [sp, #28]
 8005f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f12:	931a      	str	r3, [sp, #104]	; 0x68
 8005f14:	4654      	mov	r4, sl
 8005f16:	2205      	movs	r2, #5
 8005f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1c:	4851      	ldr	r0, [pc, #324]	; (8006064 <_svfiprintf_r+0x1ec>)
 8005f1e:	f000 fe8d 	bl	8006c3c <memchr>
 8005f22:	9a04      	ldr	r2, [sp, #16]
 8005f24:	b9d8      	cbnz	r0, 8005f5e <_svfiprintf_r+0xe6>
 8005f26:	06d0      	lsls	r0, r2, #27
 8005f28:	bf44      	itt	mi
 8005f2a:	2320      	movmi	r3, #32
 8005f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f30:	0711      	lsls	r1, r2, #28
 8005f32:	bf44      	itt	mi
 8005f34:	232b      	movmi	r3, #43	; 0x2b
 8005f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f40:	d015      	beq.n	8005f6e <_svfiprintf_r+0xf6>
 8005f42:	4654      	mov	r4, sl
 8005f44:	2000      	movs	r0, #0
 8005f46:	f04f 0c0a 	mov.w	ip, #10
 8005f4a:	9a07      	ldr	r2, [sp, #28]
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f52:	3b30      	subs	r3, #48	; 0x30
 8005f54:	2b09      	cmp	r3, #9
 8005f56:	d94e      	bls.n	8005ff6 <_svfiprintf_r+0x17e>
 8005f58:	b1b0      	cbz	r0, 8005f88 <_svfiprintf_r+0x110>
 8005f5a:	9207      	str	r2, [sp, #28]
 8005f5c:	e014      	b.n	8005f88 <_svfiprintf_r+0x110>
 8005f5e:	eba0 0308 	sub.w	r3, r0, r8
 8005f62:	fa09 f303 	lsl.w	r3, r9, r3
 8005f66:	4313      	orrs	r3, r2
 8005f68:	46a2      	mov	sl, r4
 8005f6a:	9304      	str	r3, [sp, #16]
 8005f6c:	e7d2      	b.n	8005f14 <_svfiprintf_r+0x9c>
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	1d19      	adds	r1, r3, #4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	9103      	str	r1, [sp, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfbb      	ittet	lt
 8005f7a:	425b      	neglt	r3, r3
 8005f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f80:	9307      	strge	r3, [sp, #28]
 8005f82:	9307      	strlt	r3, [sp, #28]
 8005f84:	bfb8      	it	lt
 8005f86:	9204      	strlt	r2, [sp, #16]
 8005f88:	7823      	ldrb	r3, [r4, #0]
 8005f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f8c:	d10c      	bne.n	8005fa8 <_svfiprintf_r+0x130>
 8005f8e:	7863      	ldrb	r3, [r4, #1]
 8005f90:	2b2a      	cmp	r3, #42	; 0x2a
 8005f92:	d135      	bne.n	8006000 <_svfiprintf_r+0x188>
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	3402      	adds	r4, #2
 8005f98:	1d1a      	adds	r2, r3, #4
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	9203      	str	r2, [sp, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bfb8      	it	lt
 8005fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fa6:	9305      	str	r3, [sp, #20]
 8005fa8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006068 <_svfiprintf_r+0x1f0>
 8005fac:	2203      	movs	r2, #3
 8005fae:	4650      	mov	r0, sl
 8005fb0:	7821      	ldrb	r1, [r4, #0]
 8005fb2:	f000 fe43 	bl	8006c3c <memchr>
 8005fb6:	b140      	cbz	r0, 8005fca <_svfiprintf_r+0x152>
 8005fb8:	2340      	movs	r3, #64	; 0x40
 8005fba:	eba0 000a 	sub.w	r0, r0, sl
 8005fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	3401      	adds	r4, #1
 8005fc6:	4303      	orrs	r3, r0
 8005fc8:	9304      	str	r3, [sp, #16]
 8005fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fce:	2206      	movs	r2, #6
 8005fd0:	4826      	ldr	r0, [pc, #152]	; (800606c <_svfiprintf_r+0x1f4>)
 8005fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fd6:	f000 fe31 	bl	8006c3c <memchr>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d038      	beq.n	8006050 <_svfiprintf_r+0x1d8>
 8005fde:	4b24      	ldr	r3, [pc, #144]	; (8006070 <_svfiprintf_r+0x1f8>)
 8005fe0:	bb1b      	cbnz	r3, 800602a <_svfiprintf_r+0x1b2>
 8005fe2:	9b03      	ldr	r3, [sp, #12]
 8005fe4:	3307      	adds	r3, #7
 8005fe6:	f023 0307 	bic.w	r3, r3, #7
 8005fea:	3308      	adds	r3, #8
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff0:	4433      	add	r3, r6
 8005ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff4:	e767      	b.n	8005ec6 <_svfiprintf_r+0x4e>
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ffe:	e7a5      	b.n	8005f4c <_svfiprintf_r+0xd4>
 8006000:	2300      	movs	r3, #0
 8006002:	f04f 0c0a 	mov.w	ip, #10
 8006006:	4619      	mov	r1, r3
 8006008:	3401      	adds	r4, #1
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	4620      	mov	r0, r4
 800600e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006012:	3a30      	subs	r2, #48	; 0x30
 8006014:	2a09      	cmp	r2, #9
 8006016:	d903      	bls.n	8006020 <_svfiprintf_r+0x1a8>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0c5      	beq.n	8005fa8 <_svfiprintf_r+0x130>
 800601c:	9105      	str	r1, [sp, #20]
 800601e:	e7c3      	b.n	8005fa8 <_svfiprintf_r+0x130>
 8006020:	4604      	mov	r4, r0
 8006022:	2301      	movs	r3, #1
 8006024:	fb0c 2101 	mla	r1, ip, r1, r2
 8006028:	e7f0      	b.n	800600c <_svfiprintf_r+0x194>
 800602a:	ab03      	add	r3, sp, #12
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	462a      	mov	r2, r5
 8006030:	4638      	mov	r0, r7
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <_svfiprintf_r+0x1fc>)
 8006034:	a904      	add	r1, sp, #16
 8006036:	f3af 8000 	nop.w
 800603a:	1c42      	adds	r2, r0, #1
 800603c:	4606      	mov	r6, r0
 800603e:	d1d6      	bne.n	8005fee <_svfiprintf_r+0x176>
 8006040:	89ab      	ldrh	r3, [r5, #12]
 8006042:	065b      	lsls	r3, r3, #25
 8006044:	f53f af2c 	bmi.w	8005ea0 <_svfiprintf_r+0x28>
 8006048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800604a:	b01d      	add	sp, #116	; 0x74
 800604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006050:	ab03      	add	r3, sp, #12
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	462a      	mov	r2, r5
 8006056:	4638      	mov	r0, r7
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <_svfiprintf_r+0x1fc>)
 800605a:	a904      	add	r1, sp, #16
 800605c:	f000 f9d4 	bl	8006408 <_printf_i>
 8006060:	e7eb      	b.n	800603a <_svfiprintf_r+0x1c2>
 8006062:	bf00      	nop
 8006064:	08007271 	.word	0x08007271
 8006068:	08007277 	.word	0x08007277
 800606c:	0800727b 	.word	0x0800727b
 8006070:	00000000 	.word	0x00000000
 8006074:	08005dc1 	.word	0x08005dc1

08006078 <__sfputc_r>:
 8006078:	6893      	ldr	r3, [r2, #8]
 800607a:	b410      	push	{r4}
 800607c:	3b01      	subs	r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	6093      	str	r3, [r2, #8]
 8006082:	da07      	bge.n	8006094 <__sfputc_r+0x1c>
 8006084:	6994      	ldr	r4, [r2, #24]
 8006086:	42a3      	cmp	r3, r4
 8006088:	db01      	blt.n	800608e <__sfputc_r+0x16>
 800608a:	290a      	cmp	r1, #10
 800608c:	d102      	bne.n	8006094 <__sfputc_r+0x1c>
 800608e:	bc10      	pop	{r4}
 8006090:	f000 baf0 	b.w	8006674 <__swbuf_r>
 8006094:	6813      	ldr	r3, [r2, #0]
 8006096:	1c58      	adds	r0, r3, #1
 8006098:	6010      	str	r0, [r2, #0]
 800609a:	7019      	strb	r1, [r3, #0]
 800609c:	4608      	mov	r0, r1
 800609e:	bc10      	pop	{r4}
 80060a0:	4770      	bx	lr

080060a2 <__sfputs_r>:
 80060a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a4:	4606      	mov	r6, r0
 80060a6:	460f      	mov	r7, r1
 80060a8:	4614      	mov	r4, r2
 80060aa:	18d5      	adds	r5, r2, r3
 80060ac:	42ac      	cmp	r4, r5
 80060ae:	d101      	bne.n	80060b4 <__sfputs_r+0x12>
 80060b0:	2000      	movs	r0, #0
 80060b2:	e007      	b.n	80060c4 <__sfputs_r+0x22>
 80060b4:	463a      	mov	r2, r7
 80060b6:	4630      	mov	r0, r6
 80060b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060bc:	f7ff ffdc 	bl	8006078 <__sfputc_r>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d1f3      	bne.n	80060ac <__sfputs_r+0xa>
 80060c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060c8 <_vfiprintf_r>:
 80060c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	460d      	mov	r5, r1
 80060ce:	4614      	mov	r4, r2
 80060d0:	4698      	mov	r8, r3
 80060d2:	4606      	mov	r6, r0
 80060d4:	b09d      	sub	sp, #116	; 0x74
 80060d6:	b118      	cbz	r0, 80060e0 <_vfiprintf_r+0x18>
 80060d8:	6983      	ldr	r3, [r0, #24]
 80060da:	b90b      	cbnz	r3, 80060e0 <_vfiprintf_r+0x18>
 80060dc:	f000 fca8 	bl	8006a30 <__sinit>
 80060e0:	4b89      	ldr	r3, [pc, #548]	; (8006308 <_vfiprintf_r+0x240>)
 80060e2:	429d      	cmp	r5, r3
 80060e4:	d11b      	bne.n	800611e <_vfiprintf_r+0x56>
 80060e6:	6875      	ldr	r5, [r6, #4]
 80060e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060ea:	07d9      	lsls	r1, r3, #31
 80060ec:	d405      	bmi.n	80060fa <_vfiprintf_r+0x32>
 80060ee:	89ab      	ldrh	r3, [r5, #12]
 80060f0:	059a      	lsls	r2, r3, #22
 80060f2:	d402      	bmi.n	80060fa <_vfiprintf_r+0x32>
 80060f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060f6:	f000 fd39 	bl	8006b6c <__retarget_lock_acquire_recursive>
 80060fa:	89ab      	ldrh	r3, [r5, #12]
 80060fc:	071b      	lsls	r3, r3, #28
 80060fe:	d501      	bpl.n	8006104 <_vfiprintf_r+0x3c>
 8006100:	692b      	ldr	r3, [r5, #16]
 8006102:	b9eb      	cbnz	r3, 8006140 <_vfiprintf_r+0x78>
 8006104:	4629      	mov	r1, r5
 8006106:	4630      	mov	r0, r6
 8006108:	f000 fb06 	bl	8006718 <__swsetup_r>
 800610c:	b1c0      	cbz	r0, 8006140 <_vfiprintf_r+0x78>
 800610e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006110:	07dc      	lsls	r4, r3, #31
 8006112:	d50e      	bpl.n	8006132 <_vfiprintf_r+0x6a>
 8006114:	f04f 30ff 	mov.w	r0, #4294967295
 8006118:	b01d      	add	sp, #116	; 0x74
 800611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	4b7b      	ldr	r3, [pc, #492]	; (800630c <_vfiprintf_r+0x244>)
 8006120:	429d      	cmp	r5, r3
 8006122:	d101      	bne.n	8006128 <_vfiprintf_r+0x60>
 8006124:	68b5      	ldr	r5, [r6, #8]
 8006126:	e7df      	b.n	80060e8 <_vfiprintf_r+0x20>
 8006128:	4b79      	ldr	r3, [pc, #484]	; (8006310 <_vfiprintf_r+0x248>)
 800612a:	429d      	cmp	r5, r3
 800612c:	bf08      	it	eq
 800612e:	68f5      	ldreq	r5, [r6, #12]
 8006130:	e7da      	b.n	80060e8 <_vfiprintf_r+0x20>
 8006132:	89ab      	ldrh	r3, [r5, #12]
 8006134:	0598      	lsls	r0, r3, #22
 8006136:	d4ed      	bmi.n	8006114 <_vfiprintf_r+0x4c>
 8006138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800613a:	f000 fd18 	bl	8006b6e <__retarget_lock_release_recursive>
 800613e:	e7e9      	b.n	8006114 <_vfiprintf_r+0x4c>
 8006140:	2300      	movs	r3, #0
 8006142:	9309      	str	r3, [sp, #36]	; 0x24
 8006144:	2320      	movs	r3, #32
 8006146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800614a:	2330      	movs	r3, #48	; 0x30
 800614c:	f04f 0901 	mov.w	r9, #1
 8006150:	f8cd 800c 	str.w	r8, [sp, #12]
 8006154:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006314 <_vfiprintf_r+0x24c>
 8006158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800615c:	4623      	mov	r3, r4
 800615e:	469a      	mov	sl, r3
 8006160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006164:	b10a      	cbz	r2, 800616a <_vfiprintf_r+0xa2>
 8006166:	2a25      	cmp	r2, #37	; 0x25
 8006168:	d1f9      	bne.n	800615e <_vfiprintf_r+0x96>
 800616a:	ebba 0b04 	subs.w	fp, sl, r4
 800616e:	d00b      	beq.n	8006188 <_vfiprintf_r+0xc0>
 8006170:	465b      	mov	r3, fp
 8006172:	4622      	mov	r2, r4
 8006174:	4629      	mov	r1, r5
 8006176:	4630      	mov	r0, r6
 8006178:	f7ff ff93 	bl	80060a2 <__sfputs_r>
 800617c:	3001      	adds	r0, #1
 800617e:	f000 80aa 	beq.w	80062d6 <_vfiprintf_r+0x20e>
 8006182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006184:	445a      	add	r2, fp
 8006186:	9209      	str	r2, [sp, #36]	; 0x24
 8006188:	f89a 3000 	ldrb.w	r3, [sl]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80a2 	beq.w	80062d6 <_vfiprintf_r+0x20e>
 8006192:	2300      	movs	r3, #0
 8006194:	f04f 32ff 	mov.w	r2, #4294967295
 8006198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800619c:	f10a 0a01 	add.w	sl, sl, #1
 80061a0:	9304      	str	r3, [sp, #16]
 80061a2:	9307      	str	r3, [sp, #28]
 80061a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061a8:	931a      	str	r3, [sp, #104]	; 0x68
 80061aa:	4654      	mov	r4, sl
 80061ac:	2205      	movs	r2, #5
 80061ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b2:	4858      	ldr	r0, [pc, #352]	; (8006314 <_vfiprintf_r+0x24c>)
 80061b4:	f000 fd42 	bl	8006c3c <memchr>
 80061b8:	9a04      	ldr	r2, [sp, #16]
 80061ba:	b9d8      	cbnz	r0, 80061f4 <_vfiprintf_r+0x12c>
 80061bc:	06d1      	lsls	r1, r2, #27
 80061be:	bf44      	itt	mi
 80061c0:	2320      	movmi	r3, #32
 80061c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061c6:	0713      	lsls	r3, r2, #28
 80061c8:	bf44      	itt	mi
 80061ca:	232b      	movmi	r3, #43	; 0x2b
 80061cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d0:	f89a 3000 	ldrb.w	r3, [sl]
 80061d4:	2b2a      	cmp	r3, #42	; 0x2a
 80061d6:	d015      	beq.n	8006204 <_vfiprintf_r+0x13c>
 80061d8:	4654      	mov	r4, sl
 80061da:	2000      	movs	r0, #0
 80061dc:	f04f 0c0a 	mov.w	ip, #10
 80061e0:	9a07      	ldr	r2, [sp, #28]
 80061e2:	4621      	mov	r1, r4
 80061e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061e8:	3b30      	subs	r3, #48	; 0x30
 80061ea:	2b09      	cmp	r3, #9
 80061ec:	d94e      	bls.n	800628c <_vfiprintf_r+0x1c4>
 80061ee:	b1b0      	cbz	r0, 800621e <_vfiprintf_r+0x156>
 80061f0:	9207      	str	r2, [sp, #28]
 80061f2:	e014      	b.n	800621e <_vfiprintf_r+0x156>
 80061f4:	eba0 0308 	sub.w	r3, r0, r8
 80061f8:	fa09 f303 	lsl.w	r3, r9, r3
 80061fc:	4313      	orrs	r3, r2
 80061fe:	46a2      	mov	sl, r4
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	e7d2      	b.n	80061aa <_vfiprintf_r+0xe2>
 8006204:	9b03      	ldr	r3, [sp, #12]
 8006206:	1d19      	adds	r1, r3, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	9103      	str	r1, [sp, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	bfbb      	ittet	lt
 8006210:	425b      	neglt	r3, r3
 8006212:	f042 0202 	orrlt.w	r2, r2, #2
 8006216:	9307      	strge	r3, [sp, #28]
 8006218:	9307      	strlt	r3, [sp, #28]
 800621a:	bfb8      	it	lt
 800621c:	9204      	strlt	r2, [sp, #16]
 800621e:	7823      	ldrb	r3, [r4, #0]
 8006220:	2b2e      	cmp	r3, #46	; 0x2e
 8006222:	d10c      	bne.n	800623e <_vfiprintf_r+0x176>
 8006224:	7863      	ldrb	r3, [r4, #1]
 8006226:	2b2a      	cmp	r3, #42	; 0x2a
 8006228:	d135      	bne.n	8006296 <_vfiprintf_r+0x1ce>
 800622a:	9b03      	ldr	r3, [sp, #12]
 800622c:	3402      	adds	r4, #2
 800622e:	1d1a      	adds	r2, r3, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	9203      	str	r2, [sp, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfb8      	it	lt
 8006238:	f04f 33ff 	movlt.w	r3, #4294967295
 800623c:	9305      	str	r3, [sp, #20]
 800623e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006318 <_vfiprintf_r+0x250>
 8006242:	2203      	movs	r2, #3
 8006244:	4650      	mov	r0, sl
 8006246:	7821      	ldrb	r1, [r4, #0]
 8006248:	f000 fcf8 	bl	8006c3c <memchr>
 800624c:	b140      	cbz	r0, 8006260 <_vfiprintf_r+0x198>
 800624e:	2340      	movs	r3, #64	; 0x40
 8006250:	eba0 000a 	sub.w	r0, r0, sl
 8006254:	fa03 f000 	lsl.w	r0, r3, r0
 8006258:	9b04      	ldr	r3, [sp, #16]
 800625a:	3401      	adds	r4, #1
 800625c:	4303      	orrs	r3, r0
 800625e:	9304      	str	r3, [sp, #16]
 8006260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006264:	2206      	movs	r2, #6
 8006266:	482d      	ldr	r0, [pc, #180]	; (800631c <_vfiprintf_r+0x254>)
 8006268:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800626c:	f000 fce6 	bl	8006c3c <memchr>
 8006270:	2800      	cmp	r0, #0
 8006272:	d03f      	beq.n	80062f4 <_vfiprintf_r+0x22c>
 8006274:	4b2a      	ldr	r3, [pc, #168]	; (8006320 <_vfiprintf_r+0x258>)
 8006276:	bb1b      	cbnz	r3, 80062c0 <_vfiprintf_r+0x1f8>
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	3307      	adds	r3, #7
 800627c:	f023 0307 	bic.w	r3, r3, #7
 8006280:	3308      	adds	r3, #8
 8006282:	9303      	str	r3, [sp, #12]
 8006284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006286:	443b      	add	r3, r7
 8006288:	9309      	str	r3, [sp, #36]	; 0x24
 800628a:	e767      	b.n	800615c <_vfiprintf_r+0x94>
 800628c:	460c      	mov	r4, r1
 800628e:	2001      	movs	r0, #1
 8006290:	fb0c 3202 	mla	r2, ip, r2, r3
 8006294:	e7a5      	b.n	80061e2 <_vfiprintf_r+0x11a>
 8006296:	2300      	movs	r3, #0
 8006298:	f04f 0c0a 	mov.w	ip, #10
 800629c:	4619      	mov	r1, r3
 800629e:	3401      	adds	r4, #1
 80062a0:	9305      	str	r3, [sp, #20]
 80062a2:	4620      	mov	r0, r4
 80062a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062a8:	3a30      	subs	r2, #48	; 0x30
 80062aa:	2a09      	cmp	r2, #9
 80062ac:	d903      	bls.n	80062b6 <_vfiprintf_r+0x1ee>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0c5      	beq.n	800623e <_vfiprintf_r+0x176>
 80062b2:	9105      	str	r1, [sp, #20]
 80062b4:	e7c3      	b.n	800623e <_vfiprintf_r+0x176>
 80062b6:	4604      	mov	r4, r0
 80062b8:	2301      	movs	r3, #1
 80062ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80062be:	e7f0      	b.n	80062a2 <_vfiprintf_r+0x1da>
 80062c0:	ab03      	add	r3, sp, #12
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	462a      	mov	r2, r5
 80062c6:	4630      	mov	r0, r6
 80062c8:	4b16      	ldr	r3, [pc, #88]	; (8006324 <_vfiprintf_r+0x25c>)
 80062ca:	a904      	add	r1, sp, #16
 80062cc:	f3af 8000 	nop.w
 80062d0:	4607      	mov	r7, r0
 80062d2:	1c78      	adds	r0, r7, #1
 80062d4:	d1d6      	bne.n	8006284 <_vfiprintf_r+0x1bc>
 80062d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062d8:	07d9      	lsls	r1, r3, #31
 80062da:	d405      	bmi.n	80062e8 <_vfiprintf_r+0x220>
 80062dc:	89ab      	ldrh	r3, [r5, #12]
 80062de:	059a      	lsls	r2, r3, #22
 80062e0:	d402      	bmi.n	80062e8 <_vfiprintf_r+0x220>
 80062e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062e4:	f000 fc43 	bl	8006b6e <__retarget_lock_release_recursive>
 80062e8:	89ab      	ldrh	r3, [r5, #12]
 80062ea:	065b      	lsls	r3, r3, #25
 80062ec:	f53f af12 	bmi.w	8006114 <_vfiprintf_r+0x4c>
 80062f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062f2:	e711      	b.n	8006118 <_vfiprintf_r+0x50>
 80062f4:	ab03      	add	r3, sp, #12
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	462a      	mov	r2, r5
 80062fa:	4630      	mov	r0, r6
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <_vfiprintf_r+0x25c>)
 80062fe:	a904      	add	r1, sp, #16
 8006300:	f000 f882 	bl	8006408 <_printf_i>
 8006304:	e7e4      	b.n	80062d0 <_vfiprintf_r+0x208>
 8006306:	bf00      	nop
 8006308:	080072c4 	.word	0x080072c4
 800630c:	080072e4 	.word	0x080072e4
 8006310:	080072a4 	.word	0x080072a4
 8006314:	08007271 	.word	0x08007271
 8006318:	08007277 	.word	0x08007277
 800631c:	0800727b 	.word	0x0800727b
 8006320:	00000000 	.word	0x00000000
 8006324:	080060a3 	.word	0x080060a3

08006328 <_printf_common>:
 8006328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800632c:	4616      	mov	r6, r2
 800632e:	4699      	mov	r9, r3
 8006330:	688a      	ldr	r2, [r1, #8]
 8006332:	690b      	ldr	r3, [r1, #16]
 8006334:	4607      	mov	r7, r0
 8006336:	4293      	cmp	r3, r2
 8006338:	bfb8      	it	lt
 800633a:	4613      	movlt	r3, r2
 800633c:	6033      	str	r3, [r6, #0]
 800633e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006342:	460c      	mov	r4, r1
 8006344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006348:	b10a      	cbz	r2, 800634e <_printf_common+0x26>
 800634a:	3301      	adds	r3, #1
 800634c:	6033      	str	r3, [r6, #0]
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	0699      	lsls	r1, r3, #26
 8006352:	bf42      	ittt	mi
 8006354:	6833      	ldrmi	r3, [r6, #0]
 8006356:	3302      	addmi	r3, #2
 8006358:	6033      	strmi	r3, [r6, #0]
 800635a:	6825      	ldr	r5, [r4, #0]
 800635c:	f015 0506 	ands.w	r5, r5, #6
 8006360:	d106      	bne.n	8006370 <_printf_common+0x48>
 8006362:	f104 0a19 	add.w	sl, r4, #25
 8006366:	68e3      	ldr	r3, [r4, #12]
 8006368:	6832      	ldr	r2, [r6, #0]
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	42ab      	cmp	r3, r5
 800636e:	dc28      	bgt.n	80063c2 <_printf_common+0x9a>
 8006370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006374:	1e13      	subs	r3, r2, #0
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	bf18      	it	ne
 800637a:	2301      	movne	r3, #1
 800637c:	0692      	lsls	r2, r2, #26
 800637e:	d42d      	bmi.n	80063dc <_printf_common+0xb4>
 8006380:	4649      	mov	r1, r9
 8006382:	4638      	mov	r0, r7
 8006384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006388:	47c0      	blx	r8
 800638a:	3001      	adds	r0, #1
 800638c:	d020      	beq.n	80063d0 <_printf_common+0xa8>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	68e5      	ldr	r5, [r4, #12]
 8006392:	f003 0306 	and.w	r3, r3, #6
 8006396:	2b04      	cmp	r3, #4
 8006398:	bf18      	it	ne
 800639a:	2500      	movne	r5, #0
 800639c:	6832      	ldr	r2, [r6, #0]
 800639e:	f04f 0600 	mov.w	r6, #0
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	bf08      	it	eq
 80063a6:	1aad      	subeq	r5, r5, r2
 80063a8:	6922      	ldr	r2, [r4, #16]
 80063aa:	bf08      	it	eq
 80063ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063b0:	4293      	cmp	r3, r2
 80063b2:	bfc4      	itt	gt
 80063b4:	1a9b      	subgt	r3, r3, r2
 80063b6:	18ed      	addgt	r5, r5, r3
 80063b8:	341a      	adds	r4, #26
 80063ba:	42b5      	cmp	r5, r6
 80063bc:	d11a      	bne.n	80063f4 <_printf_common+0xcc>
 80063be:	2000      	movs	r0, #0
 80063c0:	e008      	b.n	80063d4 <_printf_common+0xac>
 80063c2:	2301      	movs	r3, #1
 80063c4:	4652      	mov	r2, sl
 80063c6:	4649      	mov	r1, r9
 80063c8:	4638      	mov	r0, r7
 80063ca:	47c0      	blx	r8
 80063cc:	3001      	adds	r0, #1
 80063ce:	d103      	bne.n	80063d8 <_printf_common+0xb0>
 80063d0:	f04f 30ff 	mov.w	r0, #4294967295
 80063d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d8:	3501      	adds	r5, #1
 80063da:	e7c4      	b.n	8006366 <_printf_common+0x3e>
 80063dc:	2030      	movs	r0, #48	; 0x30
 80063de:	18e1      	adds	r1, r4, r3
 80063e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063ea:	4422      	add	r2, r4
 80063ec:	3302      	adds	r3, #2
 80063ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063f2:	e7c5      	b.n	8006380 <_printf_common+0x58>
 80063f4:	2301      	movs	r3, #1
 80063f6:	4622      	mov	r2, r4
 80063f8:	4649      	mov	r1, r9
 80063fa:	4638      	mov	r0, r7
 80063fc:	47c0      	blx	r8
 80063fe:	3001      	adds	r0, #1
 8006400:	d0e6      	beq.n	80063d0 <_printf_common+0xa8>
 8006402:	3601      	adds	r6, #1
 8006404:	e7d9      	b.n	80063ba <_printf_common+0x92>
	...

08006408 <_printf_i>:
 8006408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800640c:	7e0f      	ldrb	r7, [r1, #24]
 800640e:	4691      	mov	r9, r2
 8006410:	2f78      	cmp	r7, #120	; 0x78
 8006412:	4680      	mov	r8, r0
 8006414:	460c      	mov	r4, r1
 8006416:	469a      	mov	sl, r3
 8006418:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800641a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800641e:	d807      	bhi.n	8006430 <_printf_i+0x28>
 8006420:	2f62      	cmp	r7, #98	; 0x62
 8006422:	d80a      	bhi.n	800643a <_printf_i+0x32>
 8006424:	2f00      	cmp	r7, #0
 8006426:	f000 80d9 	beq.w	80065dc <_printf_i+0x1d4>
 800642a:	2f58      	cmp	r7, #88	; 0x58
 800642c:	f000 80a4 	beq.w	8006578 <_printf_i+0x170>
 8006430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006438:	e03a      	b.n	80064b0 <_printf_i+0xa8>
 800643a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800643e:	2b15      	cmp	r3, #21
 8006440:	d8f6      	bhi.n	8006430 <_printf_i+0x28>
 8006442:	a101      	add	r1, pc, #4	; (adr r1, 8006448 <_printf_i+0x40>)
 8006444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006448:	080064a1 	.word	0x080064a1
 800644c:	080064b5 	.word	0x080064b5
 8006450:	08006431 	.word	0x08006431
 8006454:	08006431 	.word	0x08006431
 8006458:	08006431 	.word	0x08006431
 800645c:	08006431 	.word	0x08006431
 8006460:	080064b5 	.word	0x080064b5
 8006464:	08006431 	.word	0x08006431
 8006468:	08006431 	.word	0x08006431
 800646c:	08006431 	.word	0x08006431
 8006470:	08006431 	.word	0x08006431
 8006474:	080065c3 	.word	0x080065c3
 8006478:	080064e5 	.word	0x080064e5
 800647c:	080065a5 	.word	0x080065a5
 8006480:	08006431 	.word	0x08006431
 8006484:	08006431 	.word	0x08006431
 8006488:	080065e5 	.word	0x080065e5
 800648c:	08006431 	.word	0x08006431
 8006490:	080064e5 	.word	0x080064e5
 8006494:	08006431 	.word	0x08006431
 8006498:	08006431 	.word	0x08006431
 800649c:	080065ad 	.word	0x080065ad
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	1d1a      	adds	r2, r3, #4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	602a      	str	r2, [r5, #0]
 80064a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0a4      	b.n	80065fe <_printf_i+0x1f6>
 80064b4:	6820      	ldr	r0, [r4, #0]
 80064b6:	6829      	ldr	r1, [r5, #0]
 80064b8:	0606      	lsls	r6, r0, #24
 80064ba:	f101 0304 	add.w	r3, r1, #4
 80064be:	d50a      	bpl.n	80064d6 <_printf_i+0xce>
 80064c0:	680e      	ldr	r6, [r1, #0]
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	2e00      	cmp	r6, #0
 80064c6:	da03      	bge.n	80064d0 <_printf_i+0xc8>
 80064c8:	232d      	movs	r3, #45	; 0x2d
 80064ca:	4276      	negs	r6, r6
 80064cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d0:	230a      	movs	r3, #10
 80064d2:	485e      	ldr	r0, [pc, #376]	; (800664c <_printf_i+0x244>)
 80064d4:	e019      	b.n	800650a <_printf_i+0x102>
 80064d6:	680e      	ldr	r6, [r1, #0]
 80064d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064dc:	602b      	str	r3, [r5, #0]
 80064de:	bf18      	it	ne
 80064e0:	b236      	sxthne	r6, r6
 80064e2:	e7ef      	b.n	80064c4 <_printf_i+0xbc>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	6820      	ldr	r0, [r4, #0]
 80064e8:	1d19      	adds	r1, r3, #4
 80064ea:	6029      	str	r1, [r5, #0]
 80064ec:	0601      	lsls	r1, r0, #24
 80064ee:	d501      	bpl.n	80064f4 <_printf_i+0xec>
 80064f0:	681e      	ldr	r6, [r3, #0]
 80064f2:	e002      	b.n	80064fa <_printf_i+0xf2>
 80064f4:	0646      	lsls	r6, r0, #25
 80064f6:	d5fb      	bpl.n	80064f0 <_printf_i+0xe8>
 80064f8:	881e      	ldrh	r6, [r3, #0]
 80064fa:	2f6f      	cmp	r7, #111	; 0x6f
 80064fc:	bf0c      	ite	eq
 80064fe:	2308      	moveq	r3, #8
 8006500:	230a      	movne	r3, #10
 8006502:	4852      	ldr	r0, [pc, #328]	; (800664c <_printf_i+0x244>)
 8006504:	2100      	movs	r1, #0
 8006506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800650a:	6865      	ldr	r5, [r4, #4]
 800650c:	2d00      	cmp	r5, #0
 800650e:	bfa8      	it	ge
 8006510:	6821      	ldrge	r1, [r4, #0]
 8006512:	60a5      	str	r5, [r4, #8]
 8006514:	bfa4      	itt	ge
 8006516:	f021 0104 	bicge.w	r1, r1, #4
 800651a:	6021      	strge	r1, [r4, #0]
 800651c:	b90e      	cbnz	r6, 8006522 <_printf_i+0x11a>
 800651e:	2d00      	cmp	r5, #0
 8006520:	d04d      	beq.n	80065be <_printf_i+0x1b6>
 8006522:	4615      	mov	r5, r2
 8006524:	fbb6 f1f3 	udiv	r1, r6, r3
 8006528:	fb03 6711 	mls	r7, r3, r1, r6
 800652c:	5dc7      	ldrb	r7, [r0, r7]
 800652e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006532:	4637      	mov	r7, r6
 8006534:	42bb      	cmp	r3, r7
 8006536:	460e      	mov	r6, r1
 8006538:	d9f4      	bls.n	8006524 <_printf_i+0x11c>
 800653a:	2b08      	cmp	r3, #8
 800653c:	d10b      	bne.n	8006556 <_printf_i+0x14e>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	07de      	lsls	r6, r3, #31
 8006542:	d508      	bpl.n	8006556 <_printf_i+0x14e>
 8006544:	6923      	ldr	r3, [r4, #16]
 8006546:	6861      	ldr	r1, [r4, #4]
 8006548:	4299      	cmp	r1, r3
 800654a:	bfde      	ittt	le
 800654c:	2330      	movle	r3, #48	; 0x30
 800654e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006552:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006556:	1b52      	subs	r2, r2, r5
 8006558:	6122      	str	r2, [r4, #16]
 800655a:	464b      	mov	r3, r9
 800655c:	4621      	mov	r1, r4
 800655e:	4640      	mov	r0, r8
 8006560:	f8cd a000 	str.w	sl, [sp]
 8006564:	aa03      	add	r2, sp, #12
 8006566:	f7ff fedf 	bl	8006328 <_printf_common>
 800656a:	3001      	adds	r0, #1
 800656c:	d14c      	bne.n	8006608 <_printf_i+0x200>
 800656e:	f04f 30ff 	mov.w	r0, #4294967295
 8006572:	b004      	add	sp, #16
 8006574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006578:	4834      	ldr	r0, [pc, #208]	; (800664c <_printf_i+0x244>)
 800657a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800657e:	6829      	ldr	r1, [r5, #0]
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	f851 6b04 	ldr.w	r6, [r1], #4
 8006586:	6029      	str	r1, [r5, #0]
 8006588:	061d      	lsls	r5, r3, #24
 800658a:	d514      	bpl.n	80065b6 <_printf_i+0x1ae>
 800658c:	07df      	lsls	r7, r3, #31
 800658e:	bf44      	itt	mi
 8006590:	f043 0320 	orrmi.w	r3, r3, #32
 8006594:	6023      	strmi	r3, [r4, #0]
 8006596:	b91e      	cbnz	r6, 80065a0 <_printf_i+0x198>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	f023 0320 	bic.w	r3, r3, #32
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	2310      	movs	r3, #16
 80065a2:	e7af      	b.n	8006504 <_printf_i+0xfc>
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	f043 0320 	orr.w	r3, r3, #32
 80065aa:	6023      	str	r3, [r4, #0]
 80065ac:	2378      	movs	r3, #120	; 0x78
 80065ae:	4828      	ldr	r0, [pc, #160]	; (8006650 <_printf_i+0x248>)
 80065b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065b4:	e7e3      	b.n	800657e <_printf_i+0x176>
 80065b6:	0659      	lsls	r1, r3, #25
 80065b8:	bf48      	it	mi
 80065ba:	b2b6      	uxthmi	r6, r6
 80065bc:	e7e6      	b.n	800658c <_printf_i+0x184>
 80065be:	4615      	mov	r5, r2
 80065c0:	e7bb      	b.n	800653a <_printf_i+0x132>
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	6826      	ldr	r6, [r4, #0]
 80065c6:	1d18      	adds	r0, r3, #4
 80065c8:	6961      	ldr	r1, [r4, #20]
 80065ca:	6028      	str	r0, [r5, #0]
 80065cc:	0635      	lsls	r5, r6, #24
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	d501      	bpl.n	80065d6 <_printf_i+0x1ce>
 80065d2:	6019      	str	r1, [r3, #0]
 80065d4:	e002      	b.n	80065dc <_printf_i+0x1d4>
 80065d6:	0670      	lsls	r0, r6, #25
 80065d8:	d5fb      	bpl.n	80065d2 <_printf_i+0x1ca>
 80065da:	8019      	strh	r1, [r3, #0]
 80065dc:	2300      	movs	r3, #0
 80065de:	4615      	mov	r5, r2
 80065e0:	6123      	str	r3, [r4, #16]
 80065e2:	e7ba      	b.n	800655a <_printf_i+0x152>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	2100      	movs	r1, #0
 80065e8:	1d1a      	adds	r2, r3, #4
 80065ea:	602a      	str	r2, [r5, #0]
 80065ec:	681d      	ldr	r5, [r3, #0]
 80065ee:	6862      	ldr	r2, [r4, #4]
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 fb23 	bl	8006c3c <memchr>
 80065f6:	b108      	cbz	r0, 80065fc <_printf_i+0x1f4>
 80065f8:	1b40      	subs	r0, r0, r5
 80065fa:	6060      	str	r0, [r4, #4]
 80065fc:	6863      	ldr	r3, [r4, #4]
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	2300      	movs	r3, #0
 8006602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006606:	e7a8      	b.n	800655a <_printf_i+0x152>
 8006608:	462a      	mov	r2, r5
 800660a:	4649      	mov	r1, r9
 800660c:	4640      	mov	r0, r8
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	47d0      	blx	sl
 8006612:	3001      	adds	r0, #1
 8006614:	d0ab      	beq.n	800656e <_printf_i+0x166>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	079b      	lsls	r3, r3, #30
 800661a:	d413      	bmi.n	8006644 <_printf_i+0x23c>
 800661c:	68e0      	ldr	r0, [r4, #12]
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	4298      	cmp	r0, r3
 8006622:	bfb8      	it	lt
 8006624:	4618      	movlt	r0, r3
 8006626:	e7a4      	b.n	8006572 <_printf_i+0x16a>
 8006628:	2301      	movs	r3, #1
 800662a:	4632      	mov	r2, r6
 800662c:	4649      	mov	r1, r9
 800662e:	4640      	mov	r0, r8
 8006630:	47d0      	blx	sl
 8006632:	3001      	adds	r0, #1
 8006634:	d09b      	beq.n	800656e <_printf_i+0x166>
 8006636:	3501      	adds	r5, #1
 8006638:	68e3      	ldr	r3, [r4, #12]
 800663a:	9903      	ldr	r1, [sp, #12]
 800663c:	1a5b      	subs	r3, r3, r1
 800663e:	42ab      	cmp	r3, r5
 8006640:	dcf2      	bgt.n	8006628 <_printf_i+0x220>
 8006642:	e7eb      	b.n	800661c <_printf_i+0x214>
 8006644:	2500      	movs	r5, #0
 8006646:	f104 0619 	add.w	r6, r4, #25
 800664a:	e7f5      	b.n	8006638 <_printf_i+0x230>
 800664c:	08007282 	.word	0x08007282
 8006650:	08007293 	.word	0x08007293

08006654 <_sbrk_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	2300      	movs	r3, #0
 8006658:	4d05      	ldr	r5, [pc, #20]	; (8006670 <_sbrk_r+0x1c>)
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
 800665e:	602b      	str	r3, [r5, #0]
 8006660:	f7fa fb3e 	bl	8000ce0 <_sbrk>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d102      	bne.n	800666e <_sbrk_r+0x1a>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	b103      	cbz	r3, 800666e <_sbrk_r+0x1a>
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	20001b20 	.word	0x20001b20

08006674 <__swbuf_r>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	460e      	mov	r6, r1
 8006678:	4614      	mov	r4, r2
 800667a:	4605      	mov	r5, r0
 800667c:	b118      	cbz	r0, 8006686 <__swbuf_r+0x12>
 800667e:	6983      	ldr	r3, [r0, #24]
 8006680:	b90b      	cbnz	r3, 8006686 <__swbuf_r+0x12>
 8006682:	f000 f9d5 	bl	8006a30 <__sinit>
 8006686:	4b21      	ldr	r3, [pc, #132]	; (800670c <__swbuf_r+0x98>)
 8006688:	429c      	cmp	r4, r3
 800668a:	d12b      	bne.n	80066e4 <__swbuf_r+0x70>
 800668c:	686c      	ldr	r4, [r5, #4]
 800668e:	69a3      	ldr	r3, [r4, #24]
 8006690:	60a3      	str	r3, [r4, #8]
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	071a      	lsls	r2, r3, #28
 8006696:	d52f      	bpl.n	80066f8 <__swbuf_r+0x84>
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	b36b      	cbz	r3, 80066f8 <__swbuf_r+0x84>
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	6820      	ldr	r0, [r4, #0]
 80066a0:	b2f6      	uxtb	r6, r6
 80066a2:	1ac0      	subs	r0, r0, r3
 80066a4:	6963      	ldr	r3, [r4, #20]
 80066a6:	4637      	mov	r7, r6
 80066a8:	4283      	cmp	r3, r0
 80066aa:	dc04      	bgt.n	80066b6 <__swbuf_r+0x42>
 80066ac:	4621      	mov	r1, r4
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 f92a 	bl	8006908 <_fflush_r>
 80066b4:	bb30      	cbnz	r0, 8006704 <__swbuf_r+0x90>
 80066b6:	68a3      	ldr	r3, [r4, #8]
 80066b8:	3001      	adds	r0, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	60a3      	str	r3, [r4, #8]
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	6022      	str	r2, [r4, #0]
 80066c4:	701e      	strb	r6, [r3, #0]
 80066c6:	6963      	ldr	r3, [r4, #20]
 80066c8:	4283      	cmp	r3, r0
 80066ca:	d004      	beq.n	80066d6 <__swbuf_r+0x62>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	07db      	lsls	r3, r3, #31
 80066d0:	d506      	bpl.n	80066e0 <__swbuf_r+0x6c>
 80066d2:	2e0a      	cmp	r6, #10
 80066d4:	d104      	bne.n	80066e0 <__swbuf_r+0x6c>
 80066d6:	4621      	mov	r1, r4
 80066d8:	4628      	mov	r0, r5
 80066da:	f000 f915 	bl	8006908 <_fflush_r>
 80066de:	b988      	cbnz	r0, 8006704 <__swbuf_r+0x90>
 80066e0:	4638      	mov	r0, r7
 80066e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e4:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <__swbuf_r+0x9c>)
 80066e6:	429c      	cmp	r4, r3
 80066e8:	d101      	bne.n	80066ee <__swbuf_r+0x7a>
 80066ea:	68ac      	ldr	r4, [r5, #8]
 80066ec:	e7cf      	b.n	800668e <__swbuf_r+0x1a>
 80066ee:	4b09      	ldr	r3, [pc, #36]	; (8006714 <__swbuf_r+0xa0>)
 80066f0:	429c      	cmp	r4, r3
 80066f2:	bf08      	it	eq
 80066f4:	68ec      	ldreq	r4, [r5, #12]
 80066f6:	e7ca      	b.n	800668e <__swbuf_r+0x1a>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 f80c 	bl	8006718 <__swsetup_r>
 8006700:	2800      	cmp	r0, #0
 8006702:	d0cb      	beq.n	800669c <__swbuf_r+0x28>
 8006704:	f04f 37ff 	mov.w	r7, #4294967295
 8006708:	e7ea      	b.n	80066e0 <__swbuf_r+0x6c>
 800670a:	bf00      	nop
 800670c:	080072c4 	.word	0x080072c4
 8006710:	080072e4 	.word	0x080072e4
 8006714:	080072a4 	.word	0x080072a4

08006718 <__swsetup_r>:
 8006718:	4b32      	ldr	r3, [pc, #200]	; (80067e4 <__swsetup_r+0xcc>)
 800671a:	b570      	push	{r4, r5, r6, lr}
 800671c:	681d      	ldr	r5, [r3, #0]
 800671e:	4606      	mov	r6, r0
 8006720:	460c      	mov	r4, r1
 8006722:	b125      	cbz	r5, 800672e <__swsetup_r+0x16>
 8006724:	69ab      	ldr	r3, [r5, #24]
 8006726:	b913      	cbnz	r3, 800672e <__swsetup_r+0x16>
 8006728:	4628      	mov	r0, r5
 800672a:	f000 f981 	bl	8006a30 <__sinit>
 800672e:	4b2e      	ldr	r3, [pc, #184]	; (80067e8 <__swsetup_r+0xd0>)
 8006730:	429c      	cmp	r4, r3
 8006732:	d10f      	bne.n	8006754 <__swsetup_r+0x3c>
 8006734:	686c      	ldr	r4, [r5, #4]
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800673c:	0719      	lsls	r1, r3, #28
 800673e:	d42c      	bmi.n	800679a <__swsetup_r+0x82>
 8006740:	06dd      	lsls	r5, r3, #27
 8006742:	d411      	bmi.n	8006768 <__swsetup_r+0x50>
 8006744:	2309      	movs	r3, #9
 8006746:	6033      	str	r3, [r6, #0]
 8006748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	e03e      	b.n	80067d2 <__swsetup_r+0xba>
 8006754:	4b25      	ldr	r3, [pc, #148]	; (80067ec <__swsetup_r+0xd4>)
 8006756:	429c      	cmp	r4, r3
 8006758:	d101      	bne.n	800675e <__swsetup_r+0x46>
 800675a:	68ac      	ldr	r4, [r5, #8]
 800675c:	e7eb      	b.n	8006736 <__swsetup_r+0x1e>
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <__swsetup_r+0xd8>)
 8006760:	429c      	cmp	r4, r3
 8006762:	bf08      	it	eq
 8006764:	68ec      	ldreq	r4, [r5, #12]
 8006766:	e7e6      	b.n	8006736 <__swsetup_r+0x1e>
 8006768:	0758      	lsls	r0, r3, #29
 800676a:	d512      	bpl.n	8006792 <__swsetup_r+0x7a>
 800676c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800676e:	b141      	cbz	r1, 8006782 <__swsetup_r+0x6a>
 8006770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006774:	4299      	cmp	r1, r3
 8006776:	d002      	beq.n	800677e <__swsetup_r+0x66>
 8006778:	4630      	mov	r0, r6
 800677a:	f7ff fa45 	bl	8005c08 <_free_r>
 800677e:	2300      	movs	r3, #0
 8006780:	6363      	str	r3, [r4, #52]	; 0x34
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006788:	81a3      	strh	r3, [r4, #12]
 800678a:	2300      	movs	r3, #0
 800678c:	6063      	str	r3, [r4, #4]
 800678e:	6923      	ldr	r3, [r4, #16]
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	f043 0308 	orr.w	r3, r3, #8
 8006798:	81a3      	strh	r3, [r4, #12]
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	b94b      	cbnz	r3, 80067b2 <__swsetup_r+0x9a>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a8:	d003      	beq.n	80067b2 <__swsetup_r+0x9a>
 80067aa:	4621      	mov	r1, r4
 80067ac:	4630      	mov	r0, r6
 80067ae:	f000 fa05 	bl	8006bbc <__smakebuf_r>
 80067b2:	89a0      	ldrh	r0, [r4, #12]
 80067b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067b8:	f010 0301 	ands.w	r3, r0, #1
 80067bc:	d00a      	beq.n	80067d4 <__swsetup_r+0xbc>
 80067be:	2300      	movs	r3, #0
 80067c0:	60a3      	str	r3, [r4, #8]
 80067c2:	6963      	ldr	r3, [r4, #20]
 80067c4:	425b      	negs	r3, r3
 80067c6:	61a3      	str	r3, [r4, #24]
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	b943      	cbnz	r3, 80067de <__swsetup_r+0xc6>
 80067cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067d0:	d1ba      	bne.n	8006748 <__swsetup_r+0x30>
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
 80067d4:	0781      	lsls	r1, r0, #30
 80067d6:	bf58      	it	pl
 80067d8:	6963      	ldrpl	r3, [r4, #20]
 80067da:	60a3      	str	r3, [r4, #8]
 80067dc:	e7f4      	b.n	80067c8 <__swsetup_r+0xb0>
 80067de:	2000      	movs	r0, #0
 80067e0:	e7f7      	b.n	80067d2 <__swsetup_r+0xba>
 80067e2:	bf00      	nop
 80067e4:	20000014 	.word	0x20000014
 80067e8:	080072c4 	.word	0x080072c4
 80067ec:	080072e4 	.word	0x080072e4
 80067f0:	080072a4 	.word	0x080072a4

080067f4 <abort>:
 80067f4:	2006      	movs	r0, #6
 80067f6:	b508      	push	{r3, lr}
 80067f8:	f000 faac 	bl	8006d54 <raise>
 80067fc:	2001      	movs	r0, #1
 80067fe:	f7fa f9fc 	bl	8000bfa <_exit>
	...

08006804 <__sflush_r>:
 8006804:	898a      	ldrh	r2, [r1, #12]
 8006806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006808:	4605      	mov	r5, r0
 800680a:	0710      	lsls	r0, r2, #28
 800680c:	460c      	mov	r4, r1
 800680e:	d457      	bmi.n	80068c0 <__sflush_r+0xbc>
 8006810:	684b      	ldr	r3, [r1, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	dc04      	bgt.n	8006820 <__sflush_r+0x1c>
 8006816:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	dc01      	bgt.n	8006820 <__sflush_r+0x1c>
 800681c:	2000      	movs	r0, #0
 800681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006822:	2e00      	cmp	r6, #0
 8006824:	d0fa      	beq.n	800681c <__sflush_r+0x18>
 8006826:	2300      	movs	r3, #0
 8006828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800682c:	682f      	ldr	r7, [r5, #0]
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	d032      	beq.n	8006898 <__sflush_r+0x94>
 8006832:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	075a      	lsls	r2, r3, #29
 8006838:	d505      	bpl.n	8006846 <__sflush_r+0x42>
 800683a:	6863      	ldr	r3, [r4, #4]
 800683c:	1ac0      	subs	r0, r0, r3
 800683e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006840:	b10b      	cbz	r3, 8006846 <__sflush_r+0x42>
 8006842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006844:	1ac0      	subs	r0, r0, r3
 8006846:	2300      	movs	r3, #0
 8006848:	4602      	mov	r2, r0
 800684a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800684c:	4628      	mov	r0, r5
 800684e:	6a21      	ldr	r1, [r4, #32]
 8006850:	47b0      	blx	r6
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	d106      	bne.n	8006866 <__sflush_r+0x62>
 8006858:	6829      	ldr	r1, [r5, #0]
 800685a:	291d      	cmp	r1, #29
 800685c:	d82c      	bhi.n	80068b8 <__sflush_r+0xb4>
 800685e:	4a29      	ldr	r2, [pc, #164]	; (8006904 <__sflush_r+0x100>)
 8006860:	40ca      	lsrs	r2, r1
 8006862:	07d6      	lsls	r6, r2, #31
 8006864:	d528      	bpl.n	80068b8 <__sflush_r+0xb4>
 8006866:	2200      	movs	r2, #0
 8006868:	6062      	str	r2, [r4, #4]
 800686a:	6922      	ldr	r2, [r4, #16]
 800686c:	04d9      	lsls	r1, r3, #19
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	d504      	bpl.n	800687c <__sflush_r+0x78>
 8006872:	1c42      	adds	r2, r0, #1
 8006874:	d101      	bne.n	800687a <__sflush_r+0x76>
 8006876:	682b      	ldr	r3, [r5, #0]
 8006878:	b903      	cbnz	r3, 800687c <__sflush_r+0x78>
 800687a:	6560      	str	r0, [r4, #84]	; 0x54
 800687c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800687e:	602f      	str	r7, [r5, #0]
 8006880:	2900      	cmp	r1, #0
 8006882:	d0cb      	beq.n	800681c <__sflush_r+0x18>
 8006884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006888:	4299      	cmp	r1, r3
 800688a:	d002      	beq.n	8006892 <__sflush_r+0x8e>
 800688c:	4628      	mov	r0, r5
 800688e:	f7ff f9bb 	bl	8005c08 <_free_r>
 8006892:	2000      	movs	r0, #0
 8006894:	6360      	str	r0, [r4, #52]	; 0x34
 8006896:	e7c2      	b.n	800681e <__sflush_r+0x1a>
 8006898:	6a21      	ldr	r1, [r4, #32]
 800689a:	2301      	movs	r3, #1
 800689c:	4628      	mov	r0, r5
 800689e:	47b0      	blx	r6
 80068a0:	1c41      	adds	r1, r0, #1
 80068a2:	d1c7      	bne.n	8006834 <__sflush_r+0x30>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0c4      	beq.n	8006834 <__sflush_r+0x30>
 80068aa:	2b1d      	cmp	r3, #29
 80068ac:	d001      	beq.n	80068b2 <__sflush_r+0xae>
 80068ae:	2b16      	cmp	r3, #22
 80068b0:	d101      	bne.n	80068b6 <__sflush_r+0xb2>
 80068b2:	602f      	str	r7, [r5, #0]
 80068b4:	e7b2      	b.n	800681c <__sflush_r+0x18>
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	e7ae      	b.n	800681e <__sflush_r+0x1a>
 80068c0:	690f      	ldr	r7, [r1, #16]
 80068c2:	2f00      	cmp	r7, #0
 80068c4:	d0aa      	beq.n	800681c <__sflush_r+0x18>
 80068c6:	0793      	lsls	r3, r2, #30
 80068c8:	bf18      	it	ne
 80068ca:	2300      	movne	r3, #0
 80068cc:	680e      	ldr	r6, [r1, #0]
 80068ce:	bf08      	it	eq
 80068d0:	694b      	ldreq	r3, [r1, #20]
 80068d2:	1bf6      	subs	r6, r6, r7
 80068d4:	600f      	str	r7, [r1, #0]
 80068d6:	608b      	str	r3, [r1, #8]
 80068d8:	2e00      	cmp	r6, #0
 80068da:	dd9f      	ble.n	800681c <__sflush_r+0x18>
 80068dc:	4633      	mov	r3, r6
 80068de:	463a      	mov	r2, r7
 80068e0:	4628      	mov	r0, r5
 80068e2:	6a21      	ldr	r1, [r4, #32]
 80068e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80068e8:	47e0      	blx	ip
 80068ea:	2800      	cmp	r0, #0
 80068ec:	dc06      	bgt.n	80068fc <__sflush_r+0xf8>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	e790      	b.n	800681e <__sflush_r+0x1a>
 80068fc:	4407      	add	r7, r0
 80068fe:	1a36      	subs	r6, r6, r0
 8006900:	e7ea      	b.n	80068d8 <__sflush_r+0xd4>
 8006902:	bf00      	nop
 8006904:	20400001 	.word	0x20400001

08006908 <_fflush_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	690b      	ldr	r3, [r1, #16]
 800690c:	4605      	mov	r5, r0
 800690e:	460c      	mov	r4, r1
 8006910:	b913      	cbnz	r3, 8006918 <_fflush_r+0x10>
 8006912:	2500      	movs	r5, #0
 8006914:	4628      	mov	r0, r5
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	b118      	cbz	r0, 8006922 <_fflush_r+0x1a>
 800691a:	6983      	ldr	r3, [r0, #24]
 800691c:	b90b      	cbnz	r3, 8006922 <_fflush_r+0x1a>
 800691e:	f000 f887 	bl	8006a30 <__sinit>
 8006922:	4b14      	ldr	r3, [pc, #80]	; (8006974 <_fflush_r+0x6c>)
 8006924:	429c      	cmp	r4, r3
 8006926:	d11b      	bne.n	8006960 <_fflush_r+0x58>
 8006928:	686c      	ldr	r4, [r5, #4]
 800692a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0ef      	beq.n	8006912 <_fflush_r+0xa>
 8006932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006934:	07d0      	lsls	r0, r2, #31
 8006936:	d404      	bmi.n	8006942 <_fflush_r+0x3a>
 8006938:	0599      	lsls	r1, r3, #22
 800693a:	d402      	bmi.n	8006942 <_fflush_r+0x3a>
 800693c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800693e:	f000 f915 	bl	8006b6c <__retarget_lock_acquire_recursive>
 8006942:	4628      	mov	r0, r5
 8006944:	4621      	mov	r1, r4
 8006946:	f7ff ff5d 	bl	8006804 <__sflush_r>
 800694a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800694c:	4605      	mov	r5, r0
 800694e:	07da      	lsls	r2, r3, #31
 8006950:	d4e0      	bmi.n	8006914 <_fflush_r+0xc>
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	059b      	lsls	r3, r3, #22
 8006956:	d4dd      	bmi.n	8006914 <_fflush_r+0xc>
 8006958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800695a:	f000 f908 	bl	8006b6e <__retarget_lock_release_recursive>
 800695e:	e7d9      	b.n	8006914 <_fflush_r+0xc>
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <_fflush_r+0x70>)
 8006962:	429c      	cmp	r4, r3
 8006964:	d101      	bne.n	800696a <_fflush_r+0x62>
 8006966:	68ac      	ldr	r4, [r5, #8]
 8006968:	e7df      	b.n	800692a <_fflush_r+0x22>
 800696a:	4b04      	ldr	r3, [pc, #16]	; (800697c <_fflush_r+0x74>)
 800696c:	429c      	cmp	r4, r3
 800696e:	bf08      	it	eq
 8006970:	68ec      	ldreq	r4, [r5, #12]
 8006972:	e7da      	b.n	800692a <_fflush_r+0x22>
 8006974:	080072c4 	.word	0x080072c4
 8006978:	080072e4 	.word	0x080072e4
 800697c:	080072a4 	.word	0x080072a4

08006980 <std>:
 8006980:	2300      	movs	r3, #0
 8006982:	b510      	push	{r4, lr}
 8006984:	4604      	mov	r4, r0
 8006986:	e9c0 3300 	strd	r3, r3, [r0]
 800698a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800698e:	6083      	str	r3, [r0, #8]
 8006990:	8181      	strh	r1, [r0, #12]
 8006992:	6643      	str	r3, [r0, #100]	; 0x64
 8006994:	81c2      	strh	r2, [r0, #14]
 8006996:	6183      	str	r3, [r0, #24]
 8006998:	4619      	mov	r1, r3
 800699a:	2208      	movs	r2, #8
 800699c:	305c      	adds	r0, #92	; 0x5c
 800699e:	f7fe ffe9 	bl	8005974 <memset>
 80069a2:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <std+0x38>)
 80069a4:	6224      	str	r4, [r4, #32]
 80069a6:	6263      	str	r3, [r4, #36]	; 0x24
 80069a8:	4b04      	ldr	r3, [pc, #16]	; (80069bc <std+0x3c>)
 80069aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80069ac:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <std+0x40>)
 80069ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <std+0x44>)
 80069b2:	6323      	str	r3, [r4, #48]	; 0x30
 80069b4:	bd10      	pop	{r4, pc}
 80069b6:	bf00      	nop
 80069b8:	08006d8d 	.word	0x08006d8d
 80069bc:	08006daf 	.word	0x08006daf
 80069c0:	08006de7 	.word	0x08006de7
 80069c4:	08006e0b 	.word	0x08006e0b

080069c8 <_cleanup_r>:
 80069c8:	4901      	ldr	r1, [pc, #4]	; (80069d0 <_cleanup_r+0x8>)
 80069ca:	f000 b8af 	b.w	8006b2c <_fwalk_reent>
 80069ce:	bf00      	nop
 80069d0:	08006909 	.word	0x08006909

080069d4 <__sfmoreglue>:
 80069d4:	2268      	movs	r2, #104	; 0x68
 80069d6:	b570      	push	{r4, r5, r6, lr}
 80069d8:	1e4d      	subs	r5, r1, #1
 80069da:	4355      	muls	r5, r2
 80069dc:	460e      	mov	r6, r1
 80069de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069e2:	f7ff f979 	bl	8005cd8 <_malloc_r>
 80069e6:	4604      	mov	r4, r0
 80069e8:	b140      	cbz	r0, 80069fc <__sfmoreglue+0x28>
 80069ea:	2100      	movs	r1, #0
 80069ec:	e9c0 1600 	strd	r1, r6, [r0]
 80069f0:	300c      	adds	r0, #12
 80069f2:	60a0      	str	r0, [r4, #8]
 80069f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069f8:	f7fe ffbc 	bl	8005974 <memset>
 80069fc:	4620      	mov	r0, r4
 80069fe:	bd70      	pop	{r4, r5, r6, pc}

08006a00 <__sfp_lock_acquire>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__sfp_lock_acquire+0x8>)
 8006a02:	f000 b8b3 	b.w	8006b6c <__retarget_lock_acquire_recursive>
 8006a06:	bf00      	nop
 8006a08:	20001b1d 	.word	0x20001b1d

08006a0c <__sfp_lock_release>:
 8006a0c:	4801      	ldr	r0, [pc, #4]	; (8006a14 <__sfp_lock_release+0x8>)
 8006a0e:	f000 b8ae 	b.w	8006b6e <__retarget_lock_release_recursive>
 8006a12:	bf00      	nop
 8006a14:	20001b1d 	.word	0x20001b1d

08006a18 <__sinit_lock_acquire>:
 8006a18:	4801      	ldr	r0, [pc, #4]	; (8006a20 <__sinit_lock_acquire+0x8>)
 8006a1a:	f000 b8a7 	b.w	8006b6c <__retarget_lock_acquire_recursive>
 8006a1e:	bf00      	nop
 8006a20:	20001b1e 	.word	0x20001b1e

08006a24 <__sinit_lock_release>:
 8006a24:	4801      	ldr	r0, [pc, #4]	; (8006a2c <__sinit_lock_release+0x8>)
 8006a26:	f000 b8a2 	b.w	8006b6e <__retarget_lock_release_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	20001b1e 	.word	0x20001b1e

08006a30 <__sinit>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	4604      	mov	r4, r0
 8006a34:	f7ff fff0 	bl	8006a18 <__sinit_lock_acquire>
 8006a38:	69a3      	ldr	r3, [r4, #24]
 8006a3a:	b11b      	cbz	r3, 8006a44 <__sinit+0x14>
 8006a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a40:	f7ff bff0 	b.w	8006a24 <__sinit_lock_release>
 8006a44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a48:	6523      	str	r3, [r4, #80]	; 0x50
 8006a4a:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <__sinit+0x68>)
 8006a4c:	4a13      	ldr	r2, [pc, #76]	; (8006a9c <__sinit+0x6c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a52:	42a3      	cmp	r3, r4
 8006a54:	bf08      	it	eq
 8006a56:	2301      	moveq	r3, #1
 8006a58:	4620      	mov	r0, r4
 8006a5a:	bf08      	it	eq
 8006a5c:	61a3      	streq	r3, [r4, #24]
 8006a5e:	f000 f81f 	bl	8006aa0 <__sfp>
 8006a62:	6060      	str	r0, [r4, #4]
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 f81b 	bl	8006aa0 <__sfp>
 8006a6a:	60a0      	str	r0, [r4, #8]
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 f817 	bl	8006aa0 <__sfp>
 8006a72:	2200      	movs	r2, #0
 8006a74:	2104      	movs	r1, #4
 8006a76:	60e0      	str	r0, [r4, #12]
 8006a78:	6860      	ldr	r0, [r4, #4]
 8006a7a:	f7ff ff81 	bl	8006980 <std>
 8006a7e:	2201      	movs	r2, #1
 8006a80:	2109      	movs	r1, #9
 8006a82:	68a0      	ldr	r0, [r4, #8]
 8006a84:	f7ff ff7c 	bl	8006980 <std>
 8006a88:	2202      	movs	r2, #2
 8006a8a:	2112      	movs	r1, #18
 8006a8c:	68e0      	ldr	r0, [r4, #12]
 8006a8e:	f7ff ff77 	bl	8006980 <std>
 8006a92:	2301      	movs	r3, #1
 8006a94:	61a3      	str	r3, [r4, #24]
 8006a96:	e7d1      	b.n	8006a3c <__sinit+0xc>
 8006a98:	080070bc 	.word	0x080070bc
 8006a9c:	080069c9 	.word	0x080069c9

08006aa0 <__sfp>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	f7ff ffac 	bl	8006a00 <__sfp_lock_acquire>
 8006aa8:	4b1e      	ldr	r3, [pc, #120]	; (8006b24 <__sfp+0x84>)
 8006aaa:	681e      	ldr	r6, [r3, #0]
 8006aac:	69b3      	ldr	r3, [r6, #24]
 8006aae:	b913      	cbnz	r3, 8006ab6 <__sfp+0x16>
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f7ff ffbd 	bl	8006a30 <__sinit>
 8006ab6:	3648      	adds	r6, #72	; 0x48
 8006ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	d503      	bpl.n	8006ac8 <__sfp+0x28>
 8006ac0:	6833      	ldr	r3, [r6, #0]
 8006ac2:	b30b      	cbz	r3, 8006b08 <__sfp+0x68>
 8006ac4:	6836      	ldr	r6, [r6, #0]
 8006ac6:	e7f7      	b.n	8006ab8 <__sfp+0x18>
 8006ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006acc:	b9d5      	cbnz	r5, 8006b04 <__sfp+0x64>
 8006ace:	4b16      	ldr	r3, [pc, #88]	; (8006b28 <__sfp+0x88>)
 8006ad0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ad4:	60e3      	str	r3, [r4, #12]
 8006ad6:	6665      	str	r5, [r4, #100]	; 0x64
 8006ad8:	f000 f847 	bl	8006b6a <__retarget_lock_init_recursive>
 8006adc:	f7ff ff96 	bl	8006a0c <__sfp_lock_release>
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ae8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006aec:	6025      	str	r5, [r4, #0]
 8006aee:	61a5      	str	r5, [r4, #24]
 8006af0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006af4:	f7fe ff3e 	bl	8005974 <memset>
 8006af8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006afc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b00:	4620      	mov	r0, r4
 8006b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b04:	3468      	adds	r4, #104	; 0x68
 8006b06:	e7d9      	b.n	8006abc <__sfp+0x1c>
 8006b08:	2104      	movs	r1, #4
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	f7ff ff62 	bl	80069d4 <__sfmoreglue>
 8006b10:	4604      	mov	r4, r0
 8006b12:	6030      	str	r0, [r6, #0]
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d1d5      	bne.n	8006ac4 <__sfp+0x24>
 8006b18:	f7ff ff78 	bl	8006a0c <__sfp_lock_release>
 8006b1c:	230c      	movs	r3, #12
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	e7ee      	b.n	8006b00 <__sfp+0x60>
 8006b22:	bf00      	nop
 8006b24:	080070bc 	.word	0x080070bc
 8006b28:	ffff0001 	.word	0xffff0001

08006b2c <_fwalk_reent>:
 8006b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b30:	4606      	mov	r6, r0
 8006b32:	4688      	mov	r8, r1
 8006b34:	2700      	movs	r7, #0
 8006b36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b3e:	f1b9 0901 	subs.w	r9, r9, #1
 8006b42:	d505      	bpl.n	8006b50 <_fwalk_reent+0x24>
 8006b44:	6824      	ldr	r4, [r4, #0]
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	d1f7      	bne.n	8006b3a <_fwalk_reent+0xe>
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b50:	89ab      	ldrh	r3, [r5, #12]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d907      	bls.n	8006b66 <_fwalk_reent+0x3a>
 8006b56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	d003      	beq.n	8006b66 <_fwalk_reent+0x3a>
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4630      	mov	r0, r6
 8006b62:	47c0      	blx	r8
 8006b64:	4307      	orrs	r7, r0
 8006b66:	3568      	adds	r5, #104	; 0x68
 8006b68:	e7e9      	b.n	8006b3e <_fwalk_reent+0x12>

08006b6a <__retarget_lock_init_recursive>:
 8006b6a:	4770      	bx	lr

08006b6c <__retarget_lock_acquire_recursive>:
 8006b6c:	4770      	bx	lr

08006b6e <__retarget_lock_release_recursive>:
 8006b6e:	4770      	bx	lr

08006b70 <__swhatbuf_r>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	460e      	mov	r6, r1
 8006b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b78:	4614      	mov	r4, r2
 8006b7a:	2900      	cmp	r1, #0
 8006b7c:	461d      	mov	r5, r3
 8006b7e:	b096      	sub	sp, #88	; 0x58
 8006b80:	da08      	bge.n	8006b94 <__swhatbuf_r+0x24>
 8006b82:	2200      	movs	r2, #0
 8006b84:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	061a      	lsls	r2, r3, #24
 8006b8c:	d410      	bmi.n	8006bb0 <__swhatbuf_r+0x40>
 8006b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b92:	e00e      	b.n	8006bb2 <__swhatbuf_r+0x42>
 8006b94:	466a      	mov	r2, sp
 8006b96:	f000 f95f 	bl	8006e58 <_fstat_r>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	dbf1      	blt.n	8006b82 <__swhatbuf_r+0x12>
 8006b9e:	9a01      	ldr	r2, [sp, #4]
 8006ba0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ba4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ba8:	425a      	negs	r2, r3
 8006baa:	415a      	adcs	r2, r3
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	e7ee      	b.n	8006b8e <__swhatbuf_r+0x1e>
 8006bb0:	2340      	movs	r3, #64	; 0x40
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	b016      	add	sp, #88	; 0x58
 8006bb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bbc <__smakebuf_r>:
 8006bbc:	898b      	ldrh	r3, [r1, #12]
 8006bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bc0:	079d      	lsls	r5, r3, #30
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	d507      	bpl.n	8006bd8 <__smakebuf_r+0x1c>
 8006bc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	6123      	str	r3, [r4, #16]
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	6163      	str	r3, [r4, #20]
 8006bd4:	b002      	add	sp, #8
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	466a      	mov	r2, sp
 8006bda:	ab01      	add	r3, sp, #4
 8006bdc:	f7ff ffc8 	bl	8006b70 <__swhatbuf_r>
 8006be0:	9900      	ldr	r1, [sp, #0]
 8006be2:	4605      	mov	r5, r0
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff f877 	bl	8005cd8 <_malloc_r>
 8006bea:	b948      	cbnz	r0, 8006c00 <__smakebuf_r+0x44>
 8006bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf0:	059a      	lsls	r2, r3, #22
 8006bf2:	d4ef      	bmi.n	8006bd4 <__smakebuf_r+0x18>
 8006bf4:	f023 0303 	bic.w	r3, r3, #3
 8006bf8:	f043 0302 	orr.w	r3, r3, #2
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	e7e3      	b.n	8006bc8 <__smakebuf_r+0xc>
 8006c00:	4b0d      	ldr	r3, [pc, #52]	; (8006c38 <__smakebuf_r+0x7c>)
 8006c02:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	6020      	str	r0, [r4, #0]
 8006c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0c:	81a3      	strh	r3, [r4, #12]
 8006c0e:	9b00      	ldr	r3, [sp, #0]
 8006c10:	6120      	str	r0, [r4, #16]
 8006c12:	6163      	str	r3, [r4, #20]
 8006c14:	9b01      	ldr	r3, [sp, #4]
 8006c16:	b15b      	cbz	r3, 8006c30 <__smakebuf_r+0x74>
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c1e:	f000 f92d 	bl	8006e7c <_isatty_r>
 8006c22:	b128      	cbz	r0, 8006c30 <__smakebuf_r+0x74>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f023 0303 	bic.w	r3, r3, #3
 8006c2a:	f043 0301 	orr.w	r3, r3, #1
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	89a0      	ldrh	r0, [r4, #12]
 8006c32:	4305      	orrs	r5, r0
 8006c34:	81a5      	strh	r5, [r4, #12]
 8006c36:	e7cd      	b.n	8006bd4 <__smakebuf_r+0x18>
 8006c38:	080069c9 	.word	0x080069c9

08006c3c <memchr>:
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	b510      	push	{r4, lr}
 8006c40:	b2c9      	uxtb	r1, r1
 8006c42:	4402      	add	r2, r0
 8006c44:	4293      	cmp	r3, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	d101      	bne.n	8006c4e <memchr+0x12>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e003      	b.n	8006c56 <memchr+0x1a>
 8006c4e:	7804      	ldrb	r4, [r0, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	428c      	cmp	r4, r1
 8006c54:	d1f6      	bne.n	8006c44 <memchr+0x8>
 8006c56:	bd10      	pop	{r4, pc}

08006c58 <memmove>:
 8006c58:	4288      	cmp	r0, r1
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	eb01 0402 	add.w	r4, r1, r2
 8006c60:	d902      	bls.n	8006c68 <memmove+0x10>
 8006c62:	4284      	cmp	r4, r0
 8006c64:	4623      	mov	r3, r4
 8006c66:	d807      	bhi.n	8006c78 <memmove+0x20>
 8006c68:	1e43      	subs	r3, r0, #1
 8006c6a:	42a1      	cmp	r1, r4
 8006c6c:	d008      	beq.n	8006c80 <memmove+0x28>
 8006c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c76:	e7f8      	b.n	8006c6a <memmove+0x12>
 8006c78:	4601      	mov	r1, r0
 8006c7a:	4402      	add	r2, r0
 8006c7c:	428a      	cmp	r2, r1
 8006c7e:	d100      	bne.n	8006c82 <memmove+0x2a>
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c8a:	e7f7      	b.n	8006c7c <memmove+0x24>

08006c8c <__malloc_lock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__malloc_lock+0x8>)
 8006c8e:	f7ff bf6d 	b.w	8006b6c <__retarget_lock_acquire_recursive>
 8006c92:	bf00      	nop
 8006c94:	20001b1c 	.word	0x20001b1c

08006c98 <__malloc_unlock>:
 8006c98:	4801      	ldr	r0, [pc, #4]	; (8006ca0 <__malloc_unlock+0x8>)
 8006c9a:	f7ff bf68 	b.w	8006b6e <__retarget_lock_release_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	20001b1c 	.word	0x20001b1c

08006ca4 <_realloc_r>:
 8006ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca8:	4680      	mov	r8, r0
 8006caa:	4614      	mov	r4, r2
 8006cac:	460e      	mov	r6, r1
 8006cae:	b921      	cbnz	r1, 8006cba <_realloc_r+0x16>
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	f7ff b80f 	b.w	8005cd8 <_malloc_r>
 8006cba:	b92a      	cbnz	r2, 8006cc8 <_realloc_r+0x24>
 8006cbc:	f7fe ffa4 	bl	8005c08 <_free_r>
 8006cc0:	4625      	mov	r5, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc8:	f000 f8fa 	bl	8006ec0 <_malloc_usable_size_r>
 8006ccc:	4284      	cmp	r4, r0
 8006cce:	4607      	mov	r7, r0
 8006cd0:	d802      	bhi.n	8006cd8 <_realloc_r+0x34>
 8006cd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006cd6:	d812      	bhi.n	8006cfe <_realloc_r+0x5a>
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4640      	mov	r0, r8
 8006cdc:	f7fe fffc 	bl	8005cd8 <_malloc_r>
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d0ed      	beq.n	8006cc2 <_realloc_r+0x1e>
 8006ce6:	42bc      	cmp	r4, r7
 8006ce8:	4622      	mov	r2, r4
 8006cea:	4631      	mov	r1, r6
 8006cec:	bf28      	it	cs
 8006cee:	463a      	movcs	r2, r7
 8006cf0:	f7fe fe32 	bl	8005958 <memcpy>
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	f7fe ff86 	bl	8005c08 <_free_r>
 8006cfc:	e7e1      	b.n	8006cc2 <_realloc_r+0x1e>
 8006cfe:	4635      	mov	r5, r6
 8006d00:	e7df      	b.n	8006cc2 <_realloc_r+0x1e>

08006d02 <_raise_r>:
 8006d02:	291f      	cmp	r1, #31
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4604      	mov	r4, r0
 8006d08:	460d      	mov	r5, r1
 8006d0a:	d904      	bls.n	8006d16 <_raise_r+0x14>
 8006d0c:	2316      	movs	r3, #22
 8006d0e:	6003      	str	r3, [r0, #0]
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	bd38      	pop	{r3, r4, r5, pc}
 8006d16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d18:	b112      	cbz	r2, 8006d20 <_raise_r+0x1e>
 8006d1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d1e:	b94b      	cbnz	r3, 8006d34 <_raise_r+0x32>
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 f831 	bl	8006d88 <_getpid_r>
 8006d26:	462a      	mov	r2, r5
 8006d28:	4601      	mov	r1, r0
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d30:	f000 b818 	b.w	8006d64 <_kill_r>
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d00a      	beq.n	8006d4e <_raise_r+0x4c>
 8006d38:	1c59      	adds	r1, r3, #1
 8006d3a:	d103      	bne.n	8006d44 <_raise_r+0x42>
 8006d3c:	2316      	movs	r3, #22
 8006d3e:	6003      	str	r3, [r0, #0]
 8006d40:	2001      	movs	r0, #1
 8006d42:	e7e7      	b.n	8006d14 <_raise_r+0x12>
 8006d44:	2400      	movs	r4, #0
 8006d46:	4628      	mov	r0, r5
 8006d48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d4c:	4798      	blx	r3
 8006d4e:	2000      	movs	r0, #0
 8006d50:	e7e0      	b.n	8006d14 <_raise_r+0x12>
	...

08006d54 <raise>:
 8006d54:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <raise+0xc>)
 8006d56:	4601      	mov	r1, r0
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	f7ff bfd2 	b.w	8006d02 <_raise_r>
 8006d5e:	bf00      	nop
 8006d60:	20000014 	.word	0x20000014

08006d64 <_kill_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	2300      	movs	r3, #0
 8006d68:	4d06      	ldr	r5, [pc, #24]	; (8006d84 <_kill_r+0x20>)
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	f7f9 ff32 	bl	8000bda <_kill>
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	d102      	bne.n	8006d80 <_kill_r+0x1c>
 8006d7a:	682b      	ldr	r3, [r5, #0]
 8006d7c:	b103      	cbz	r3, 8006d80 <_kill_r+0x1c>
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	bd38      	pop	{r3, r4, r5, pc}
 8006d82:	bf00      	nop
 8006d84:	20001b20 	.word	0x20001b20

08006d88 <_getpid_r>:
 8006d88:	f7f9 bf20 	b.w	8000bcc <_getpid>

08006d8c <__sread>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	460c      	mov	r4, r1
 8006d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d94:	f000 f89c 	bl	8006ed0 <_read_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	bfab      	itete	ge
 8006d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006da0:	181b      	addge	r3, r3, r0
 8006da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006da6:	bfac      	ite	ge
 8006da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006daa:	81a3      	strhlt	r3, [r4, #12]
 8006dac:	bd10      	pop	{r4, pc}

08006dae <__swrite>:
 8006dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db2:	461f      	mov	r7, r3
 8006db4:	898b      	ldrh	r3, [r1, #12]
 8006db6:	4605      	mov	r5, r0
 8006db8:	05db      	lsls	r3, r3, #23
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	d505      	bpl.n	8006dcc <__swrite+0x1e>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc8:	f000 f868 	bl	8006e9c <_lseek_r>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	4632      	mov	r2, r6
 8006dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	463b      	mov	r3, r7
 8006dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006de2:	f000 b817 	b.w	8006e14 <_write_r>

08006de6 <__sseek>:
 8006de6:	b510      	push	{r4, lr}
 8006de8:	460c      	mov	r4, r1
 8006dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dee:	f000 f855 	bl	8006e9c <_lseek_r>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	bf15      	itete	ne
 8006df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e02:	81a3      	strheq	r3, [r4, #12]
 8006e04:	bf18      	it	ne
 8006e06:	81a3      	strhne	r3, [r4, #12]
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <__sclose>:
 8006e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0e:	f000 b813 	b.w	8006e38 <_close_r>
	...

08006e14 <_write_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4d05      	ldr	r5, [pc, #20]	; (8006e34 <_write_r+0x20>)
 8006e20:	602a      	str	r2, [r5, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f7f9 ff10 	bl	8000c48 <_write>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_write_r+0x1e>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_write_r+0x1e>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	20001b20 	.word	0x20001b20

08006e38 <_close_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4d05      	ldr	r5, [pc, #20]	; (8006e54 <_close_r+0x1c>)
 8006e3e:	4604      	mov	r4, r0
 8006e40:	4608      	mov	r0, r1
 8006e42:	602b      	str	r3, [r5, #0]
 8006e44:	f7f9 ff1c 	bl	8000c80 <_close>
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d102      	bne.n	8006e52 <_close_r+0x1a>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	b103      	cbz	r3, 8006e52 <_close_r+0x1a>
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	20001b20 	.word	0x20001b20

08006e58 <_fstat_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	4d06      	ldr	r5, [pc, #24]	; (8006e78 <_fstat_r+0x20>)
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4608      	mov	r0, r1
 8006e62:	4611      	mov	r1, r2
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	f7f9 ff16 	bl	8000c96 <_fstat>
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	d102      	bne.n	8006e74 <_fstat_r+0x1c>
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	b103      	cbz	r3, 8006e74 <_fstat_r+0x1c>
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	bd38      	pop	{r3, r4, r5, pc}
 8006e76:	bf00      	nop
 8006e78:	20001b20 	.word	0x20001b20

08006e7c <_isatty_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4d05      	ldr	r5, [pc, #20]	; (8006e98 <_isatty_r+0x1c>)
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	602b      	str	r3, [r5, #0]
 8006e88:	f7f9 ff14 	bl	8000cb4 <_isatty>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_isatty_r+0x1a>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_isatty_r+0x1a>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	20001b20 	.word	0x20001b20

08006e9c <_lseek_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4d05      	ldr	r5, [pc, #20]	; (8006ebc <_lseek_r+0x20>)
 8006ea8:	602a      	str	r2, [r5, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f7f9 ff0c 	bl	8000cc8 <_lseek>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_lseek_r+0x1e>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_lseek_r+0x1e>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	20001b20 	.word	0x20001b20

08006ec0 <_malloc_usable_size_r>:
 8006ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec4:	1f18      	subs	r0, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfbc      	itt	lt
 8006eca:	580b      	ldrlt	r3, [r1, r0]
 8006ecc:	18c0      	addlt	r0, r0, r3
 8006ece:	4770      	bx	lr

08006ed0 <_read_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4d05      	ldr	r5, [pc, #20]	; (8006ef0 <_read_r+0x20>)
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f7f9 fe95 	bl	8000c0e <_read>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_read_r+0x1e>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_read_r+0x1e>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	20001b20 	.word	0x20001b20

08006ef4 <_init>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr

08006f00 <_fini>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr

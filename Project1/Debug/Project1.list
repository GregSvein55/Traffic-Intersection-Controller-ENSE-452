
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007730  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008104  08008104  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008104  08008104  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008104  08008104  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800810c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad0  20000078  08008184  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b48  08008184  00021b48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155f0  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003342  00000000  00000000  00035691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  000389d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  00039e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cfa  00000000  00000000  0003b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a12  00000000  00000000  00054e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009580b  00000000  00000000  0006a82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f38  00000000  00000000  00100088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08007828 	.word	0x08007828

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08007828 	.word	0x08007828

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <lightSet>:

 Also handles Pedestrian/ERV inputs, and sets the intersection
 to the correct state
 */
char lightSet(char state)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	4603      	mov	r3, r0
 800017c:	71fb      	strb	r3, [r7, #7]
	if (state == 'a'){//Red both ways
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	2b61      	cmp	r3, #97	; 0x61
 8000182:	d139      	bne.n	80001f8 <lightSet+0x84>
		save_state = state;
 8000184:	4ab5      	ldr	r2, [pc, #724]	; (800045c <lightSet+0x2e8>)
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 800018a:	2201      	movs	r2, #1
 800018c:	2140      	movs	r1, #64	; 0x40
 800018e:	48b4      	ldr	r0, [pc, #720]	; (8000460 <lightSet+0x2ec>)
 8000190:	f001 fedc 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800019a:	48b2      	ldr	r0, [pc, #712]	; (8000464 <lightSet+0x2f0>)
 800019c:	f001 fed6 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001a6:	48af      	ldr	r0, [pc, #700]	; (8000464 <lightSet+0x2f0>)
 80001a8:	f001 fed0 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b2:	48ab      	ldr	r0, [pc, #684]	; (8000460 <lightSet+0x2ec>)
 80001b4:	f001 feca 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	2180      	movs	r1, #128	; 0x80
 80001bc:	48a8      	ldr	r0, [pc, #672]	; (8000460 <lightSet+0x2ec>)
 80001be:	f001 fec5 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 80001c2:	2200      	movs	r2, #0
 80001c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001c8:	48a6      	ldr	r0, [pc, #664]	; (8000464 <lightSet+0x2f0>)
 80001ca:	f001 febf 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 80001ce:	2200      	movs	r2, #0
 80001d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d4:	48a3      	ldr	r0, [pc, #652]	; (8000464 <lightSet+0x2f0>)
 80001d6:	f001 feb9 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e0:	489f      	ldr	r0, [pc, #636]	; (8000460 <lightSet+0x2ec>)
 80001e2:	f001 feb3 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ec:	489c      	ldr	r0, [pc, #624]	; (8000460 <lightSet+0x2ec>)
 80001ee:	f001 fead 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'b';
 80001f2:	2362      	movs	r3, #98	; 0x62
 80001f4:	71fb      	strb	r3, [r7, #7]
 80001f6:	e2f3      	b.n	80007e0 <lightSet+0x66c>
	}
	else if(state == 'b'){//Primary Turning light On
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	2b62      	cmp	r3, #98	; 0x62
 80001fc:	d139      	bne.n	8000272 <lightSet+0xfe>
		save_state = state;
 80001fe:	4a97      	ldr	r2, [pc, #604]	; (800045c <lightSet+0x2e8>)
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2140      	movs	r1, #64	; 0x40
 8000208:	4895      	ldr	r0, [pc, #596]	; (8000460 <lightSet+0x2ec>)
 800020a:	f001 fe9f 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000214:	4893      	ldr	r0, [pc, #588]	; (8000464 <lightSet+0x2f0>)
 8000216:	f001 fe99 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000220:	4890      	ldr	r0, [pc, #576]	; (8000464 <lightSet+0x2f0>)
 8000222:	f001 fe93 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800022c:	488c      	ldr	r0, [pc, #560]	; (8000460 <lightSet+0x2ec>)
 800022e:	f001 fe8d 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	2180      	movs	r1, #128	; 0x80
 8000236:	488a      	ldr	r0, [pc, #552]	; (8000460 <lightSet+0x2ec>)
 8000238:	f001 fe88 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000242:	4888      	ldr	r0, [pc, #544]	; (8000464 <lightSet+0x2f0>)
 8000244:	f001 fe82 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	4885      	ldr	r0, [pc, #532]	; (8000464 <lightSet+0x2f0>)
 8000250:	f001 fe7c 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025a:	4881      	ldr	r0, [pc, #516]	; (8000460 <lightSet+0x2ec>)
 800025c:	f001 fe76 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000266:	487e      	ldr	r0, [pc, #504]	; (8000460 <lightSet+0x2ec>)
 8000268:	f001 fe70 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'c';
 800026c:	2363      	movs	r3, #99	; 0x63
 800026e:	71fb      	strb	r3, [r7, #7]
 8000270:	e2b6      	b.n	80007e0 <lightSet+0x66c>

	}

	else if(state == 'c'){//Primary Green and Walk On
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	2b63      	cmp	r3, #99	; 0x63
 8000276:	d139      	bne.n	80002ec <lightSet+0x178>
		save_state = state;
 8000278:	4a78      	ldr	r2, [pc, #480]	; (800045c <lightSet+0x2e8>)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	4877      	ldr	r0, [pc, #476]	; (8000460 <lightSet+0x2ec>)
 8000284:	f001 fe62 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028e:	4875      	ldr	r0, [pc, #468]	; (8000464 <lightSet+0x2f0>)
 8000290:	f001 fe5c 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029a:	4872      	ldr	r0, [pc, #456]	; (8000464 <lightSet+0x2f0>)
 800029c:	f001 fe56 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a6:	486e      	ldr	r0, [pc, #440]	; (8000460 <lightSet+0x2ec>)
 80002a8:	f001 fe50 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	486b      	ldr	r0, [pc, #428]	; (8000460 <lightSet+0x2ec>)
 80002b2:	f001 fe4b 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002bc:	4869      	ldr	r0, [pc, #420]	; (8000464 <lightSet+0x2f0>)
 80002be:	f001 fe45 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	4866      	ldr	r0, [pc, #408]	; (8000464 <lightSet+0x2f0>)
 80002ca:	f001 fe3f 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d4:	4862      	ldr	r0, [pc, #392]	; (8000460 <lightSet+0x2ec>)
 80002d6:	f001 fe39 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e0:	485f      	ldr	r0, [pc, #380]	; (8000460 <lightSet+0x2ec>)
 80002e2:	f001 fe33 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'd';
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	71fb      	strb	r3, [r7, #7]
 80002ea:	e279      	b.n	80007e0 <lightSet+0x66c>
	}

	else if(state == 'd'){//Primary Green On, Walk turns off
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b64      	cmp	r3, #100	; 0x64
 80002f0:	d139      	bne.n	8000366 <lightSet+0x1f2>
		save_state = state;
 80002f2:	4a5a      	ldr	r2, [pc, #360]	; (800045c <lightSet+0x2e8>)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2140      	movs	r1, #64	; 0x40
 80002fc:	4858      	ldr	r0, [pc, #352]	; (8000460 <lightSet+0x2ec>)
 80002fe:	f001 fe25 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000308:	4856      	ldr	r0, [pc, #344]	; (8000464 <lightSet+0x2f0>)
 800030a:	f001 fe1f 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_SET);
 800030e:	2201      	movs	r2, #1
 8000310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000314:	4853      	ldr	r0, [pc, #332]	; (8000464 <lightSet+0x2f0>)
 8000316:	f001 fe19 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000320:	484f      	ldr	r0, [pc, #316]	; (8000460 <lightSet+0x2ec>)
 8000322:	f001 fe13 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2180      	movs	r1, #128	; 0x80
 800032a:	484d      	ldr	r0, [pc, #308]	; (8000460 <lightSet+0x2ec>)
 800032c:	f001 fe0e 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000336:	484b      	ldr	r0, [pc, #300]	; (8000464 <lightSet+0x2f0>)
 8000338:	f001 fe08 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000342:	4848      	ldr	r0, [pc, #288]	; (8000464 <lightSet+0x2f0>)
 8000344:	f001 fe02 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034e:	4844      	ldr	r0, [pc, #272]	; (8000460 <lightSet+0x2ec>)
 8000350:	f001 fdfc 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800035a:	4841      	ldr	r0, [pc, #260]	; (8000460 <lightSet+0x2ec>)
 800035c:	f001 fdf6 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'e';
 8000360:	2365      	movs	r3, #101	; 0x65
 8000362:	71fb      	strb	r3, [r7, #7]
 8000364:	e23c      	b.n	80007e0 <lightSet+0x66c>
	}

	else if(state == 'e'){//Primary Yellow
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	2b65      	cmp	r3, #101	; 0x65
 800036a:	d139      	bne.n	80003e0 <lightSet+0x26c>
		save_state = state;
 800036c:	4a3b      	ldr	r2, [pc, #236]	; (800045c <lightSet+0x2e8>)
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2140      	movs	r1, #64	; 0x40
 8000376:	483a      	ldr	r0, [pc, #232]	; (8000460 <lightSet+0x2ec>)
 8000378:	f001 fde8 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000382:	4838      	ldr	r0, [pc, #224]	; (8000464 <lightSet+0x2f0>)
 8000384:	f001 fde2 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800038e:	4835      	ldr	r0, [pc, #212]	; (8000464 <lightSet+0x2f0>)
 8000390:	f001 fddc 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039a:	4831      	ldr	r0, [pc, #196]	; (8000460 <lightSet+0x2ec>)
 800039c:	f001 fdd6 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2180      	movs	r1, #128	; 0x80
 80003a4:	482e      	ldr	r0, [pc, #184]	; (8000460 <lightSet+0x2ec>)
 80003a6:	f001 fdd1 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b0:	482c      	ldr	r0, [pc, #176]	; (8000464 <lightSet+0x2f0>)
 80003b2:	f001 fdcb 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003bc:	4829      	ldr	r0, [pc, #164]	; (8000464 <lightSet+0x2f0>)
 80003be:	f001 fdc5 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c8:	4825      	ldr	r0, [pc, #148]	; (8000460 <lightSet+0x2ec>)
 80003ca:	f001 fdbf 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d4:	4822      	ldr	r0, [pc, #136]	; (8000460 <lightSet+0x2ec>)
 80003d6:	f001 fdb9 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'f';
 80003da:	2366      	movs	r3, #102	; 0x66
 80003dc:	71fb      	strb	r3, [r7, #7]
 80003de:	e1ff      	b.n	80007e0 <lightSet+0x66c>
	}

	else if(state == 'f'){//All Red again
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b66      	cmp	r3, #102	; 0x66
 80003e4:	d140      	bne.n	8000468 <lightSet+0x2f4>
		save_state = state;
 80003e6:	4a1d      	ldr	r2, [pc, #116]	; (800045c <lightSet+0x2e8>)
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2140      	movs	r1, #64	; 0x40
 80003f0:	481b      	ldr	r0, [pc, #108]	; (8000460 <lightSet+0x2ec>)
 80003f2:	f001 fdab 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003fc:	4819      	ldr	r0, [pc, #100]	; (8000464 <lightSet+0x2f0>)
 80003fe:	f001 fda5 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000408:	4816      	ldr	r0, [pc, #88]	; (8000464 <lightSet+0x2f0>)
 800040a:	f001 fd9f 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000414:	4812      	ldr	r0, [pc, #72]	; (8000460 <lightSet+0x2ec>)
 8000416:	f001 fd99 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	4810      	ldr	r0, [pc, #64]	; (8000460 <lightSet+0x2ec>)
 8000420:	f001 fd94 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800042a:	480e      	ldr	r0, [pc, #56]	; (8000464 <lightSet+0x2f0>)
 800042c:	f001 fd8e 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <lightSet+0x2f0>)
 8000438:	f001 fd88 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000442:	4807      	ldr	r0, [pc, #28]	; (8000460 <lightSet+0x2ec>)
 8000444:	f001 fd82 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <lightSet+0x2ec>)
 8000450:	f001 fd7c 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'g';
 8000454:	2367      	movs	r3, #103	; 0x67
 8000456:	71fb      	strb	r3, [r7, #7]
 8000458:	e1c2      	b.n	80007e0 <lightSet+0x66c>
 800045a:	bf00      	nop
 800045c:	20000000 	.word	0x20000000
 8000460:	40010800 	.word	0x40010800
 8000464:	40010c00 	.word	0x40010c00
	}

	else if(state == 'g'){//Secondary Green and Walk On
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b67      	cmp	r3, #103	; 0x67
 800046c:	d139      	bne.n	80004e2 <lightSet+0x36e>
		save_state = state;
 800046e:	4a98      	ldr	r2, [pc, #608]	; (80006d0 <lightSet+0x55c>)
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	4896      	ldr	r0, [pc, #600]	; (80006d4 <lightSet+0x560>)
 800047a:	f001 fd67 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000484:	4894      	ldr	r0, [pc, #592]	; (80006d8 <lightSet+0x564>)
 8000486:	f001 fd61 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000490:	4891      	ldr	r0, [pc, #580]	; (80006d8 <lightSet+0x564>)
 8000492:	f001 fd5b 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800049c:	488d      	ldr	r0, [pc, #564]	; (80006d4 <lightSet+0x560>)
 800049e:	f001 fd55 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	488b      	ldr	r0, [pc, #556]	; (80006d4 <lightSet+0x560>)
 80004a8:	f001 fd50 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b2:	4889      	ldr	r0, [pc, #548]	; (80006d8 <lightSet+0x564>)
 80004b4:	f001 fd4a 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	4886      	ldr	r0, [pc, #536]	; (80006d8 <lightSet+0x564>)
 80004c0:	f001 fd44 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ca:	4882      	ldr	r0, [pc, #520]	; (80006d4 <lightSet+0x560>)
 80004cc:	f001 fd3e 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d6:	487f      	ldr	r0, [pc, #508]	; (80006d4 <lightSet+0x560>)
 80004d8:	f001 fd38 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'h';
 80004dc:	2368      	movs	r3, #104	; 0x68
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	e17e      	b.n	80007e0 <lightSet+0x66c>
	}

	else if(state == 'h'){//Secondary Green On, Walk turns off
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b68      	cmp	r3, #104	; 0x68
 80004e6:	d139      	bne.n	800055c <lightSet+0x3e8>
		save_state = state;
 80004e8:	4a79      	ldr	r2, [pc, #484]	; (80006d0 <lightSet+0x55c>)
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	2140      	movs	r1, #64	; 0x40
 80004f2:	4878      	ldr	r0, [pc, #480]	; (80006d4 <lightSet+0x560>)
 80004f4:	f001 fd2a 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004fe:	4876      	ldr	r0, [pc, #472]	; (80006d8 <lightSet+0x564>)
 8000500:	f001 fd24 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050a:	4873      	ldr	r0, [pc, #460]	; (80006d8 <lightSet+0x564>)
 800050c:	f001 fd1e 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000516:	486f      	ldr	r0, [pc, #444]	; (80006d4 <lightSet+0x560>)
 8000518:	f001 fd18 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	486c      	ldr	r0, [pc, #432]	; (80006d4 <lightSet+0x560>)
 8000522:	f001 fd13 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052c:	486a      	ldr	r0, [pc, #424]	; (80006d8 <lightSet+0x564>)
 800052e:	f001 fd0d 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000538:	4867      	ldr	r0, [pc, #412]	; (80006d8 <lightSet+0x564>)
 800053a:	f001 fd07 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000544:	4863      	ldr	r0, [pc, #396]	; (80006d4 <lightSet+0x560>)
 8000546:	f001 fd01 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000550:	4860      	ldr	r0, [pc, #384]	; (80006d4 <lightSet+0x560>)
 8000552:	f001 fcfb 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'i';
 8000556:	2369      	movs	r3, #105	; 0x69
 8000558:	71fb      	strb	r3, [r7, #7]
 800055a:	e141      	b.n	80007e0 <lightSet+0x66c>
	}

	else if(state == 'i'){//Secondary Yellow
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b69      	cmp	r3, #105	; 0x69
 8000560:	d139      	bne.n	80005d6 <lightSet+0x462>
		save_state = state;
 8000562:	4a5b      	ldr	r2, [pc, #364]	; (80006d0 <lightSet+0x55c>)
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	4859      	ldr	r0, [pc, #356]	; (80006d4 <lightSet+0x560>)
 800056e:	f001 fced 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000578:	4857      	ldr	r0, [pc, #348]	; (80006d8 <lightSet+0x564>)
 800057a:	f001 fce7 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	4854      	ldr	r0, [pc, #336]	; (80006d8 <lightSet+0x564>)
 8000586:	f001 fce1 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000590:	4850      	ldr	r0, [pc, #320]	; (80006d4 <lightSet+0x560>)
 8000592:	f001 fcdb 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	484e      	ldr	r0, [pc, #312]	; (80006d4 <lightSet+0x560>)
 800059c:	f001 fcd6 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a6:	484c      	ldr	r0, [pc, #304]	; (80006d8 <lightSet+0x564>)
 80005a8:	f001 fcd0 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b2:	4849      	ldr	r0, [pc, #292]	; (80006d8 <lightSet+0x564>)
 80005b4:	f001 fcca 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005be:	4845      	ldr	r0, [pc, #276]	; (80006d4 <lightSet+0x560>)
 80005c0:	f001 fcc4 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	4842      	ldr	r0, [pc, #264]	; (80006d4 <lightSet+0x560>)
 80005cc:	f001 fcbe 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'a';
 80005d0:	2361      	movs	r3, #97	; 0x61
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	e104      	b.n	80007e0 <lightSet+0x66c>
	}

	else if(state == 'm'){//Primary Pedestrian input
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b6d      	cmp	r3, #109	; 0x6d
 80005da:	d11d      	bne.n	8000618 <lightSet+0x4a4>
		if (save_state == 'a' || save_state == 'b' || save_state == 'c' || save_state == 'd' || save_state == 'e' || save_state == 'f'){
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <lightSet+0x55c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b61      	cmp	r3, #97	; 0x61
 80005e2:	d013      	beq.n	800060c <lightSet+0x498>
 80005e4:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <lightSet+0x55c>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b62      	cmp	r3, #98	; 0x62
 80005ea:	d00f      	beq.n	800060c <lightSet+0x498>
 80005ec:	4b38      	ldr	r3, [pc, #224]	; (80006d0 <lightSet+0x55c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b63      	cmp	r3, #99	; 0x63
 80005f2:	d00b      	beq.n	800060c <lightSet+0x498>
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <lightSet+0x55c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b64      	cmp	r3, #100	; 0x64
 80005fa:	d007      	beq.n	800060c <lightSet+0x498>
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <lightSet+0x55c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b65      	cmp	r3, #101	; 0x65
 8000602:	d003      	beq.n	800060c <lightSet+0x498>
 8000604:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <lightSet+0x55c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b66      	cmp	r3, #102	; 0x66
 800060a:	d102      	bne.n	8000612 <lightSet+0x49e>
			//straight to pri green and walk
			state = 'c';
 800060c:	2363      	movs	r3, #99	; 0x63
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	e0e6      	b.n	80007e0 <lightSet+0x66c>
		}
		else{//yellow secondary, then onto primary
			state = 'i';
 8000612:	2369      	movs	r3, #105	; 0x69
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	e0e3      	b.n	80007e0 <lightSet+0x66c>
		}
	}

	else if(state == 'n'){//Secondary Pedestrian input
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b6e      	cmp	r3, #110	; 0x6e
 800061c:	d119      	bne.n	8000652 <lightSet+0x4de>
		if (save_state == 'a' || save_state == 'f' || save_state == 'g' || save_state == 'h' || save_state == 'i'){
 800061e:	4b2c      	ldr	r3, [pc, #176]	; (80006d0 <lightSet+0x55c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b61      	cmp	r3, #97	; 0x61
 8000624:	d00f      	beq.n	8000646 <lightSet+0x4d2>
 8000626:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <lightSet+0x55c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b66      	cmp	r3, #102	; 0x66
 800062c:	d00b      	beq.n	8000646 <lightSet+0x4d2>
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <lightSet+0x55c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b67      	cmp	r3, #103	; 0x67
 8000634:	d007      	beq.n	8000646 <lightSet+0x4d2>
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <lightSet+0x55c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b68      	cmp	r3, #104	; 0x68
 800063c:	d003      	beq.n	8000646 <lightSet+0x4d2>
 800063e:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <lightSet+0x55c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b69      	cmp	r3, #105	; 0x69
 8000644:	d102      	bne.n	800064c <lightSet+0x4d8>
			//straight to sec green and walk
			state = 'h';
 8000646:	2368      	movs	r3, #104	; 0x68
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	e0c9      	b.n	80007e0 <lightSet+0x66c>
		}
		else{//yellow primary, then onto secondary

			state = 'e';
 800064c:	2365      	movs	r3, #101	; 0x65
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	e0c6      	b.n	80007e0 <lightSet+0x66c>
		}
	}

	else if(state == 'o'){//Primary ERV input
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b6f      	cmp	r3, #111	; 0x6f
 8000656:	d11d      	bne.n	8000694 <lightSet+0x520>
		if (save_state == 'a' || save_state == 'b' || save_state == 'c' || save_state == 'd' || save_state == 'e' || save_state == 'f'){
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <lightSet+0x55c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b61      	cmp	r3, #97	; 0x61
 800065e:	d013      	beq.n	8000688 <lightSet+0x514>
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <lightSet+0x55c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b62      	cmp	r3, #98	; 0x62
 8000666:	d00f      	beq.n	8000688 <lightSet+0x514>
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <lightSet+0x55c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b63      	cmp	r3, #99	; 0x63
 800066e:	d00b      	beq.n	8000688 <lightSet+0x514>
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <lightSet+0x55c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b64      	cmp	r3, #100	; 0x64
 8000676:	d007      	beq.n	8000688 <lightSet+0x514>
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <lightSet+0x55c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b65      	cmp	r3, #101	; 0x65
 800067e:	d003      	beq.n	8000688 <lightSet+0x514>
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <lightSet+0x55c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b66      	cmp	r3, #102	; 0x66
 8000686:	d102      	bne.n	800068e <lightSet+0x51a>
			//straight to pri green and walk
			state = 'c';
 8000688:	2363      	movs	r3, #99	; 0x63
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	e0a8      	b.n	80007e0 <lightSet+0x66c>
		}
		else{//yellow secondary, then onto primary
			state = 'i';
 800068e:	2369      	movs	r3, #105	; 0x69
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	e0a5      	b.n	80007e0 <lightSet+0x66c>
		}
	}

	else if(state == 'p'){//Secondary ERV input
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2b70      	cmp	r3, #112	; 0x70
 8000698:	d120      	bne.n	80006dc <lightSet+0x568>
		if (save_state == 'a' || save_state == 'f' || save_state == 'g' || save_state == 'h' || save_state == 'i'){
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <lightSet+0x55c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b61      	cmp	r3, #97	; 0x61
 80006a0:	d00f      	beq.n	80006c2 <lightSet+0x54e>
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <lightSet+0x55c>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b66      	cmp	r3, #102	; 0x66
 80006a8:	d00b      	beq.n	80006c2 <lightSet+0x54e>
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <lightSet+0x55c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b67      	cmp	r3, #103	; 0x67
 80006b0:	d007      	beq.n	80006c2 <lightSet+0x54e>
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <lightSet+0x55c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b68      	cmp	r3, #104	; 0x68
 80006b8:	d003      	beq.n	80006c2 <lightSet+0x54e>
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <lightSet+0x55c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b69      	cmp	r3, #105	; 0x69
 80006c0:	d102      	bne.n	80006c8 <lightSet+0x554>
			//straight to sec green and walk
			state = 'h';
 80006c2:	2368      	movs	r3, #104	; 0x68
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	e08b      	b.n	80007e0 <lightSet+0x66c>
		}
		else{//yellow primary, then onto secondary

			state = 'e';
 80006c8:	2365      	movs	r3, #101	; 0x65
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	e088      	b.n	80007e0 <lightSet+0x66c>
 80006ce:	bf00      	nop
 80006d0:	20000000 	.word	0x20000000
 80006d4:	40010800 	.word	0x40010800
 80006d8:	40010c00 	.word	0x40010c00
		}
	}

	else if(state == 'x'){//Four Way Red
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b78      	cmp	r3, #120	; 0x78
 80006e0:	d136      	bne.n	8000750 <lightSet+0x5dc>
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	4841      	ldr	r0, [pc, #260]	; (80007ec <lightSet+0x678>)
 80006e8:	f001 fc30 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	483f      	ldr	r0, [pc, #252]	; (80007f0 <lightSet+0x67c>)
 80006f4:	f001 fc2a 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fe:	483c      	ldr	r0, [pc, #240]	; (80007f0 <lightSet+0x67c>)
 8000700:	f001 fc24 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070a:	4838      	ldr	r0, [pc, #224]	; (80007ec <lightSet+0x678>)
 800070c:	f001 fc1e 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	4835      	ldr	r0, [pc, #212]	; (80007ec <lightSet+0x678>)
 8000716:	f001 fc19 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000720:	4833      	ldr	r0, [pc, #204]	; (80007f0 <lightSet+0x67c>)
 8000722:	f001 fc13 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072c:	4830      	ldr	r0, [pc, #192]	; (80007f0 <lightSet+0x67c>)
 800072e:	f001 fc0d 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000738:	482c      	ldr	r0, [pc, #176]	; (80007ec <lightSet+0x678>)
 800073a:	f001 fc07 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	4829      	ldr	r0, [pc, #164]	; (80007ec <lightSet+0x678>)
 8000746:	f001 fc01 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'y';
 800074a:	2379      	movs	r3, #121	; 0x79
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	e047      	b.n	80007e0 <lightSet+0x66c>
	}

	else if(state == 'y'){//Used to flash red for failsafe mode
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b79      	cmp	r3, #121	; 0x79
 8000754:	d108      	bne.n	8000768 <lightSet+0x5f4>
		HAL_GPIO_TogglePin(GPIOA, R1_Pin);
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	4824      	ldr	r0, [pc, #144]	; (80007ec <lightSet+0x678>)
 800075a:	f001 fc0f 	bl	8001f7c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, R2_Pin);
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	4822      	ldr	r0, [pc, #136]	; (80007ec <lightSet+0x678>)
 8000762:	f001 fc0b 	bl	8001f7c <HAL_GPIO_TogglePin>
 8000766:	e03b      	b.n	80007e0 <lightSet+0x66c>
	}

	else if(state == 'z'){//IIT mode
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b7a      	cmp	r3, #122	; 0x7a
 800076c:	d136      	bne.n	80007dc <lightSet+0x668>
		HAL_GPIO_WritePin(GPIOA, R1_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	481e      	ldr	r0, [pc, #120]	; (80007ec <lightSet+0x678>)
 8000774:	f001 fbea 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y1_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077e:	481c      	ldr	r0, [pc, #112]	; (80007f0 <lightSet+0x67c>)
 8000780:	f001 fbe4 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G1_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078a:	4819      	ldr	r0, [pc, #100]	; (80007f0 <lightSet+0x67c>)
 800078c:	f001 fbde 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W1_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000796:	4815      	ldr	r0, [pc, #84]	; (80007ec <lightSet+0x678>)
 8000798:	f001 fbd8 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R2_Pin, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	4812      	ldr	r0, [pc, #72]	; (80007ec <lightSet+0x678>)
 80007a2:	f001 fbd3 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <lightSet+0x67c>)
 80007ae:	f001 fbcd 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <lightSet+0x67c>)
 80007ba:	f001 fbc7 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, W2_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <lightSet+0x678>)
 80007c6:	f001 fbc1 	bl	8001f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, T1_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <lightSet+0x678>)
 80007d2:	f001 fbbb 	bl	8001f4c <HAL_GPIO_WritePin>
		state = 'x';
 80007d6:	2378      	movs	r3, #120	; 0x78
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	e001      	b.n	80007e0 <lightSet+0x66c>
	}
	else{
		//Failsafe mode is default, if this were an actual intersection, this would be necessary for safety purposes
		state = 'x';
 80007dc:	2378      	movs	r3, #120	; 0x78
 80007de:	71fb      	strb	r3, [r7, #7]
	}

	return state;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40010800 	.word	0x40010800
 80007f0:	40010c00 	.word	0x40010c00

080007f4 <periodSet>:
/**
 This function sets the amount of time each light state will be active
 Can also accelerate the light by a factor of 1x - 100x
 */
int periodSet(char state, int acceleration)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
	int period;

	if (state == 'a'){//4 way red
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b61      	cmp	r3, #97	; 0x61
 8000804:	d103      	bne.n	800080e <periodSet+0x1a>
		period = 2000;
 8000806:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	e063      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'b'){//primary turning
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b62      	cmp	r3, #98	; 0x62
 8000812:	d103      	bne.n	800081c <periodSet+0x28>
		period = 20500;
 8000814:	f245 0314 	movw	r3, #20500	; 0x5014
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	e05c      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'c'){//primary green + walk
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b63      	cmp	r3, #99	; 0x63
 8000820:	d103      	bne.n	800082a <periodSet+0x36>
		period = 40500;
 8000822:	f649 6334 	movw	r3, #40500	; 0x9e34
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e055      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'd'){//primary Green
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b64      	cmp	r3, #100	; 0x64
 800082e:	d103      	bne.n	8000838 <periodSet+0x44>
		period = 6000;
 8000830:	f241 7370 	movw	r3, #6000	; 0x1770
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e04e      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'e'){//primary yellow
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b65      	cmp	r3, #101	; 0x65
 800083c:	d103      	bne.n	8000846 <periodSet+0x52>
		period = 3500;
 800083e:	f640 53ac 	movw	r3, #3500	; 0xdac
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e047      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'f'){//4 way red
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b66      	cmp	r3, #102	; 0x66
 800084a:	d103      	bne.n	8000854 <periodSet+0x60>
		period = 2000;
 800084c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e040      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'g'){//secondary green + walk
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b67      	cmp	r3, #103	; 0x67
 8000858:	d103      	bne.n	8000862 <periodSet+0x6e>
		period = 28500;
 800085a:	f646 7354 	movw	r3, #28500	; 0x6f54
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	e039      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'h'){//secondary green
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b68      	cmp	r3, #104	; 0x68
 8000866:	d103      	bne.n	8000870 <periodSet+0x7c>
		period = 6000;
 8000868:	f241 7370 	movw	r3, #6000	; 0x1770
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e032      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'i'){//secondary yellow
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b69      	cmp	r3, #105	; 0x69
 8000874:	d103      	bne.n	800087e <periodSet+0x8a>
		period = 3500;
 8000876:	f640 53ac 	movw	r3, #3500	; 0xdac
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e02b      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'm'){
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b6d      	cmp	r3, #109	; 0x6d
 8000882:	d102      	bne.n	800088a <periodSet+0x96>
		period = 100;
 8000884:	2364      	movs	r3, #100	; 0x64
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	e025      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'n'){
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b6e      	cmp	r3, #110	; 0x6e
 800088e:	d102      	bne.n	8000896 <periodSet+0xa2>
		period = 100;
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e01f      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'o'){
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b6f      	cmp	r3, #111	; 0x6f
 800089a:	d102      	bne.n	80008a2 <periodSet+0xae>
		period = 100;
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e019      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'p'){
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b70      	cmp	r3, #112	; 0x70
 80008a6:	d102      	bne.n	80008ae <periodSet+0xba>
		period = 100;
 80008a8:	2364      	movs	r3, #100	; 0x64
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	e013      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'x'){//time on fsm
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b78      	cmp	r3, #120	; 0x78
 80008b2:	d103      	bne.n	80008bc <periodSet+0xc8>
		period = 1500;
 80008b4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	e00c      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'y'){//time off fsm
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b79      	cmp	r3, #121	; 0x79
 80008c0:	d103      	bne.n	80008ca <periodSet+0xd6>
		period = 500;
 80008c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	e005      	b.n	80008d6 <periodSet+0xe2>
	}

	else if (state == 'z'){//IIT mode time
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b7a      	cmp	r3, #122	; 0x7a
 80008ce:	d102      	bne.n	80008d6 <periodSet+0xe2>
		period = 3000;
 80008d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008d4:	60fb      	str	r3, [r7, #12]

	}


	return period / acceleration;//adding acceleration for atm
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f000 ffc4 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f88e 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 f91c 	bl	8000b30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f8:	f000 f8c6 	bl	8000a88 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008fc:	f000 f8ee 	bl	8000adc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */



  transmitText("\x1b[2J");//clear screen
 8000900:	482b      	ldr	r0, [pc, #172]	; (80009b0 <main+0xc8>)
 8000902:	f000 f977 	bl	8000bf4 <transmitText>
  transmitText("\x1b[0;0H");//go to top
 8000906:	482b      	ldr	r0, [pc, #172]	; (80009b4 <main+0xcc>)
 8000908:	f000 f974 	bl	8000bf4 <transmitText>
  transmitText("TRAFFIC LIGHT CONTROLLER\r\n");
 800090c:	482a      	ldr	r0, [pc, #168]	; (80009b8 <main+0xd0>)
 800090e:	f000 f971 	bl	8000bf4 <transmitText>
  HAL_Delay(2000);
 8000912:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000916:	f000 ffe1 	bl	80018dc <HAL_Delay>

  //Formats the screen to show counter and create a scroll window
  transmitText("\x1b[2J");//clear screen
 800091a:	4825      	ldr	r0, [pc, #148]	; (80009b0 <main+0xc8>)
 800091c:	f000 f96a 	bl	8000bf4 <transmitText>
  transmitText("\x1b[0;0H");//go to top
 8000920:	4824      	ldr	r0, [pc, #144]	; (80009b4 <main+0xcc>)
 8000922:	f000 f967 	bl	8000bf4 <transmitText>
  transmitText("Mode: Initialization");
 8000926:	4825      	ldr	r0, [pc, #148]	; (80009bc <main+0xd4>)
 8000928:	f000 f964 	bl	8000bf4 <transmitText>
  transmitText("\x1b[9;0H");//go to row 9
 800092c:	4824      	ldr	r0, [pc, #144]	; (80009c0 <main+0xd8>)
 800092e:	f000 f961 	bl	8000bf4 <transmitText>
  transmitText("Enter \"help\" for a list of commands");
 8000932:	4824      	ldr	r0, [pc, #144]	; (80009c4 <main+0xdc>)
 8000934:	f000 f95e 	bl	8000bf4 <transmitText>
  transmitText("\x1b[10;r");//making a scroll window
 8000938:	4823      	ldr	r0, [pc, #140]	; (80009c8 <main+0xe0>)
 800093a:	f000 f95b 	bl	8000bf4 <transmitText>
  transmitText("\x1b[10;0H");// go to scroll window
 800093e:	4823      	ldr	r0, [pc, #140]	; (80009cc <main+0xe4>)
 8000940:	f000 f958 	bl	8000bf4 <transmitText>

  transmitText("\n-> ");
 8000944:	4822      	ldr	r0, [pc, #136]	; (80009d0 <main+0xe8>)
 8000946:	f000 f955 	bl	8000bf4 <transmitText>
  transmitText("\x1b[?25h");//show cursor
 800094a:	4822      	ldr	r0, [pc, #136]	; (80009d4 <main+0xec>)
 800094c:	f000 f952 	bl	8000bf4 <transmitText>
  transmitText("\x1b[s");//save cursor
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <main+0xf0>)
 8000952:	f000 f94f 	bl	8000bf4 <transmitText>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000956:	f002 ff39 	bl	80037cc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &CommandQueue_attributes);
 800095a:	4a20      	ldr	r2, [pc, #128]	; (80009dc <main+0xf4>)
 800095c:	2102      	movs	r1, #2
 800095e:	2001      	movs	r0, #1
 8000960:	f003 f872 	bl	8003a48 <osMessageQueueNew>
 8000964:	4603      	mov	r3, r0
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <main+0xf8>)
 8000968:	6013      	str	r3, [r2, #0]

  /* creation of MessageQueue */
  MessageQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &MessageQueue_attributes);
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <main+0xfc>)
 800096c:	2102      	movs	r1, #2
 800096e:	2001      	movs	r0, #1
 8000970:	f003 f86a 	bl	8003a48 <osMessageQueueNew>
 8000974:	4603      	mov	r3, r0
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <main+0x100>)
 8000978:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StateController */
  StateControllerHandle = osThreadNew(StartStateController, NULL, &StateController_attributes);
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <main+0x104>)
 800097c:	2100      	movs	r1, #0
 800097e:	481c      	ldr	r0, [pc, #112]	; (80009f0 <main+0x108>)
 8000980:	f002 ff8a 	bl	8003898 <osThreadNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <main+0x10c>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of CLI */
  CLIHandle = osThreadNew(StartCLI, NULL, &CLI_attributes);
 800098a:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <main+0x110>)
 800098c:	2100      	movs	r1, #0
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <main+0x114>)
 8000990:	f002 ff82 	bl	8003898 <osThreadNew>
 8000994:	4603      	mov	r3, r0
 8000996:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <main+0x118>)
 8000998:	6013      	str	r3, [r2, #0]

  /* creation of StatusUpdate */
  StatusUpdateHandle = osThreadNew(StartStatusUpdate, NULL, &StatusUpdate_attributes);
 800099a:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <main+0x11c>)
 800099c:	2100      	movs	r1, #0
 800099e:	481a      	ldr	r0, [pc, #104]	; (8000a08 <main+0x120>)
 80009a0:	f002 ff7a 	bl	8003898 <osThreadNew>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <main+0x124>)
 80009a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009aa:	f002 ff41 	bl	8003830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <main+0xc6>
 80009b0:	08007884 	.word	0x08007884
 80009b4:	0800788c 	.word	0x0800788c
 80009b8:	08007894 	.word	0x08007894
 80009bc:	080078b0 	.word	0x080078b0
 80009c0:	080078c8 	.word	0x080078c8
 80009c4:	080078d0 	.word	0x080078d0
 80009c8:	080078f4 	.word	0x080078f4
 80009cc:	080078fc 	.word	0x080078fc
 80009d0:	08007904 	.word	0x08007904
 80009d4:	0800790c 	.word	0x0800790c
 80009d8:	08007914 	.word	0x08007914
 80009dc:	08007e74 	.word	0x08007e74
 80009e0:	20000128 	.word	0x20000128
 80009e4:	08007e8c 	.word	0x08007e8c
 80009e8:	2000012c 	.word	0x2000012c
 80009ec:	08007e08 	.word	0x08007e08
 80009f0:	08000c31 	.word	0x08000c31
 80009f4:	2000011c 	.word	0x2000011c
 80009f8:	08007e2c 	.word	0x08007e2c
 80009fc:	08000d39 	.word	0x08000d39
 8000a00:	20000120 	.word	0x20000120
 8000a04:	08007e50 	.word	0x08007e50
 8000a08:	080012e5 	.word	0x080012e5
 8000a0c:	20000124 	.word	0x20000124

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b090      	sub	sp, #64	; 0x40
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	2228      	movs	r2, #40	; 0x28
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f005 fe10 	bl	8006644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0318 	add.w	r3, r7, #24
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fab2 	bl	8001fb0 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a52:	f000 fcc5 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fd20 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 fcb1 	bl	80013e0 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3740      	adds	r7, #64	; 0x40
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART2_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f002 f90a 	bl	8002cd8 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 fc89 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000094 	.word	0x20000094
 8000ad8:	40004400 	.word	0x40004400

08000adc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART3_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_USART3_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_USART3_UART_Init+0x4c>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART3_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART3_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART3_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART3_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART3_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART3_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART3_UART_Init+0x4c>)
 8000b14:	f002 f8e0 	bl	8002cd8 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f000 fc5f 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000d8 	.word	0x200000d8
 8000b2c:	40004800 	.word	0x40004800

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <MX_GPIO_Init+0xb8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <MX_GPIO_Init+0xb8>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <MX_GPIO_Init+0xb8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_GPIO_Init+0xb8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <MX_GPIO_Init+0xb8>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_GPIO_Init+0xb8>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_GPIO_Init+0xb8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <MX_GPIO_Init+0xb8>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_GPIO_Init+0xb8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|R2_Pin|T1_Pin|W1_Pin
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <MX_GPIO_Init+0xbc>)
 8000b94:	f001 f9da 	bl	8001f4c <HAL_GPIO_WritePin>
                          |W2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G1_Pin|G2_Pin|Y1_Pin|Y2_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b9e:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <MX_GPIO_Init+0xc0>)
 8000ba0:	f001 f9d4 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R1_Pin R2_Pin T1_Pin W1_Pin
                           W2_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|T1_Pin|W1_Pin
 8000ba4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000ba8:	613b      	str	r3, [r7, #16]
                          |W2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_GPIO_Init+0xbc>)
 8000bbe:	f001 f841 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : G1_Pin G2_Pin Y1_Pin Y2_Pin */
  GPIO_InitStruct.Pin = G1_Pin|G2_Pin|Y1_Pin|Y2_Pin;
 8000bc2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_GPIO_Init+0xc0>)
 8000bdc:	f001 f832 	bl	8001c44 <HAL_GPIO_Init>

}
 8000be0:	bf00      	nop
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	40010c00 	.word	0x40010c00

08000bf4 <transmitText>:

/* USER CODE BEGIN 4 */
void transmitText(const char* str){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09c      	sub	sp, #112	; 0x70
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

		uint8_t cliBufferTX[100];

		strcpy((char *)cliBufferTX, (char *) str);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 fd26 	bl	8006654 <strcpy>
		HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff faa9 	bl	8000164 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f107 010c 	add.w	r1, r7, #12
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <transmitText+0x38>)
 8000c20:	f002 f8a7 	bl	8002d72 <HAL_UART_Transmit>
}
 8000c24:	bf00      	nop
 8000c26:	3770      	adds	r7, #112	; 0x70
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000094 	.word	0x20000094

08000c30 <StartStateController>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartStateController */
void StartStateController(void *argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
		char state = 'z';
 8000c38:	237a      	movs	r3, #122	; 0x7a
 8000c3a:	75fb      	strb	r3, [r7, #23]
		uint16_t cmd = 111;
 8000c3c:	236f      	movs	r3, #111	; 0x6f
 8000c3e:	817b      	strh	r3, [r7, #10]
		uint16_t msg = cmd;
 8000c40:	897b      	ldrh	r3, [r7, #10]
 8000c42:	813b      	strh	r3, [r7, #8]
		int period = 500;
 8000c44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c48:	60fb      	str	r3, [r7, #12]
		int acceleration = 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	613b      	str	r3, [r7, #16]
		/* Infinite loop */
		for(;;)
		{

			if(osMessageQueueGet(CommandQueueHandle, &cmd, NULL, 0U) == osOK)
 8000c4e:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <StartStateController+0x100>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	f107 010a 	add.w	r1, r7, #10
 8000c56:	2300      	movs	r3, #0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f002 ffef 	bl	8003c3c <osMessageQueueGet>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d147      	bne.n	8000cf4 <StartStateController+0xc4>
			{
				if(cmd != msg && cmd > 100)
 8000c64:	897a      	ldrh	r2, [r7, #10]
 8000c66:	893b      	ldrh	r3, [r7, #8]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d03a      	beq.n	8000ce2 <StartStateController+0xb2>
 8000c6c:	897b      	ldrh	r3, [r7, #10]
 8000c6e:	2b64      	cmp	r3, #100	; 0x64
 8000c70:	d937      	bls.n	8000ce2 <StartStateController+0xb2>
				{
					if(cmd == 101)//Failsafe mode
 8000c72:	897b      	ldrh	r3, [r7, #10]
 8000c74:	2b65      	cmp	r3, #101	; 0x65
 8000c76:	d104      	bne.n	8000c82 <StartStateController+0x52>
					{
						state = 'x';
 8000c78:	2378      	movs	r3, #120	; 0x78
 8000c7a:	75fb      	strb	r3, [r7, #23]
						acceleration = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	e02c      	b.n	8000cdc <StartStateController+0xac>
					}
					else if(cmd == 102)//static cycle mode
 8000c82:	897b      	ldrh	r3, [r7, #10]
 8000c84:	2b66      	cmp	r3, #102	; 0x66
 8000c86:	d102      	bne.n	8000c8e <StartStateController+0x5e>
					{
						state = 'a';
 8000c88:	2361      	movs	r3, #97	; 0x61
 8000c8a:	75fb      	strb	r3, [r7, #23]
 8000c8c:	e026      	b.n	8000cdc <StartStateController+0xac>
					}
					else if(cmd == 105)//Low Volume Mode: Runs twice as fast so nobody is waiting long
 8000c8e:	897b      	ldrh	r3, [r7, #10]
 8000c90:	2b69      	cmp	r3, #105	; 0x69
 8000c92:	d104      	bne.n	8000c9e <StartStateController+0x6e>
					{
						acceleration = 2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
						state = 'a';
 8000c98:	2361      	movs	r3, #97	; 0x61
 8000c9a:	75fb      	strb	r3, [r7, #23]
 8000c9c:	e01e      	b.n	8000cdc <StartStateController+0xac>

					}
					else if(cmd == 106)//Fixed Cycle Mode
 8000c9e:	897b      	ldrh	r3, [r7, #10]
 8000ca0:	2b6a      	cmp	r3, #106	; 0x6a
 8000ca2:	d104      	bne.n	8000cae <StartStateController+0x7e>
					{
						state = 'a';
 8000ca4:	2361      	movs	r3, #97	; 0x61
 8000ca6:	75fb      	strb	r3, [r7, #23]
						acceleration = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	e016      	b.n	8000cdc <StartStateController+0xac>

					}
					else if(cmd == 107)//pri ped
 8000cae:	897b      	ldrh	r3, [r7, #10]
 8000cb0:	2b6b      	cmp	r3, #107	; 0x6b
 8000cb2:	d102      	bne.n	8000cba <StartStateController+0x8a>
					{
						state = 'm';
 8000cb4:	236d      	movs	r3, #109	; 0x6d
 8000cb6:	75fb      	strb	r3, [r7, #23]
 8000cb8:	e010      	b.n	8000cdc <StartStateController+0xac>

					}
					else if(cmd == 108)//sec ped
 8000cba:	897b      	ldrh	r3, [r7, #10]
 8000cbc:	2b6c      	cmp	r3, #108	; 0x6c
 8000cbe:	d102      	bne.n	8000cc6 <StartStateController+0x96>
					{
						state = 'n';
 8000cc0:	236e      	movs	r3, #110	; 0x6e
 8000cc2:	75fb      	strb	r3, [r7, #23]
 8000cc4:	e00a      	b.n	8000cdc <StartStateController+0xac>

					}
					else if(cmd == 109)//pri erv
 8000cc6:	897b      	ldrh	r3, [r7, #10]
 8000cc8:	2b6d      	cmp	r3, #109	; 0x6d
 8000cca:	d102      	bne.n	8000cd2 <StartStateController+0xa2>
					{
						state = 'o';
 8000ccc:	236f      	movs	r3, #111	; 0x6f
 8000cce:	75fb      	strb	r3, [r7, #23]
 8000cd0:	e004      	b.n	8000cdc <StartStateController+0xac>

					}
					else if(cmd == 110)//sec erv
 8000cd2:	897b      	ldrh	r3, [r7, #10]
 8000cd4:	2b6e      	cmp	r3, #110	; 0x6e
 8000cd6:	d101      	bne.n	8000cdc <StartStateController+0xac>
					{
						state = 'p';
 8000cd8:	2370      	movs	r3, #112	; 0x70
 8000cda:	75fb      	strb	r3, [r7, #23]

					}
					msg = cmd;
 8000cdc:	897b      	ldrh	r3, [r7, #10]
 8000cde:	813b      	strh	r3, [r7, #8]
 8000ce0:	e008      	b.n	8000cf4 <StartStateController+0xc4>
				}
				else if(cmd != msg && cmd > 0)
 8000ce2:	897a      	ldrh	r2, [r7, #10]
 8000ce4:	893b      	ldrh	r3, [r7, #8]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d004      	beq.n	8000cf4 <StartStateController+0xc4>
 8000cea:	897b      	ldrh	r3, [r7, #10]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <StartStateController+0xc4>
				{
					acceleration = cmd;
 8000cf0:	897b      	ldrh	r3, [r7, #10]
 8000cf2:	613b      	str	r3, [r7, #16]
				}
			}

			if(osMessageQueuePut(MessageQueueHandle, &msg, 1U, 0U)!= osOK)
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <StartStateController+0x104>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	f107 0108 	add.w	r1, r7, #8
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f002 ff28 	bl	8003b54 <osMessageQueuePut>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <StartStateController+0xde>
			{
				Error_Handler();
 8000d0a:	f000 fb69 	bl	80013e0 <Error_Handler>
			}

			period = periodSet(state, acceleration);
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
 8000d10:	6939      	ldr	r1, [r7, #16]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fd6e 	bl	80007f4 <periodSet>
 8000d18:	60f8      	str	r0, [r7, #12]
			state = lightSet(state);
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fa29 	bl	8000174 <lightSet>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]



			osDelay(period);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fe5f 	bl	80039ec <osDelay>
			if(osMessageQueueGet(CommandQueueHandle, &cmd, NULL, 0U) == osOK)
 8000d2e:	e78e      	b.n	8000c4e <StartStateController+0x1e>
 8000d30:	20000128 	.word	0x20000128
 8000d34:	2000012c 	.word	0x2000012c

08000d38 <StartCLI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCLI */
void StartCLI(void *argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0a0      	sub	sp, #128	; 0x80
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCLI */

	int x = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint16_t cmd = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e


  /* Infinite loop */
  for(;;)
  {
	  if(HAL_UART_Receive(&huart2, cliBufferRX, 1, 300) == HAL_OK)
 8000d4a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d4e:	2201      	movs	r2, #1
 8000d50:	49a0      	ldr	r1, [pc, #640]	; (8000fd4 <StartCLI+0x29c>)
 8000d52:	48a1      	ldr	r0, [pc, #644]	; (8000fd8 <StartCLI+0x2a0>)
 8000d54:	f002 f89f 	bl	8002e96 <HAL_UART_Receive>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f5      	bne.n	8000d4a <StartCLI+0x12>
	  		{
	  			transmitText("\x1b[u");//return cursor
 8000d5e:	489f      	ldr	r0, [pc, #636]	; (8000fdc <StartCLI+0x2a4>)
 8000d60:	f7ff ff48 	bl	8000bf4 <transmitText>
	  			transmitText("\x1b[?25h");//show cursor
 8000d64:	489e      	ldr	r0, [pc, #632]	; (8000fe0 <StartCLI+0x2a8>)
 8000d66:	f7ff ff45 	bl	8000bf4 <transmitText>

	  			if(cliBufferRX[0] == '\b')
 8000d6a:	4b9a      	ldr	r3, [pc, #616]	; (8000fd4 <StartCLI+0x29c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d103      	bne.n	8000d7a <StartCLI+0x42>
	  			{
	  				transmitText("\b \b");
 8000d72:	489c      	ldr	r0, [pc, #624]	; (8000fe4 <StartCLI+0x2ac>)
 8000d74:	f7ff ff3e 	bl	8000bf4 <transmitText>
 8000d78:	e009      	b.n	8000d8e <StartCLI+0x56>

	  			}
	  			else
	  			{
	  				save[x] = cliBufferRX[0];
 8000d7a:	4b96      	ldr	r3, [pc, #600]	; (8000fd4 <StartCLI+0x29c>)
 8000d7c:	7819      	ldrb	r1, [r3, #0]
 8000d7e:	4a9a      	ldr	r2, [pc, #616]	; (8000fe8 <StartCLI+0x2b0>)
 8000d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d82:	4413      	add	r3, r2
 8000d84:	460a      	mov	r2, r1
 8000d86:	701a      	strb	r2, [r3, #0]
	  				transmitText(cliBufferRX);
 8000d88:	4892      	ldr	r0, [pc, #584]	; (8000fd4 <StartCLI+0x29c>)
 8000d8a:	f7ff ff33 	bl	8000bf4 <transmitText>

	  			}

	  			transmitText("\x1b[s");//save cursor
 8000d8e:	4897      	ldr	r0, [pc, #604]	; (8000fec <StartCLI+0x2b4>)
 8000d90:	f7ff ff30 	bl	8000bf4 <transmitText>

	  			//backspace
	  			if(cliBufferRX[0] == '\b')
 8000d94:	4b8f      	ldr	r3, [pc, #572]	; (8000fd4 <StartCLI+0x29c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d103      	bne.n	8000da4 <StartCLI+0x6c>
	  			{
	  				x--;
 8000d9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000da2:	e002      	b.n	8000daa <StartCLI+0x72>
	  			}
	  			else
	  			{
	  				x++;
 8000da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000da6:	3301      	adds	r3, #1
 8000da8:	67fb      	str	r3, [r7, #124]	; 0x7c
	  			}


	  			if(cliBufferRX[0] == '\r')//when user hits enter
 8000daa:	4b8a      	ldr	r3, [pc, #552]	; (8000fd4 <StartCLI+0x29c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b0d      	cmp	r3, #13
 8000db0:	d1cb      	bne.n	8000d4a <StartCLI+0x12>
	  			{
	  				transmitText("\r\n");
 8000db2:	488f      	ldr	r0, [pc, #572]	; (8000ff0 <StartCLI+0x2b8>)
 8000db4:	f7ff ff1e 	bl	8000bf4 <transmitText>
	  				save[x-1] = '\0';
 8000db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	4a8a      	ldr	r2, [pc, #552]	; (8000fe8 <StartCLI+0x2b0>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	54d1      	strb	r1, [r2, r3]
	  				while(x < 100 && save[x] != '\0')//nulling out the rest of the buffer
 8000dc2:	e007      	b.n	8000dd4 <StartCLI+0x9c>
	  				{
	  					save[x] = '\0';
 8000dc4:	4a88      	ldr	r2, [pc, #544]	; (8000fe8 <StartCLI+0x2b0>)
 8000dc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dc8:	4413      	add	r3, r2
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
	  					x++;
 8000dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
	  				while(x < 100 && save[x] != '\0')//nulling out the rest of the buffer
 8000dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dd6:	2b63      	cmp	r3, #99	; 0x63
 8000dd8:	dc05      	bgt.n	8000de6 <StartCLI+0xae>
 8000dda:	4a83      	ldr	r2, [pc, #524]	; (8000fe8 <StartCLI+0x2b0>)
 8000ddc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1ee      	bne.n	8000dc4 <StartCLI+0x8c>
	  				}

	  				strcpy((char *)get, (const char *)save);//getting command
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	497f      	ldr	r1, [pc, #508]	; (8000fe8 <StartCLI+0x2b0>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f005 fc31 	bl	8006654 <strcpy>
	  				arg = strtok((char *)save, " ");
 8000df2:	4980      	ldr	r1, [pc, #512]	; (8000ff4 <StartCLI+0x2bc>)
 8000df4:	487c      	ldr	r0, [pc, #496]	; (8000fe8 <StartCLI+0x2b0>)
 8000df6:	f005 fc35 	bl	8006664 <strtok>
 8000dfa:	6778      	str	r0, [r7, #116]	; 0x74
	  				cmdStr = arg;
 8000dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dfe:	673b      	str	r3, [r7, #112]	; 0x70
	  				arg = strtok(NULL, " ");
 8000e00:	497c      	ldr	r1, [pc, #496]	; (8000ff4 <StartCLI+0x2bc>)
 8000e02:	2000      	movs	r0, #0
 8000e04:	f005 fc2e 	bl	8006664 <strtok>
 8000e08:	6778      	str	r0, [r7, #116]	; 0x74

	  				if(arg == NULL && strcmp((char *)cmdStr, "help") == 0)
 8000e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d12b      	bne.n	8000e68 <StartCLI+0x130>
 8000e10:	4979      	ldr	r1, [pc, #484]	; (8000ff8 <StartCLI+0x2c0>)
 8000e12:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000e14:	f7ff f99c 	bl	8000150 <strcmp>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d124      	bne.n	8000e68 <StartCLI+0x130>
	  				{
	  					cmd = 103;
 8000e1e:	2367      	movs	r3, #103	; 0x67
 8000e20:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  					transmitText("1. \"mode fsm\" switches controller to Failsafe mode\r\n");
 8000e24:	4875      	ldr	r0, [pc, #468]	; (8000ffc <StartCLI+0x2c4>)
 8000e26:	f7ff fee5 	bl	8000bf4 <transmitText>
	  					transmitText("\n2. \"mode scm\" switches controller to Static Cycle mode\r\n");
 8000e2a:	4875      	ldr	r0, [pc, #468]	; (8001000 <StartCLI+0x2c8>)
 8000e2c:	f7ff fee2 	bl	8000bf4 <transmitText>
	  					transmitText("\n3. \"atm x\" enters accelerated test mode with multiplication factor x, when 0 < x < 101\r\n");
 8000e30:	4874      	ldr	r0, [pc, #464]	; (8001004 <StartCLI+0x2cc>)
 8000e32:	f7ff fedf 	bl	8000bf4 <transmitText>
	  					transmitText("\n4. \"mode lvm\" switches controller to Low Volume Mode, which means no turning light\r\n");
 8000e36:	4874      	ldr	r0, [pc, #464]	; (8001008 <StartCLI+0x2d0>)
 8000e38:	f7ff fedc 	bl	8000bf4 <transmitText>
	  					transmitText("\n5. \"mode fcm\" switched controller to Fixed Cycle Mode, and can now accept pedestrian and ERV inputs\r\n");
 8000e3c:	4873      	ldr	r0, [pc, #460]	; (800100c <StartCLI+0x2d4>)
 8000e3e:	f7ff fed9 	bl	8000bf4 <transmitText>
	  					transmitText("\n6. \"clear\" clears the scroll screen of its command history and brings the cursor back to the top\r\n");
 8000e42:	4873      	ldr	r0, [pc, #460]	; (8001010 <StartCLI+0x2d8>)
 8000e44:	f7ff fed6 	bl	8000bf4 <transmitText>
	  					transmitText("FSM Commands:\r\n");
 8000e48:	4872      	ldr	r0, [pc, #456]	; (8001014 <StartCLI+0x2dc>)
 8000e4a:	f7ff fed3 	bl	8000bf4 <transmitText>
	  					transmitText(" - event pp: Primary Pedestrian\r\n");
 8000e4e:	4872      	ldr	r0, [pc, #456]	; (8001018 <StartCLI+0x2e0>)
 8000e50:	f7ff fed0 	bl	8000bf4 <transmitText>
	  					transmitText(" - event sp: Secondary Pedestrian\r\n");
 8000e54:	4871      	ldr	r0, [pc, #452]	; (800101c <StartCLI+0x2e4>)
 8000e56:	f7ff fecd 	bl	8000bf4 <transmitText>
	  					transmitText(" - event pev: Primary Emergency Vehicle\r\n");
 8000e5a:	4871      	ldr	r0, [pc, #452]	; (8001020 <StartCLI+0x2e8>)
 8000e5c:	f7ff feca 	bl	8000bf4 <transmitText>
	  					transmitText(" - event sev: Secondary Emergency Vehicle\r\n");
 8000e60:	4870      	ldr	r0, [pc, #448]	; (8001024 <StartCLI+0x2ec>)
 8000e62:	f7ff fec7 	bl	8000bf4 <transmitText>
 8000e66:	e1fb      	b.n	8001260 <StartCLI+0x528>
	  				}
	  				else if(arg == NULL && strcmp((char *)cmdStr, "clear") == 0)
 8000e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d130      	bne.n	8000ed0 <StartCLI+0x198>
 8000e6e:	496e      	ldr	r1, [pc, #440]	; (8001028 <StartCLI+0x2f0>)
 8000e70:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000e72:	f7ff f96d 	bl	8000150 <strcmp>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d129      	bne.n	8000ed0 <StartCLI+0x198>
	  				{
	  					cmd = 104;
 8000e7c:	2368      	movs	r3, #104	; 0x68
 8000e7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  					transmitText("\x1b[2J");//clear screen
 8000e82:	486a      	ldr	r0, [pc, #424]	; (800102c <StartCLI+0x2f4>)
 8000e84:	f7ff feb6 	bl	8000bf4 <transmitText>
	  					transmitText("\x1b[0;0H");//go to top
 8000e88:	4869      	ldr	r0, [pc, #420]	; (8001030 <StartCLI+0x2f8>)
 8000e8a:	f7ff feb3 	bl	8000bf4 <transmitText>
	  					transmitText("Mode: ");
 8000e8e:	4869      	ldr	r0, [pc, #420]	; (8001034 <StartCLI+0x2fc>)
 8000e90:	f7ff feb0 	bl	8000bf4 <transmitText>
	  					transmitText("\x1b[9;0H");//go to row 9
 8000e94:	4868      	ldr	r0, [pc, #416]	; (8001038 <StartCLI+0x300>)
 8000e96:	f7ff fead 	bl	8000bf4 <transmitText>
	  					transmitText("Enter \"help\" for a list of commands");
 8000e9a:	4868      	ldr	r0, [pc, #416]	; (800103c <StartCLI+0x304>)
 8000e9c:	f7ff feaa 	bl	8000bf4 <transmitText>
	  					transmitText("\x1b[10;r");//make a scroll window
 8000ea0:	4867      	ldr	r0, [pc, #412]	; (8001040 <StartCLI+0x308>)
 8000ea2:	f7ff fea7 	bl	8000bf4 <transmitText>
	  					transmitText("\x1b[10;0H");//go to the scroll window
 8000ea6:	4867      	ldr	r0, [pc, #412]	; (8001044 <StartCLI+0x30c>)
 8000ea8:	f7ff fea4 	bl	8000bf4 <transmitText>
	  					transmitText("\x1b[?25h");//show cursor
 8000eac:	484c      	ldr	r0, [pc, #304]	; (8000fe0 <StartCLI+0x2a8>)
 8000eae:	f7ff fea1 	bl	8000bf4 <transmitText>
	  					if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8000eb2:	4b65      	ldr	r3, [pc, #404]	; (8001048 <StartCLI+0x310>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000eba:	2300      	movs	r3, #0
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f002 fe49 	bl	8003b54 <osMessageQueuePut>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 81cb 	beq.w	8001260 <StartCLI+0x528>
	  					{
	  						Error_Handler();
 8000eca:	f000 fa89 	bl	80013e0 <Error_Handler>
	  					if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8000ece:	e1c7      	b.n	8001260 <StartCLI+0x528>
	  					}
	  				}
	  				else if(cmdStr == NULL)
 8000ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <StartCLI+0x1a6>
	  				{
	  					cmd = 103;
 8000ed6:	2367      	movs	r3, #103	; 0x67
 8000ed8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000edc:	e1c0      	b.n	8001260 <StartCLI+0x528>
	  				}
	  				else if(strtok(NULL, " ") == NULL)
 8000ede:	4945      	ldr	r1, [pc, #276]	; (8000ff4 <StartCLI+0x2bc>)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f005 fbbf 	bl	8006664 <strtok>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f040 81ab 	bne.w	8001244 <StartCLI+0x50c>
	  				{
	  					if(atoi(arg) >= 1 && atoi(arg) <= 100 && strcmp((char *)cmdStr, "atm") == 0)
 8000eee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000ef0:	f005 fb6c 	bl	80065cc <atoi>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	dd25      	ble.n	8000f46 <StartCLI+0x20e>
 8000efa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000efc:	f005 fb66 	bl	80065cc <atoi>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	dc1f      	bgt.n	8000f46 <StartCLI+0x20e>
 8000f06:	4951      	ldr	r1, [pc, #324]	; (800104c <StartCLI+0x314>)
 8000f08:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000f0a:	f7ff f921 	bl	8000150 <strcmp>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d118      	bne.n	8000f46 <StartCLI+0x20e>
	  					{
	  						cmd = (uint16_t)atoi(arg);
 8000f14:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f16:	f005 fb59 	bl	80065cc <atoi>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Entering accelerated test mode.\r\n");
 8000f22:	484b      	ldr	r0, [pc, #300]	; (8001050 <StartCLI+0x318>)
 8000f24:	f7ff fe66 	bl	8000bf4 <transmitText>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8000f28:	4b47      	ldr	r3, [pc, #284]	; (8001048 <StartCLI+0x310>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000f30:	2300      	movs	r3, #0
 8000f32:	2201      	movs	r2, #1
 8000f34:	f002 fe0e 	bl	8003b54 <osMessageQueuePut>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8190 	beq.w	8001260 <StartCLI+0x528>
	  						{
	  							Error_Handler();
 8000f40:	f000 fa4e 	bl	80013e0 <Error_Handler>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8000f44:	e18c      	b.n	8001260 <StartCLI+0x528>
	  						}
	  					}
	  					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "fsm") == 0)
 8000f46:	4943      	ldr	r1, [pc, #268]	; (8001054 <StartCLI+0x31c>)
 8000f48:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000f4a:	f7ff f901 	bl	8000150 <strcmp>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d11b      	bne.n	8000f8c <StartCLI+0x254>
 8000f54:	4940      	ldr	r1, [pc, #256]	; (8001058 <StartCLI+0x320>)
 8000f56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f58:	f7ff f8fa 	bl	8000150 <strcmp>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d114      	bne.n	8000f8c <StartCLI+0x254>
	  					{
	  						cmd = 101;
 8000f62:	2365      	movs	r3, #101	; 0x65
 8000f64:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Switching to Failsafe mode.\r\n");
 8000f68:	483c      	ldr	r0, [pc, #240]	; (800105c <StartCLI+0x324>)
 8000f6a:	f7ff fe43 	bl	8000bf4 <transmitText>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8000f6e:	4b36      	ldr	r3, [pc, #216]	; (8001048 <StartCLI+0x310>)
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000f76:	2300      	movs	r3, #0
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f002 fdeb 	bl	8003b54 <osMessageQueuePut>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 816d 	beq.w	8001260 <StartCLI+0x528>
	  						{
	  							Error_Handler();
 8000f86:	f000 fa2b 	bl	80013e0 <Error_Handler>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8000f8a:	e169      	b.n	8001260 <StartCLI+0x528>
	  						}
	  					}
	  					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "scm") == 0)
 8000f8c:	4931      	ldr	r1, [pc, #196]	; (8001054 <StartCLI+0x31c>)
 8000f8e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000f90:	f7ff f8de 	bl	8000150 <strcmp>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d166      	bne.n	8001068 <StartCLI+0x330>
 8000f9a:	4931      	ldr	r1, [pc, #196]	; (8001060 <StartCLI+0x328>)
 8000f9c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f9e:	f7ff f8d7 	bl	8000150 <strcmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d15f      	bne.n	8001068 <StartCLI+0x330>
	  					{
	  						cmd = 102;
 8000fa8:	2366      	movs	r3, #102	; 0x66
 8000faa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Switching to Static Cycle mode.\r\n");
 8000fae:	482d      	ldr	r0, [pc, #180]	; (8001064 <StartCLI+0x32c>)
 8000fb0:	f7ff fe20 	bl	8000bf4 <transmitText>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <StartCLI+0x310>)
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f002 fdc8 	bl	8003b54 <osMessageQueuePut>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 814a 	beq.w	8001260 <StartCLI+0x528>
	  						{
	  							Error_Handler();
 8000fcc:	f000 fa08 	bl	80013e0 <Error_Handler>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8000fd0:	e146      	b.n	8001260 <StartCLI+0x528>
 8000fd2:	bf00      	nop
 8000fd4:	20000130 	.word	0x20000130
 8000fd8:	20000094 	.word	0x20000094
 8000fdc:	08007918 	.word	0x08007918
 8000fe0:	0800790c 	.word	0x0800790c
 8000fe4:	0800791c 	.word	0x0800791c
 8000fe8:	2000013c 	.word	0x2000013c
 8000fec:	08007914 	.word	0x08007914
 8000ff0:	08007920 	.word	0x08007920
 8000ff4:	08007924 	.word	0x08007924
 8000ff8:	08007928 	.word	0x08007928
 8000ffc:	08007930 	.word	0x08007930
 8001000:	08007968 	.word	0x08007968
 8001004:	080079a4 	.word	0x080079a4
 8001008:	08007a00 	.word	0x08007a00
 800100c:	08007a58 	.word	0x08007a58
 8001010:	08007ac0 	.word	0x08007ac0
 8001014:	08007b24 	.word	0x08007b24
 8001018:	08007b34 	.word	0x08007b34
 800101c:	08007b58 	.word	0x08007b58
 8001020:	08007b7c 	.word	0x08007b7c
 8001024:	08007ba8 	.word	0x08007ba8
 8001028:	08007bd4 	.word	0x08007bd4
 800102c:	08007884 	.word	0x08007884
 8001030:	0800788c 	.word	0x0800788c
 8001034:	08007bdc 	.word	0x08007bdc
 8001038:	080078c8 	.word	0x080078c8
 800103c:	080078d0 	.word	0x080078d0
 8001040:	080078f4 	.word	0x080078f4
 8001044:	080078fc 	.word	0x080078fc
 8001048:	20000128 	.word	0x20000128
 800104c:	08007be4 	.word	0x08007be4
 8001050:	08007be8 	.word	0x08007be8
 8001054:	08007c0c 	.word	0x08007c0c
 8001058:	08007c14 	.word	0x08007c14
 800105c:	08007c18 	.word	0x08007c18
 8001060:	08007c38 	.word	0x08007c38
 8001064:	08007c3c 	.word	0x08007c3c
	  						}
	  					}
	  					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "lvm") == 0)
 8001068:	498a      	ldr	r1, [pc, #552]	; (8001294 <StartCLI+0x55c>)
 800106a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800106c:	f7ff f870 	bl	8000150 <strcmp>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d11b      	bne.n	80010ae <StartCLI+0x376>
 8001076:	4988      	ldr	r1, [pc, #544]	; (8001298 <StartCLI+0x560>)
 8001078:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800107a:	f7ff f869 	bl	8000150 <strcmp>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d114      	bne.n	80010ae <StartCLI+0x376>
	  					{
	  						cmd = 105;
 8001084:	2369      	movs	r3, #105	; 0x69
 8001086:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Switching to Low Volume mode.\r\n");
 800108a:	4884      	ldr	r0, [pc, #528]	; (800129c <StartCLI+0x564>)
 800108c:	f7ff fdb2 	bl	8000bf4 <transmitText>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8001090:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <StartCLI+0x568>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8001098:	2300      	movs	r3, #0
 800109a:	2201      	movs	r2, #1
 800109c:	f002 fd5a 	bl	8003b54 <osMessageQueuePut>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 80dc 	beq.w	8001260 <StartCLI+0x528>
	  						{
	  							Error_Handler();
 80010a8:	f000 f99a 	bl	80013e0 <Error_Handler>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 80010ac:	e0d8      	b.n	8001260 <StartCLI+0x528>
	  						}
	  					}
	  					else if(strcmp((char *)cmdStr, "mode") == 0 && strcmp((char *)arg, "fcm") == 0)
 80010ae:	4979      	ldr	r1, [pc, #484]	; (8001294 <StartCLI+0x55c>)
 80010b0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80010b2:	f7ff f84d 	bl	8000150 <strcmp>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d11b      	bne.n	80010f4 <StartCLI+0x3bc>
 80010bc:	4979      	ldr	r1, [pc, #484]	; (80012a4 <StartCLI+0x56c>)
 80010be:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80010c0:	f7ff f846 	bl	8000150 <strcmp>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d114      	bne.n	80010f4 <StartCLI+0x3bc>
	  					{
	  						cmd = 106;
 80010ca:	236a      	movs	r3, #106	; 0x6a
 80010cc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Switching to Fixed Cycle mode.\r\n");
 80010d0:	4875      	ldr	r0, [pc, #468]	; (80012a8 <StartCLI+0x570>)
 80010d2:	f7ff fd8f 	bl	8000bf4 <transmitText>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 80010d6:	4b72      	ldr	r3, [pc, #456]	; (80012a0 <StartCLI+0x568>)
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 80010de:	2300      	movs	r3, #0
 80010e0:	2201      	movs	r2, #1
 80010e2:	f002 fd37 	bl	8003b54 <osMessageQueuePut>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80b9 	beq.w	8001260 <StartCLI+0x528>
	  						{
	  							Error_Handler();
 80010ee:	f000 f977 	bl	80013e0 <Error_Handler>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 80010f2:	e0b5      	b.n	8001260 <StartCLI+0x528>
	  						}
	  					}
		  				//FCM Commands, can only run in fixed cycle mode
		  				else if(strcmp((char *)cmdStr, "event") == 0 && strcmp((char *)arg, "pp") == 0 && cmd >= 106)//Pri ped
 80010f4:	496d      	ldr	r1, [pc, #436]	; (80012ac <StartCLI+0x574>)
 80010f6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80010f8:	f7ff f82a 	bl	8000150 <strcmp>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d11f      	bne.n	8001142 <StartCLI+0x40a>
 8001102:	496b      	ldr	r1, [pc, #428]	; (80012b0 <StartCLI+0x578>)
 8001104:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001106:	f7ff f823 	bl	8000150 <strcmp>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d118      	bne.n	8001142 <StartCLI+0x40a>
 8001110:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001114:	2b69      	cmp	r3, #105	; 0x69
 8001116:	d914      	bls.n	8001142 <StartCLI+0x40a>
		  				{
	  						cmd = 107;
 8001118:	236b      	movs	r3, #107	; 0x6b
 800111a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Primary Pedestrian input received\r\n");
 800111e:	4865      	ldr	r0, [pc, #404]	; (80012b4 <StartCLI+0x57c>)
 8001120:	f7ff fd68 	bl	8000bf4 <transmitText>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8001124:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <StartCLI+0x568>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 800112c:	2300      	movs	r3, #0
 800112e:	2201      	movs	r2, #1
 8001130:	f002 fd10 	bl	8003b54 <osMessageQueuePut>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8092 	beq.w	8001260 <StartCLI+0x528>
	  						{
	  							Error_Handler();
 800113c:	f000 f950 	bl	80013e0 <Error_Handler>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8001140:	e08e      	b.n	8001260 <StartCLI+0x528>
	  						}
		  				}
		  				else if(strcmp((char *)cmdStr, "event") == 0 && strcmp((char *)arg, "sp") == 0 && cmd >= 106)//sec ped
 8001142:	495a      	ldr	r1, [pc, #360]	; (80012ac <StartCLI+0x574>)
 8001144:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001146:	f7ff f803 	bl	8000150 <strcmp>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d11e      	bne.n	800118e <StartCLI+0x456>
 8001150:	4959      	ldr	r1, [pc, #356]	; (80012b8 <StartCLI+0x580>)
 8001152:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001154:	f7fe fffc 	bl	8000150 <strcmp>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d117      	bne.n	800118e <StartCLI+0x456>
 800115e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001162:	2b69      	cmp	r3, #105	; 0x69
 8001164:	d913      	bls.n	800118e <StartCLI+0x456>
		  				{
	  						cmd = 108;
 8001166:	236c      	movs	r3, #108	; 0x6c
 8001168:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Secondary Pedestrian input received\r\n");
 800116c:	4853      	ldr	r0, [pc, #332]	; (80012bc <StartCLI+0x584>)
 800116e:	f7ff fd41 	bl	8000bf4 <transmitText>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <StartCLI+0x568>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 800117a:	2300      	movs	r3, #0
 800117c:	2201      	movs	r2, #1
 800117e:	f002 fce9 	bl	8003b54 <osMessageQueuePut>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d06b      	beq.n	8001260 <StartCLI+0x528>
	  						{
	  							Error_Handler();
 8001188:	f000 f92a 	bl	80013e0 <Error_Handler>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 800118c:	e068      	b.n	8001260 <StartCLI+0x528>
	  						}
		  				}
		  				else if(strcmp((char *)cmdStr, "event") == 0 && strcmp((char *)arg, "pev") == 0 && cmd >= 106)//pri erv
 800118e:	4947      	ldr	r1, [pc, #284]	; (80012ac <StartCLI+0x574>)
 8001190:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001192:	f7fe ffdd 	bl	8000150 <strcmp>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d11e      	bne.n	80011da <StartCLI+0x4a2>
 800119c:	4948      	ldr	r1, [pc, #288]	; (80012c0 <StartCLI+0x588>)
 800119e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80011a0:	f7fe ffd6 	bl	8000150 <strcmp>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d117      	bne.n	80011da <StartCLI+0x4a2>
 80011aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80011ae:	2b69      	cmp	r3, #105	; 0x69
 80011b0:	d913      	bls.n	80011da <StartCLI+0x4a2>
		  				{
	  						cmd = 109;
 80011b2:	236d      	movs	r3, #109	; 0x6d
 80011b4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Primary ERV input received\r\n");
 80011b8:	4842      	ldr	r0, [pc, #264]	; (80012c4 <StartCLI+0x58c>)
 80011ba:	f7ff fd1b 	bl	8000bf4 <transmitText>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <StartCLI+0x568>)
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 80011c6:	2300      	movs	r3, #0
 80011c8:	2201      	movs	r2, #1
 80011ca:	f002 fcc3 	bl	8003b54 <osMessageQueuePut>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d045      	beq.n	8001260 <StartCLI+0x528>
	  						{
	  							Error_Handler();
 80011d4:	f000 f904 	bl	80013e0 <Error_Handler>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 80011d8:	e042      	b.n	8001260 <StartCLI+0x528>
	  						}		  				}
		  				else if(strcmp((char *)cmdStr, "event") == 0 && strcmp((char *)arg, "sev") == 0 && cmd >= 106)//sec erv
 80011da:	4934      	ldr	r1, [pc, #208]	; (80012ac <StartCLI+0x574>)
 80011dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80011de:	f7fe ffb7 	bl	8000150 <strcmp>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d11e      	bne.n	8001226 <StartCLI+0x4ee>
 80011e8:	4937      	ldr	r1, [pc, #220]	; (80012c8 <StartCLI+0x590>)
 80011ea:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80011ec:	f7fe ffb0 	bl	8000150 <strcmp>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d117      	bne.n	8001226 <StartCLI+0x4ee>
 80011f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80011fa:	2b69      	cmp	r3, #105	; 0x69
 80011fc:	d913      	bls.n	8001226 <StartCLI+0x4ee>
		  				{
	  						cmd = 110;
 80011fe:	236e      	movs	r3, #110	; 0x6e
 8001200:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Secondary ERV input received\r\n");
 8001204:	4831      	ldr	r0, [pc, #196]	; (80012cc <StartCLI+0x594>)
 8001206:	f7ff fcf5 	bl	8000bf4 <transmitText>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <StartCLI+0x568>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8001212:	2300      	movs	r3, #0
 8001214:	2201      	movs	r2, #1
 8001216:	f002 fc9d 	bl	8003b54 <osMessageQueuePut>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01f      	beq.n	8001260 <StartCLI+0x528>
	  						{
	  							Error_Handler();
 8001220:	f000 f8de 	bl	80013e0 <Error_Handler>
	  						if(osMessageQueuePut(CommandQueueHandle, &cmd, 1U, 0U)!= osOK)
 8001224:	e01c      	b.n	8001260 <StartCLI+0x528>
	  						}
		  				}

	  					else
	  					{
	  						cmd = 103;
 8001226:	2367      	movs	r3, #103	; 0x67
 8001228:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  						transmitText("Invalid command: ");
 800122c:	4828      	ldr	r0, [pc, #160]	; (80012d0 <StartCLI+0x598>)
 800122e:	f7ff fce1 	bl	8000bf4 <transmitText>
	  						transmitText((char *)get);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fcdc 	bl	8000bf4 <transmitText>
	  						transmitText("\r\n");
 800123c:	4825      	ldr	r0, [pc, #148]	; (80012d4 <StartCLI+0x59c>)
 800123e:	f7ff fcd9 	bl	8000bf4 <transmitText>
 8001242:	e00d      	b.n	8001260 <StartCLI+0x528>

	  				}

	  				else
	  				{
	  					cmd = 103;
 8001244:	2367      	movs	r3, #103	; 0x67
 8001246:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  					transmitText("Invalid command: ");
 800124a:	4821      	ldr	r0, [pc, #132]	; (80012d0 <StartCLI+0x598>)
 800124c:	f7ff fcd2 	bl	8000bf4 <transmitText>
	  					transmitText((char *)get);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fccd 	bl	8000bf4 <transmitText>
	  					transmitText("\r\n");
 800125a:	481e      	ldr	r0, [pc, #120]	; (80012d4 <StartCLI+0x59c>)
 800125c:	f7ff fcca 	bl	8000bf4 <transmitText>
	  				}

	  				x = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	67fb      	str	r3, [r7, #124]	; 0x7c
	  				for(int i = 0; i < 20; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	67bb      	str	r3, [r7, #120]	; 0x78
 8001268:	e007      	b.n	800127a <StartCLI+0x542>
	  				{
	  					save[i] = '\0';
 800126a:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <StartCLI+0x5a0>)
 800126c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800126e:	4413      	add	r3, r2
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
	  				for(int i = 0; i < 20; i++)
 8001274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001276:	3301      	adds	r3, #1
 8001278:	67bb      	str	r3, [r7, #120]	; 0x78
 800127a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800127c:	2b13      	cmp	r3, #19
 800127e:	ddf4      	ble.n	800126a <StartCLI+0x532>
	  				}
	  				transmitText("\r\n-> ");
 8001280:	4816      	ldr	r0, [pc, #88]	; (80012dc <StartCLI+0x5a4>)
 8001282:	f7ff fcb7 	bl	8000bf4 <transmitText>

	  				transmitText("\x1b[s");//save cursor
 8001286:	4816      	ldr	r0, [pc, #88]	; (80012e0 <StartCLI+0x5a8>)
 8001288:	f7ff fcb4 	bl	8000bf4 <transmitText>
	  				osDelay(10);
 800128c:	200a      	movs	r0, #10
 800128e:	f002 fbad 	bl	80039ec <osDelay>
	  if(HAL_UART_Receive(&huart2, cliBufferRX, 1, 300) == HAL_OK)
 8001292:	e55a      	b.n	8000d4a <StartCLI+0x12>
 8001294:	08007c0c 	.word	0x08007c0c
 8001298:	08007c60 	.word	0x08007c60
 800129c:	08007c64 	.word	0x08007c64
 80012a0:	20000128 	.word	0x20000128
 80012a4:	08007c84 	.word	0x08007c84
 80012a8:	08007c88 	.word	0x08007c88
 80012ac:	08007cac 	.word	0x08007cac
 80012b0:	08007cb4 	.word	0x08007cb4
 80012b4:	08007cb8 	.word	0x08007cb8
 80012b8:	08007cdc 	.word	0x08007cdc
 80012bc:	08007ce0 	.word	0x08007ce0
 80012c0:	08007d08 	.word	0x08007d08
 80012c4:	08007d0c 	.word	0x08007d0c
 80012c8:	08007d2c 	.word	0x08007d2c
 80012cc:	08007d30 	.word	0x08007d30
 80012d0:	08007d50 	.word	0x08007d50
 80012d4:	08007920 	.word	0x08007920
 80012d8:	2000013c 	.word	0x2000013c
 80012dc:	08007d64 	.word	0x08007d64
 80012e0:	08007914 	.word	0x08007914

080012e4 <StartStatusUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusUpdate */
void StartStatusUpdate(void *argument)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusUpdate */
  /* Infinite loop */
  for(;;)
  {
	  uint16_t msg = 111;
 80012ec:	236f      	movs	r3, #111	; 0x6f
 80012ee:	81bb      	strh	r3, [r7, #12]
	  	uint16_t mode = msg;
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	81fb      	strh	r3, [r7, #14]
	    /* Infinite loop */
	  		if(osMessageQueueGet(MessageQueueHandle, &msg, NULL, 0U) == osOK)
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <StartStatusUpdate+0xac>)
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	f107 010c 	add.w	r1, r7, #12
 80012fc:	2300      	movs	r3, #0
 80012fe:	2200      	movs	r2, #0
 8001300:	f002 fc9c 	bl	8003c3c <osMessageQueueGet>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d13d      	bne.n	8001386 <StartStatusUpdate+0xa2>
	  		{
	  			if(msg != mode)
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	89fa      	ldrh	r2, [r7, #14]
 800130e:	429a      	cmp	r2, r3
 8001310:	d039      	beq.n	8001386 <StartStatusUpdate+0xa2>
	  			{
	  				if(msg == 104)
 8001312:	89bb      	ldrh	r3, [r7, #12]
 8001314:	2b68      	cmp	r3, #104	; 0x68
 8001316:	d101      	bne.n	800131c <StartStatusUpdate+0x38>
	  				{
	  					msg = mode;
 8001318:	89fb      	ldrh	r3, [r7, #14]
 800131a:	81bb      	strh	r3, [r7, #12]
	  				}

	  				transmitText("\x1b[s");//save cursor
 800131c:	481d      	ldr	r0, [pc, #116]	; (8001394 <StartStatusUpdate+0xb0>)
 800131e:	f7ff fc69 	bl	8000bf4 <transmitText>
	  				transmitText("\x1b[?25l");//hide cursor
 8001322:	481d      	ldr	r0, [pc, #116]	; (8001398 <StartStatusUpdate+0xb4>)
 8001324:	f7ff fc66 	bl	8000bf4 <transmitText>
	  				transmitText("\x1b[0;7H");//go to mode
 8001328:	481c      	ldr	r0, [pc, #112]	; (800139c <StartStatusUpdate+0xb8>)
 800132a:	f7ff fc63 	bl	8000bf4 <transmitText>
	  				transmitText("                           ");
 800132e:	481c      	ldr	r0, [pc, #112]	; (80013a0 <StartStatusUpdate+0xbc>)
 8001330:	f7ff fc60 	bl	8000bf4 <transmitText>
	  				transmitText("\x1b[0;7H");// go to mode
 8001334:	4819      	ldr	r0, [pc, #100]	; (800139c <StartStatusUpdate+0xb8>)
 8001336:	f7ff fc5d 	bl	8000bf4 <transmitText>
	  				if(msg == 102)
 800133a:	89bb      	ldrh	r3, [r7, #12]
 800133c:	2b66      	cmp	r3, #102	; 0x66
 800133e:	d103      	bne.n	8001348 <StartStatusUpdate+0x64>
	  				{
	  					transmitText("Static Cycle mode");
 8001340:	4818      	ldr	r0, [pc, #96]	; (80013a4 <StartStatusUpdate+0xc0>)
 8001342:	f7ff fc57 	bl	8000bf4 <transmitText>
 8001346:	e016      	b.n	8001376 <StartStatusUpdate+0x92>
	  				}
	  				else if(msg == 105){
 8001348:	89bb      	ldrh	r3, [r7, #12]
 800134a:	2b69      	cmp	r3, #105	; 0x69
 800134c:	d103      	bne.n	8001356 <StartStatusUpdate+0x72>
	  					transmitText("Low Volume mode");
 800134e:	4816      	ldr	r0, [pc, #88]	; (80013a8 <StartStatusUpdate+0xc4>)
 8001350:	f7ff fc50 	bl	8000bf4 <transmitText>
 8001354:	e00f      	b.n	8001376 <StartStatusUpdate+0x92>
	  				}
	  				else if(msg >= 106 && msg < 111){
 8001356:	89bb      	ldrh	r3, [r7, #12]
 8001358:	2b69      	cmp	r3, #105	; 0x69
 800135a:	d906      	bls.n	800136a <StartStatusUpdate+0x86>
 800135c:	89bb      	ldrh	r3, [r7, #12]
 800135e:	2b6e      	cmp	r3, #110	; 0x6e
 8001360:	d803      	bhi.n	800136a <StartStatusUpdate+0x86>
	  					transmitText("Fixed Cycle mode");
 8001362:	4812      	ldr	r0, [pc, #72]	; (80013ac <StartStatusUpdate+0xc8>)
 8001364:	f7ff fc46 	bl	8000bf4 <transmitText>
 8001368:	e005      	b.n	8001376 <StartStatusUpdate+0x92>
	  				}
	  				else if (msg == 101)
 800136a:	89bb      	ldrh	r3, [r7, #12]
 800136c:	2b65      	cmp	r3, #101	; 0x65
 800136e:	d102      	bne.n	8001376 <StartStatusUpdate+0x92>
	  				{
	  					transmitText("Failsafe mode");
 8001370:	480f      	ldr	r0, [pc, #60]	; (80013b0 <StartStatusUpdate+0xcc>)
 8001372:	f7ff fc3f 	bl	8000bf4 <transmitText>
	  				}
	  				mode = msg;
 8001376:	89bb      	ldrh	r3, [r7, #12]
 8001378:	81fb      	strh	r3, [r7, #14]

	  				transmitText("\x1b[u");//return cursor
 800137a:	480e      	ldr	r0, [pc, #56]	; (80013b4 <StartStatusUpdate+0xd0>)
 800137c:	f7ff fc3a 	bl	8000bf4 <transmitText>
	  				transmitText("\x1b[?25h");//show cursor
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <StartStatusUpdate+0xd4>)
 8001382:	f7ff fc37 	bl	8000bf4 <transmitText>
	  			}

	  		}

	  		osDelay(10);
 8001386:	200a      	movs	r0, #10
 8001388:	f002 fb30 	bl	80039ec <osDelay>
  {
 800138c:	e7ae      	b.n	80012ec <StartStatusUpdate+0x8>
 800138e:	bf00      	nop
 8001390:	2000012c 	.word	0x2000012c
 8001394:	08007914 	.word	0x08007914
 8001398:	08007d6c 	.word	0x08007d6c
 800139c:	08007d74 	.word	0x08007d74
 80013a0:	08007d7c 	.word	0x08007d7c
 80013a4:	08007d98 	.word	0x08007d98
 80013a8:	08007dac 	.word	0x08007dac
 80013ac:	08007dbc 	.word	0x08007dbc
 80013b0:	08007dd0 	.word	0x08007dd0
 80013b4:	08007918 	.word	0x08007918
 80013b8:	0800790c 	.word	0x0800790c

080013bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ce:	f000 fa69 	bl	80018a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40000800 	.word	0x40000800

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_MspInit+0x68>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_MspInit+0x68>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6193      	str	r3, [r2, #24]
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_MspInit+0x68>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_MspInit+0x68>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_MspInit+0x68>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_MspInit+0x68>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	210f      	movs	r1, #15
 8001426:	f06f 0001 	mvn.w	r0, #1
 800142a:	f000 fb30 	bl	8001a8e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_MspInit+0x6c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_MspInit+0x6c>)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a44      	ldr	r2, [pc, #272]	; (8001588 <HAL_UART_MspInit+0x12c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d130      	bne.n	80014de <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_UART_MspInit+0x130>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	4a42      	ldr	r2, [pc, #264]	; (800158c <HAL_UART_MspInit+0x130>)
 8001482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001486:	61d3      	str	r3, [r2, #28]
 8001488:	4b40      	ldr	r3, [pc, #256]	; (800158c <HAL_UART_MspInit+0x130>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b3d      	ldr	r3, [pc, #244]	; (800158c <HAL_UART_MspInit+0x130>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a3c      	ldr	r2, [pc, #240]	; (800158c <HAL_UART_MspInit+0x130>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b3a      	ldr	r3, [pc, #232]	; (800158c <HAL_UART_MspInit+0x130>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4834      	ldr	r0, [pc, #208]	; (8001590 <HAL_UART_MspInit+0x134>)
 80014c0:	f000 fbc0 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014c4:	2308      	movs	r3, #8
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	482e      	ldr	r0, [pc, #184]	; (8001590 <HAL_UART_MspInit+0x134>)
 80014d8:	f000 fbb4 	bl	8001c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014dc:	e050      	b.n	8001580 <HAL_UART_MspInit+0x124>
  else if(huart->Instance==USART3)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <HAL_UART_MspInit+0x138>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d14b      	bne.n	8001580 <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_UART_MspInit+0x130>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_UART_MspInit+0x130>)
 80014ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f2:	61d3      	str	r3, [r2, #28]
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_UART_MspInit+0x130>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_UART_MspInit+0x130>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <HAL_UART_MspInit+0x130>)
 8001506:	f043 0310 	orr.w	r3, r3, #16
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_UART_MspInit+0x130>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <HAL_UART_MspInit+0x13c>)
 800152e:	f000 fb89 	bl	8001c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001532:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <HAL_UART_MspInit+0x13c>)
 8001548:	f000 fb7c 	bl	8001c44 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_UART_MspInit+0x140>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001554:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156a:	4a0c      	ldr	r2, [pc, #48]	; (800159c <HAL_UART_MspInit+0x140>)
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2105      	movs	r1, #5
 8001574:	2027      	movs	r0, #39	; 0x27
 8001576:	f000 fa8a 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800157a:	2027      	movs	r0, #39	; 0x27
 800157c:	f000 faa3 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
}
 8001580:	bf00      	nop
 8001582:	3730      	adds	r7, #48	; 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40004400 	.word	0x40004400
 800158c:	40021000 	.word	0x40021000
 8001590:	40010800 	.word	0x40010800
 8001594:	40004800 	.word	0x40004800
 8001598:	40011000 	.word	0x40011000
 800159c:	40010000 	.word	0x40010000

080015a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	201e      	movs	r0, #30
 80015b6:	f000 fa6a 	bl	8001a8e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015ba:	201e      	movs	r0, #30
 80015bc:	f000 fa83 	bl	8001ac6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_InitTick+0x9c>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_InitTick+0x9c>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	61d3      	str	r3, [r2, #28]
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_InitTick+0x9c>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d8:	f107 0210 	add.w	r2, r7, #16
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f8e0 	bl	80027a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015e8:	f001 f8b6 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 80015ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f0:	4a13      	ldr	r2, [pc, #76]	; (8001640 <HAL_InitTick+0xa0>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	0c9b      	lsrs	r3, r3, #18
 80015f8:	3b01      	subs	r3, #1
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_InitTick+0xa4>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_InitTick+0xa8>)
 8001600:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_InitTick+0xa4>)
 8001604:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001608:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_InitTick+0xa4>)
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_InitTick+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_InitTick+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <HAL_InitTick+0xa4>)
 800161e:	f001 f911 	bl	8002844 <HAL_TIM_Base_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d104      	bne.n	8001632 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001628:	4806      	ldr	r0, [pc, #24]	; (8001644 <HAL_InitTick+0xa4>)
 800162a:	f001 f963 	bl	80028f4 <HAL_TIM_Base_Start_IT>
 800162e:	4603      	mov	r3, r0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3730      	adds	r7, #48	; 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	431bde83 	.word	0x431bde83
 8001644:	200001a0 	.word	0x200001a0
 8001648:	40000800 	.word	0x40000800

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <TIM4_IRQHandler+0x10>)
 800167e:	f001 f98b 	bl	8002998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200001a0 	.word	0x200001a0

0800168c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <USART3_IRQHandler+0x10>)
 8001692:	f001 fca3 	bl	8002fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200000d8 	.word	0x200000d8

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
	return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <_kill>:

int _kill(int pid, int sig)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016b8:	f004 ff8c 	bl	80065d4 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	2216      	movs	r2, #22
 80016c0:	601a      	str	r2, [r3, #0]
	return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_exit>:

void _exit (int status)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016d6:	f04f 31ff 	mov.w	r1, #4294967295
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffe7 	bl	80016ae <_kill>
	while (1) {}		/* Make sure we hang here */
 80016e0:	e7fe      	b.n	80016e0 <_exit+0x12>

080016e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e00a      	b.n	800170a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f4:	f3af 8000 	nop.w
 80016f8:	4601      	mov	r1, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	60ba      	str	r2, [r7, #8]
 8001700:	b2ca      	uxtb	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbf0      	blt.n	80016f4 <_read+0x12>
	}

return len;
 8001712:	687b      	ldr	r3, [r7, #4]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e009      	b.n	8001742 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	60ba      	str	r2, [r7, #8]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	dbf1      	blt.n	800172e <_write+0x12>
	}
	return len;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_close>:

int _close(int file)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	return -1;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800177a:	605a      	str	r2, [r3, #4]
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <_isatty>:

int _isatty(int file)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	return 1;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <_sbrk+0x5c>)
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <_sbrk+0x60>)
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <_sbrk+0x64>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <_sbrk+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d207      	bcs.n	80017f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e4:	f004 fef6 	bl	80065d4 <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	220c      	movs	r2, #12
 80017ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e009      	b.n	8001808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <_sbrk+0x64>)
 8001804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20005000 	.word	0x20005000
 8001814:	00000400 	.word	0x00000400
 8001818:	200001e8 	.word	0x200001e8
 800181c:	20001b48 	.word	0x20001b48

08001820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001852:	f7ff ffe5 	bl	8001820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001856:	f004 fec3 	bl	80065e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185a:	f7ff f845 	bl	80008e8 <main>
  bx lr
 800185e:	4770      	bx	lr
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001868:	0800810c 	.word	0x0800810c
  ldr r2, =_sbss
 800186c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001870:	20001b48 	.word	0x20001b48

08001874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_2_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x28>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x28>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 f8f5 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	200f      	movs	r0, #15
 8001890:	f7ff fe86 	bl	80015a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fdaa 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000

080018a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_IncTick+0x1c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_IncTick+0x20>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <HAL_IncTick+0x20>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	2000000c 	.word	0x2000000c
 80018c4:	200001ec 	.word	0x200001ec

080018c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <HAL_GetTick+0x10>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	200001ec 	.word	0x200001ec

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff fff0 	bl	80018c8 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffe0 	bl	80018c8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000000c 	.word	0x2000000c

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4906      	ldr	r1, [pc, #24]	; (80019bc <__NVIC_EnableIRQ+0x34>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff4f 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff64 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ffb2 	bl	8001a14 <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff81 	bl	80019c0 <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff57 	bl	8001988 <__NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b085      	sub	sp, #20
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d008      	beq.n	8001b0a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2204      	movs	r2, #4
 8001afc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e020      	b.n	8001b4c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 020e 	bic.w	r2, r2, #14
 8001b18:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	2101      	movs	r1, #1
 8001b34:	fa01 f202 	lsl.w	r2, r1, r2
 8001b38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d005      	beq.n	8001b7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2204      	movs	r2, #4
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e051      	b.n	8001c1e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 020e 	bic.w	r2, r2, #14
 8001b88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_DMA_Abort_IT+0xd0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d029      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xa0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <HAL_DMA_Abort_IT+0xd4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d022      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0x9c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_DMA_Abort_IT+0xd8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d01a      	beq.n	8001bee <HAL_DMA_Abort_IT+0x96>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <HAL_DMA_Abort_IT+0xdc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d012      	beq.n	8001be8 <HAL_DMA_Abort_IT+0x90>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_DMA_Abort_IT+0xe0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00a      	beq.n	8001be2 <HAL_DMA_Abort_IT+0x8a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_DMA_Abort_IT+0xe4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d102      	bne.n	8001bdc <HAL_DMA_Abort_IT+0x84>
 8001bd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bda:	e00e      	b.n	8001bfa <HAL_DMA_Abort_IT+0xa2>
 8001bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be0:	e00b      	b.n	8001bfa <HAL_DMA_Abort_IT+0xa2>
 8001be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be6:	e008      	b.n	8001bfa <HAL_DMA_Abort_IT+0xa2>
 8001be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bec:	e005      	b.n	8001bfa <HAL_DMA_Abort_IT+0xa2>
 8001bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf2:	e002      	b.n	8001bfa <HAL_DMA_Abort_IT+0xa2>
 8001bf4:	2310      	movs	r3, #16
 8001bf6:	e000      	b.n	8001bfa <HAL_DMA_Abort_IT+0xa2>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <HAL_DMA_Abort_IT+0xe8>)
 8001bfc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	4798      	blx	r3
    } 
  }
  return status;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40020008 	.word	0x40020008
 8001c2c:	4002001c 	.word	0x4002001c
 8001c30:	40020030 	.word	0x40020030
 8001c34:	40020044 	.word	0x40020044
 8001c38:	40020058 	.word	0x40020058
 8001c3c:	4002006c 	.word	0x4002006c
 8001c40:	40020000 	.word	0x40020000

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b08b      	sub	sp, #44	; 0x2c
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c56:	e169      	b.n	8001f2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f040 8158 	bne.w	8001f26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a9a      	ldr	r2, [pc, #616]	; (8001ee4 <HAL_GPIO_Init+0x2a0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d05e      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001c80:	4a98      	ldr	r2, [pc, #608]	; (8001ee4 <HAL_GPIO_Init+0x2a0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d875      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001c86:	4a98      	ldr	r2, [pc, #608]	; (8001ee8 <HAL_GPIO_Init+0x2a4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d058      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001c8c:	4a96      	ldr	r2, [pc, #600]	; (8001ee8 <HAL_GPIO_Init+0x2a4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d86f      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001c92:	4a96      	ldr	r2, [pc, #600]	; (8001eec <HAL_GPIO_Init+0x2a8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d052      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001c98:	4a94      	ldr	r2, [pc, #592]	; (8001eec <HAL_GPIO_Init+0x2a8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d869      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001c9e:	4a94      	ldr	r2, [pc, #592]	; (8001ef0 <HAL_GPIO_Init+0x2ac>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d04c      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001ca4:	4a92      	ldr	r2, [pc, #584]	; (8001ef0 <HAL_GPIO_Init+0x2ac>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d863      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001caa:	4a92      	ldr	r2, [pc, #584]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d046      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001cb0:	4a90      	ldr	r2, [pc, #576]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d85d      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001cb6:	2b12      	cmp	r3, #18
 8001cb8:	d82a      	bhi.n	8001d10 <HAL_GPIO_Init+0xcc>
 8001cba:	2b12      	cmp	r3, #18
 8001cbc:	d859      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001cbe:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <HAL_GPIO_Init+0x80>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001d3f 	.word	0x08001d3f
 8001cc8:	08001d19 	.word	0x08001d19
 8001ccc:	08001d2b 	.word	0x08001d2b
 8001cd0:	08001d6d 	.word	0x08001d6d
 8001cd4:	08001d73 	.word	0x08001d73
 8001cd8:	08001d73 	.word	0x08001d73
 8001cdc:	08001d73 	.word	0x08001d73
 8001ce0:	08001d73 	.word	0x08001d73
 8001ce4:	08001d73 	.word	0x08001d73
 8001ce8:	08001d73 	.word	0x08001d73
 8001cec:	08001d73 	.word	0x08001d73
 8001cf0:	08001d73 	.word	0x08001d73
 8001cf4:	08001d73 	.word	0x08001d73
 8001cf8:	08001d73 	.word	0x08001d73
 8001cfc:	08001d73 	.word	0x08001d73
 8001d00:	08001d73 	.word	0x08001d73
 8001d04:	08001d73 	.word	0x08001d73
 8001d08:	08001d21 	.word	0x08001d21
 8001d0c:	08001d35 	.word	0x08001d35
 8001d10:	4a79      	ldr	r2, [pc, #484]	; (8001ef8 <HAL_GPIO_Init+0x2b4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d16:	e02c      	b.n	8001d72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	623b      	str	r3, [r7, #32]
          break;
 8001d1e:	e029      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	3304      	adds	r3, #4
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e024      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	3308      	adds	r3, #8
 8001d30:	623b      	str	r3, [r7, #32]
          break;
 8001d32:	e01f      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	330c      	adds	r3, #12
 8001d3a:	623b      	str	r3, [r7, #32]
          break;
 8001d3c:	e01a      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d46:	2304      	movs	r3, #4
 8001d48:	623b      	str	r3, [r7, #32]
          break;
 8001d4a:	e013      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d54:	2308      	movs	r3, #8
 8001d56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	611a      	str	r2, [r3, #16]
          break;
 8001d5e:	e009      	b.n	8001d74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d60:	2308      	movs	r3, #8
 8001d62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	615a      	str	r2, [r3, #20]
          break;
 8001d6a:	e003      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
          break;
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          break;
 8001d72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2bff      	cmp	r3, #255	; 0xff
 8001d78:	d801      	bhi.n	8001d7e <HAL_GPIO_Init+0x13a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_Init+0x13e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3304      	adds	r3, #4
 8001d82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2bff      	cmp	r3, #255	; 0xff
 8001d88:	d802      	bhi.n	8001d90 <HAL_GPIO_Init+0x14c>
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	e002      	b.n	8001d96 <HAL_GPIO_Init+0x152>
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	3b08      	subs	r3, #8
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	210f      	movs	r1, #15
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	401a      	ands	r2, r3
 8001da8:	6a39      	ldr	r1, [r7, #32]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80b1 	beq.w	8001f26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc4:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a4c      	ldr	r2, [pc, #304]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ddc:	4a48      	ldr	r2, [pc, #288]	; (8001f00 <HAL_GPIO_Init+0x2bc>)
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	220f      	movs	r2, #15
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a40      	ldr	r2, [pc, #256]	; (8001f04 <HAL_GPIO_Init+0x2c0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <HAL_GPIO_Init+0x1ec>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3f      	ldr	r2, [pc, #252]	; (8001f08 <HAL_GPIO_Init+0x2c4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00d      	beq.n	8001e2c <HAL_GPIO_Init+0x1e8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3e      	ldr	r2, [pc, #248]	; (8001f0c <HAL_GPIO_Init+0x2c8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <HAL_GPIO_Init+0x1e4>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3d      	ldr	r2, [pc, #244]	; (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_GPIO_Init+0x1e0>
 8001e20:	2303      	movs	r3, #3
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e004      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e30:	2300      	movs	r3, #0
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	f002 0203 	and.w	r2, r2, #3
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	4093      	lsls	r3, r2
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e42:	492f      	ldr	r1, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x2bc>)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	492c      	ldr	r1, [pc, #176]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4928      	ldr	r1, [pc, #160]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4922      	ldr	r1, [pc, #136]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	491e      	ldr	r1, [pc, #120]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4918      	ldr	r1, [pc, #96]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4914      	ldr	r1, [pc, #80]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d021      	beq.n	8001f18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
 8001ee0:	e021      	b.n	8001f26 <HAL_GPIO_Init+0x2e2>
 8001ee2:	bf00      	nop
 8001ee4:	10320000 	.word	0x10320000
 8001ee8:	10310000 	.word	0x10310000
 8001eec:	10220000 	.word	0x10220000
 8001ef0:	10210000 	.word	0x10210000
 8001ef4:	10120000 	.word	0x10120000
 8001ef8:	10110000 	.word	0x10110000
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000
 8001f04:	40010800 	.word	0x40010800
 8001f08:	40010c00 	.word	0x40010c00
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40011400 	.word	0x40011400
 8001f14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	4909      	ldr	r1, [pc, #36]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	3301      	adds	r3, #1
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	fa22 f303 	lsr.w	r3, r2, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f47f ae8e 	bne.w	8001c58 <HAL_GPIO_Init+0x14>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	372c      	adds	r7, #44	; 0x2c
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f68:	e003      	b.n	8001f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	041a      	lsls	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43d9      	mvns	r1, r3
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	611a      	str	r2, [r3, #16]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e272      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd0:	4b92      	ldr	r3, [pc, #584]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d00c      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d112      	bne.n	800200e <HAL_RCC_OscConfig+0x5e>
 8001fe8:	4b8c      	ldr	r3, [pc, #560]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d10b      	bne.n	800200e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff6:	4b89      	ldr	r3, [pc, #548]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d06c      	beq.n	80020dc <HAL_RCC_OscConfig+0x12c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d168      	bne.n	80020dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e24c      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x76>
 8002018:	4b80      	ldr	r3, [pc, #512]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7f      	ldr	r2, [pc, #508]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800201e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	e02e      	b.n	8002084 <HAL_RCC_OscConfig+0xd4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x98>
 800202e:	4b7b      	ldr	r3, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7a      	ldr	r2, [pc, #488]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b78      	ldr	r3, [pc, #480]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a77      	ldr	r2, [pc, #476]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e01d      	b.n	8002084 <HAL_RCC_OscConfig+0xd4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0xbc>
 8002052:	4b72      	ldr	r3, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a71      	ldr	r2, [pc, #452]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6e      	ldr	r2, [pc, #440]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xd4>
 800206c:	4b6b      	ldr	r3, [pc, #428]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6a      	ldr	r2, [pc, #424]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b68      	ldr	r3, [pc, #416]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a67      	ldr	r2, [pc, #412]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fc1c 	bl	80018c8 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff fc18 	bl	80018c8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e200      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xe4>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fc08 	bl	80018c8 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fc04 	bl	80018c8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1ec      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x10c>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ea:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020f6:	4b49      	ldr	r3, [pc, #292]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x18c>
 8002102:	4b46      	ldr	r3, [pc, #280]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x176>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1c0      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4939      	ldr	r1, [pc, #228]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	e03a      	b.n	80021b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002144:	4b36      	ldr	r3, [pc, #216]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff fbbd 	bl	80018c8 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002152:	f7ff fbb9 	bl	80018c8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1a1      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4927      	ldr	r1, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff fb9c 	bl	80018c8 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002194:	f7ff fb98 	bl	80018c8 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e180      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03a      	beq.n	8002234 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d019      	beq.n	80021fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_RCC_OscConfig+0x274>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7ff fb7c 	bl	80018c8 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d4:	f7ff fb78 	bl	80018c8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e160      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f000 fb08 	bl	8002808 <RCC_Delay>
 80021f8:	e01c      	b.n	8002234 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_RCC_OscConfig+0x274>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7ff fb62 	bl	80018c8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002206:	e00f      	b.n	8002228 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002208:	f7ff fb5e 	bl	80018c8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d908      	bls.n	8002228 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e146      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	42420000 	.word	0x42420000
 8002224:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	4b92      	ldr	r3, [pc, #584]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e9      	bne.n	8002208 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a6 	beq.w	800238e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b8b      	ldr	r3, [pc, #556]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a87      	ldr	r2, [pc, #540]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b85      	ldr	r3, [pc, #532]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b82      	ldr	r3, [pc, #520]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227a:	4b7f      	ldr	r3, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7e      	ldr	r2, [pc, #504]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7ff fb1f 	bl	80018c8 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7ff fb1b 	bl	80018c8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e103      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	4b75      	ldr	r3, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x312>
 80022b4:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e02d      	b.n	800231e <HAL_RCC_OscConfig+0x36e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x334>
 80022ca:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a69      	ldr	r2, [pc, #420]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a66      	ldr	r2, [pc, #408]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6213      	str	r3, [r2, #32]
 80022e2:	e01c      	b.n	800231e <HAL_RCC_OscConfig+0x36e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d10c      	bne.n	8002306 <HAL_RCC_OscConfig+0x356>
 80022ec:	4b61      	ldr	r3, [pc, #388]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a60      	ldr	r2, [pc, #384]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	4b5e      	ldr	r3, [pc, #376]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a5d      	ldr	r2, [pc, #372]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6213      	str	r3, [r2, #32]
 8002304:	e00b      	b.n	800231e <HAL_RCC_OscConfig+0x36e>
 8002306:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a5a      	ldr	r2, [pc, #360]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	4b58      	ldr	r3, [pc, #352]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a57      	ldr	r2, [pc, #348]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d015      	beq.n	8002352 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7ff facf 	bl	80018c8 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff facb 	bl	80018c8 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0b1      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ee      	beq.n	800232e <HAL_RCC_OscConfig+0x37e>
 8002350:	e014      	b.n	800237c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7ff fab9 	bl	80018c8 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7ff fab5 	bl	80018c8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e09b      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ee      	bne.n	800235a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8087 	beq.w	80024a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d061      	beq.n	8002468 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d146      	bne.n	800243a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff fa89 	bl	80018c8 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff fa85 	bl	80018c8 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e06d      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d108      	bne.n	80023f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a19      	ldr	r1, [r3, #32]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	430b      	orrs	r3, r1
 8002406:	491b      	ldr	r1, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x4cc>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7ff fa59 	bl	80018c8 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7ff fa55 	bl	80018c8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e03d      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x46a>
 8002438:	e035      	b.n	80024a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_RCC_OscConfig+0x4cc>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff fa42 	bl	80018c8 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7ff fa3e 	bl	80018c8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e026      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x498>
 8002466:	e01e      	b.n	80024a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d107      	bne.n	8002480 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e019      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_OscConfig+0x500>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	429a      	cmp	r2, r3
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0d0      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	4965      	ldr	r1, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800251a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002532:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d040      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d115      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e073      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06b      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4936      	ldr	r1, [pc, #216]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7ff f990 	bl	80018c8 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7ff f98c 	bl	80018c8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e053      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d210      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490a      	ldr	r1, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1cc>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1d0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe ff9c 	bl	80015a0 <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40022000 	.word	0x40022000
 8002678:	40021000 	.word	0x40021000
 800267c:	08007ea4 	.word	0x08007ea4
 8002680:	20000004 	.word	0x20000004
 8002684:	20000008 	.word	0x20000008

08002688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b490      	push	{r4, r7}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_RCC_GetSysClockFreq+0xac>)
 8002690:	1d3c      	adds	r4, r7, #4
 8002692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002698:	f240 2301 	movw	r3, #513	; 0x201
 800269c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x40>
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x46>
 80026c6:	e02b      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ca:	623b      	str	r3, [r7, #32]
      break;
 80026cc:	e02b      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	0c9b      	lsrs	r3, r3, #18
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3328      	adds	r3, #40	; 0x28
 80026d8:	443b      	add	r3, r7
 80026da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d012      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0c5b      	lsrs	r3, r3, #17
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	3328      	adds	r3, #40	; 0x28
 80026f6:	443b      	add	r3, r7
 80026f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002702:	fb03 f202 	mul.w	r2, r3, r2
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	e004      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	623b      	str	r3, [r7, #32]
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002722:	623b      	str	r3, [r7, #32]
      break;
 8002724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002726:	6a3b      	ldr	r3, [r7, #32]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bc90      	pop	{r4, r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	08007de0 	.word	0x08007de0
 8002738:	40021000 	.word	0x40021000
 800273c:	007a1200 	.word	0x007a1200
 8002740:	003d0900 	.word	0x003d0900

08002744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b02      	ldr	r3, [pc, #8]	; (8002754 <HAL_RCC_GetHCLKFreq+0x10>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800275c:	f7ff fff2 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	08007eb4 	.word	0x08007eb4

08002780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002784:	f7ff ffde 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	0adb      	lsrs	r3, r3, #11
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	08007eb4 	.word	0x08007eb4

080027a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	220f      	movs	r2, #15
 80027b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCC_GetClockConfig+0x58>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0203 	and.w	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_RCC_GetClockConfig+0x58>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_GetClockConfig+0x58>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_RCC_GetClockConfig+0x58>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_GetClockConfig+0x5c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0207 	and.w	r2, r3, #7
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	40021000 	.word	0x40021000
 8002804:	40022000 	.word	0x40022000

08002808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <RCC_Delay+0x34>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <RCC_Delay+0x38>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a5b      	lsrs	r3, r3, #9
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002824:	bf00      	nop
  }
  while (Delay --);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	60fa      	str	r2, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f9      	bne.n	8002824 <RCC_Delay+0x1c>
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	20000004 	.word	0x20000004
 8002840:	10624dd3 	.word	0x10624dd3

08002844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e041      	b.n	80028da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f839 	bl	80028e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f000 f9b4 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d001      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e03a      	b.n	8002982 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_TIM_Base_Start_IT+0x98>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00e      	beq.n	800294c <HAL_TIM_Base_Start_IT+0x58>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002936:	d009      	beq.n	800294c <HAL_TIM_Base_Start_IT+0x58>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <HAL_TIM_Base_Start_IT+0x9c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <HAL_TIM_Base_Start_IT+0x58>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a13      	ldr	r2, [pc, #76]	; (8002994 <HAL_TIM_Base_Start_IT+0xa0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d111      	bne.n	8002970 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b06      	cmp	r3, #6
 800295c:	d010      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296e:	e007      	b.n	8002980 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800

08002998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d122      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d11b      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0202 	mvn.w	r2, #2
 80029c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8ed 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 80029e0:	e005      	b.n	80029ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f8e0 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f8ef 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d122      	bne.n	8002a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d11b      	bne.n	8002a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0204 	mvn.w	r2, #4
 8002a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8c3 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002a34:	e005      	b.n	8002a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f8b6 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f8c5 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d122      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d11b      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0208 	mvn.w	r2, #8
 8002a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2204      	movs	r2, #4
 8002a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f899 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f88c 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f89b 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0210 	mvn.w	r2, #16
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f86f 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f862 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f871 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0201 	mvn.w	r2, #1
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fc50 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8bf 	bl	8002cc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d10e      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d107      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f835 	bl	8002bde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d10e      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d107      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0220 	mvn.w	r2, #32
 8002b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f88a 	bl	8002cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <TIM_Base_SetConfig+0xb8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <TIM_Base_SetConfig+0x30>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d007      	beq.n	8002c20 <TIM_Base_SetConfig+0x30>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a26      	ldr	r2, [pc, #152]	; (8002cac <TIM_Base_SetConfig+0xbc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_Base_SetConfig+0x30>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <TIM_Base_SetConfig+0xc0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d108      	bne.n	8002c32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <TIM_Base_SetConfig+0xb8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00b      	beq.n	8002c52 <TIM_Base_SetConfig+0x62>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d007      	beq.n	8002c52 <TIM_Base_SetConfig+0x62>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a19      	ldr	r2, [pc, #100]	; (8002cac <TIM_Base_SetConfig+0xbc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d003      	beq.n	8002c52 <TIM_Base_SetConfig+0x62>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <TIM_Base_SetConfig+0xc0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d108      	bne.n	8002c64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <TIM_Base_SetConfig+0xb8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d103      	bne.n	8002c98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	615a      	str	r2, [r3, #20]
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800

08002cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e03f      	b.n	8002d6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fbac 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	; 0x24
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fcc7 	bl	80036b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b08a      	sub	sp, #40	; 0x28
 8002d76:	af02      	add	r7, sp, #8
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d17c      	bne.n	8002e8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_UART_Transmit+0x2c>
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e075      	b.n	8002e8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_UART_Transmit+0x3e>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e06e      	b.n	8002e8e <HAL_UART_Transmit+0x11c>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2221      	movs	r2, #33	; 0x21
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dc6:	f7fe fd7f 	bl	80018c8 <HAL_GetTick>
 8002dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de0:	d108      	bne.n	8002df4 <HAL_UART_Transmit+0x82>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e003      	b.n	8002dfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e04:	e02a      	b.n	8002e5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fab3 	bl	800337c <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e036      	b.n	8002e8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e007      	b.n	8002e4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1cf      	bne.n	8002e06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fa83 	bl	800337c <UART_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e006      	b.n	8002e8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08a      	sub	sp, #40	; 0x28
 8002e9a:	af02      	add	r7, sp, #8
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	f040 808c 	bne.w	8002fd0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Receive+0x2e>
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e084      	b.n	8002fd2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Receive+0x40>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e07d      	b.n	8002fd2 <HAL_UART_Receive+0x13c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2222      	movs	r2, #34	; 0x22
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe fce9 	bl	80018c8 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0c:	d108      	bne.n	8002f20 <HAL_UART_Receive+0x8a>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e003      	b.n	8002f28 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f30:	e043      	b.n	8002fba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2120      	movs	r1, #32
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fa1d 	bl	800337c <UART_WaitOnFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e042      	b.n	8002fd2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	3302      	adds	r3, #2
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	e01f      	b.n	8002fac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d007      	beq.n	8002f86 <HAL_UART_Receive+0xf0>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_UART_Receive+0xfe>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e008      	b.n	8002fa6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1b6      	bne.n	8002f32 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_UART_IRQHandler+0x52>
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa99 	bl	800355e <UART_Receive_IT>
      return;
 800302c:	e17b      	b.n	8003326 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80b1 	beq.w	8003198 <HAL_UART_IRQHandler+0x1bc>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <HAL_UART_IRQHandler+0x70>
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80a6 	beq.w	8003198 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_UART_IRQHandler+0x90>
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0201 	orr.w	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_UART_IRQHandler+0xb0>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0202 	orr.w	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_UART_IRQHandler+0xd0>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f043 0204 	orr.w	r2, r3, #4
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00f      	beq.n	80030d6 <HAL_UART_IRQHandler+0xfa>
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <HAL_UART_IRQHandler+0xee>
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0208 	orr.w	r2, r3, #8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 811e 	beq.w	800331c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <HAL_UART_IRQHandler+0x11e>
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fa32 	bl	800355e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <HAL_UART_IRQHandler+0x146>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d031      	beq.n	8003186 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f974 	bl	8003410 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d023      	beq.n	800317e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003144:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	2b00      	cmp	r3, #0
 800314c:	d013      	beq.n	8003176 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	4a76      	ldr	r2, [pc, #472]	; (800332c <HAL_UART_IRQHandler+0x350>)
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fcfc 	bl	8001b58 <HAL_DMA_Abort_IT>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003170:	4610      	mov	r0, r2
 8003172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	e00e      	b.n	8003194 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8ec 	bl	8003354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	e00a      	b.n	8003194 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8e8 	bl	8003354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003184:	e006      	b.n	8003194 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8e4 	bl	8003354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003192:	e0c3      	b.n	800331c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	bf00      	nop
    return;
 8003196:	e0c1      	b.n	800331c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	2b01      	cmp	r3, #1
 800319e:	f040 80a1 	bne.w	80032e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 809b 	beq.w	80032e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8095 	beq.w	80032e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d04e      	beq.n	800327c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80031e8:	8a3b      	ldrh	r3, [r7, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8098 	beq.w	8003320 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f4:	8a3a      	ldrh	r2, [r7, #16]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	f080 8092 	bcs.w	8003320 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8a3a      	ldrh	r2, [r7, #16]
 8003200:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b20      	cmp	r3, #32
 800320a:	d02b      	beq.n	8003264 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800321a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0210 	bic.w	r2, r2, #16
 8003258:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fc3f 	bl	8001ae2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800326c:	b29b      	uxth	r3, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	b29b      	uxth	r3, r3
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f876 	bl	8003366 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800327a:	e051      	b.n	8003320 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003284:	b29b      	uxth	r3, r3
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d047      	beq.n	8003324 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003294:	8a7b      	ldrh	r3, [r7, #18]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d044      	beq.n	8003324 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0210 	bic.w	r2, r2, #16
 80032d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032d8:	8a7b      	ldrh	r3, [r7, #18]
 80032da:	4619      	mov	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f842 	bl	8003366 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032e2:	e01f      	b.n	8003324 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_UART_IRQHandler+0x324>
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f8c9 	bl	8003490 <UART_Transmit_IT>
    return;
 80032fe:	e012      	b.n	8003326 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <HAL_UART_IRQHandler+0x34a>
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f90a 	bl	800352e <UART_EndTransmit_IT>
    return;
 800331a:	e004      	b.n	8003326 <HAL_UART_IRQHandler+0x34a>
    return;
 800331c:	bf00      	nop
 800331e:	e002      	b.n	8003326 <HAL_UART_IRQHandler+0x34a>
      return;
 8003320:	bf00      	nop
 8003322:	e000      	b.n	8003326 <HAL_UART_IRQHandler+0x34a>
      return;
 8003324:	bf00      	nop
  }
}
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	08003469 	.word	0x08003469

08003330 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338c:	e02c      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d028      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <UART_WaitOnFlagUntilTimeout+0x30>
 800339c:	f7fe fa94 	bl	80018c8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d21d      	bcs.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e00f      	b.n	8003408 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4013      	ands	r3, r2
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	429a      	cmp	r2, r3
 8003404:	d0c3      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003426:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	2b01      	cmp	r3, #1
 800343e:	d107      	bne.n	8003450 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0210 	bic.w	r2, r2, #16
 800344e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff ff66 	bl	8003354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b21      	cmp	r3, #33	; 0x21
 80034a2:	d13e      	bne.n	8003522 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d114      	bne.n	80034d8 <UART_Transmit_IT+0x48>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d110      	bne.n	80034d8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	621a      	str	r2, [r3, #32]
 80034d6:	e008      	b.n	80034ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	1c59      	adds	r1, r3, #1
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6211      	str	r1, [r2, #32]
 80034e2:	781a      	ldrb	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4619      	mov	r1, r3
 80034f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800350c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003544:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff feee 	bl	8003330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b22      	cmp	r3, #34	; 0x22
 8003570:	f040 8099 	bne.w	80036a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357c:	d117      	bne.n	80035ae <UART_Receive_IT+0x50>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d113      	bne.n	80035ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359c:	b29a      	uxth	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28
 80035ac:	e026      	b.n	80035fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c0:	d007      	beq.n	80035d2 <UART_Receive_IT+0x74>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <UART_Receive_IT+0x82>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	e008      	b.n	80035f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29b      	uxth	r3, r3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4619      	mov	r1, r3
 800360a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800360c:	2b00      	cmp	r3, #0
 800360e:	d148      	bne.n	80036a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0220 	bic.w	r2, r2, #32
 800361e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800362e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	2b01      	cmp	r3, #1
 800364e:	d123      	bne.n	8003698 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0210 	bic.w	r2, r2, #16
 8003664:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b10      	cmp	r3, #16
 8003672:	d10a      	bne.n	800368a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fe68 	bl	8003366 <HAL_UARTEx_RxEventCallback>
 8003696:	e002      	b.n	800369e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fe52 	bl	8003342 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e002      	b.n	80036a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ea:	f023 030c 	bic.w	r3, r3, #12
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <UART_SetConfig+0x114>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d103      	bne.n	8003720 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7ff f832 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	e002      	b.n	8003726 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7ff f81a 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003724:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	4a22      	ldr	r2, [pc, #136]	; (80037c8 <UART_SetConfig+0x118>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	0119      	lsls	r1, r3, #4
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009a      	lsls	r2, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <UART_SetConfig+0x118>)
 800375e:	fba3 0302 	umull	r0, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2064      	movs	r0, #100	; 0x64
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <UART_SetConfig+0x118>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377c:	4419      	add	r1, r3
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009a      	lsls	r2, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fbb2 f2f3 	udiv	r2, r2, r3
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <UART_SetConfig+0x118>)
 8003796:	fba3 0302 	umull	r0, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2064      	movs	r0, #100	; 0x64
 800379e:	fb00 f303 	mul.w	r3, r0, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	3332      	adds	r3, #50	; 0x32
 80037a8:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <UART_SetConfig+0x118>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	440a      	add	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40013800 	.word	0x40013800
 80037c8:	51eb851f 	.word	0x51eb851f

080037cc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d2:	f3ef 8305 	mrs	r3, IPSR
 80037d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80037d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037de:	f3ef 8310 	mrs	r3, PRIMASK
 80037e2:	607b      	str	r3, [r7, #4]
  return(result);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <osKernelInitialize+0x32>
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <osKernelInitialize+0x60>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d109      	bne.n	8003806 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037f2:	f3ef 8311 	mrs	r3, BASEPRI
 80037f6:	603b      	str	r3, [r7, #0]
  return(result);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80037fe:	f06f 0305 	mvn.w	r3, #5
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e00c      	b.n	8003820 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <osKernelInitialize+0x60>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d105      	bne.n	800381a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <osKernelInitialize+0x60>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e002      	b.n	8003820 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003820:	68fb      	ldr	r3, [r7, #12]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	200001f0 	.word	0x200001f0

08003830 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003836:	f3ef 8305 	mrs	r3, IPSR
 800383a:	60bb      	str	r3, [r7, #8]
  return(result);
 800383c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003842:	f3ef 8310 	mrs	r3, PRIMASK
 8003846:	607b      	str	r3, [r7, #4]
  return(result);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <osKernelStart+0x32>
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <osKernelStart+0x64>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d109      	bne.n	800386a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003856:	f3ef 8311 	mrs	r3, BASEPRI
 800385a:	603b      	str	r3, [r7, #0]
  return(result);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003862:	f06f 0305 	mvn.w	r3, #5
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e00e      	b.n	8003888 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <osKernelStart+0x64>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003872:	4b08      	ldr	r3, [pc, #32]	; (8003894 <osKernelStart+0x64>)
 8003874:	2202      	movs	r2, #2
 8003876:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003878:	f001 faa2 	bl	8004dc0 <vTaskStartScheduler>
      stat = osOK;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e002      	b.n	8003888 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003888:	68fb      	ldr	r3, [r7, #12]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200001f0 	.word	0x200001f0

08003898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b092      	sub	sp, #72	; 0x48
 800389c:	af04      	add	r7, sp, #16
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038a8:	f3ef 8305 	mrs	r3, IPSR
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f040 8094 	bne.w	80039de <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ba:	623b      	str	r3, [r7, #32]
  return(result);
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f040 808d 	bne.w	80039de <osThreadNew+0x146>
 80038c4:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <osThreadNew+0x150>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d106      	bne.n	80038da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038cc:	f3ef 8311 	mrs	r3, BASEPRI
 80038d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f040 8082 	bne.w	80039de <osThreadNew+0x146>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d07e      	beq.n	80039de <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80038e4:	2318      	movs	r3, #24
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80038e8:	2300      	movs	r3, #0
 80038ea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80038ec:	f107 031b 	add.w	r3, r7, #27
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d045      	beq.n	800398a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <osThreadNew+0x74>
        name = attr->name;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <osThreadNew+0x9a>
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	2b38      	cmp	r3, #56	; 0x38
 8003924:	d805      	bhi.n	8003932 <osThreadNew+0x9a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <osThreadNew+0x9e>
        return (NULL);
 8003932:	2300      	movs	r3, #0
 8003934:	e054      	b.n	80039e0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00e      	beq.n	800396c <osThreadNew+0xd4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b5b      	cmp	r3, #91	; 0x5b
 8003954:	d90a      	bls.n	800396c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800395a:	2b00      	cmp	r3, #0
 800395c:	d006      	beq.n	800396c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <osThreadNew+0xd4>
        mem = 1;
 8003966:	2301      	movs	r3, #1
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
 800396a:	e010      	b.n	800398e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10c      	bne.n	800398e <osThreadNew+0xf6>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <osThreadNew+0xf6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <osThreadNew+0xf6>
          mem = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
 8003988:	e001      	b.n	800398e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	2b01      	cmp	r3, #1
 8003992:	d110      	bne.n	80039b6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800399c:	9202      	str	r2, [sp, #8]
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f001 f83c 	bl	8004a28 <xTaskCreateStatic>
 80039b0:	4603      	mov	r3, r0
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e013      	b.n	80039de <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d110      	bne.n	80039de <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	b29a      	uxth	r2, r3
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f001 f886 	bl	8004ae0 <xTaskCreate>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <osThreadNew+0x146>
          hTask = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039de:	697b      	ldr	r3, [r7, #20]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3738      	adds	r7, #56	; 0x38
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200001f0 	.word	0x200001f0

080039ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f4:	f3ef 8305 	mrs	r3, IPSR
 80039f8:	613b      	str	r3, [r7, #16]
  return(result);
 80039fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10f      	bne.n	8003a20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a00:	f3ef 8310 	mrs	r3, PRIMASK
 8003a04:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <osDelay+0x34>
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <osDelay+0x58>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d109      	bne.n	8003a28 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a14:	f3ef 8311 	mrs	r3, BASEPRI
 8003a18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <osDelay+0x3c>
    stat = osErrorISR;
 8003a20:	f06f 0305 	mvn.w	r3, #5
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	e007      	b.n	8003a38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f001 f990 	bl	8004d58 <vTaskDelay>
    }
  }

  return (stat);
 8003a38:	697b      	ldr	r3, [r7, #20]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200001f0 	.word	0x200001f0

08003a48 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	; 0x30
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a58:	f3ef 8305 	mrs	r3, IPSR
 8003a5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a5e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d16f      	bne.n	8003b44 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a64:	f3ef 8310 	mrs	r3, PRIMASK
 8003a68:	617b      	str	r3, [r7, #20]
  return(result);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d169      	bne.n	8003b44 <osMessageQueueNew+0xfc>
 8003a70:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <osMessageQueueNew+0x108>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d105      	bne.n	8003a84 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a78:	f3ef 8311 	mrs	r3, BASEPRI
 8003a7c:	613b      	str	r3, [r7, #16]
  return(result);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d15f      	bne.n	8003b44 <osMessageQueueNew+0xfc>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d05c      	beq.n	8003b44 <osMessageQueueNew+0xfc>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d059      	beq.n	8003b44 <osMessageQueueNew+0xfc>
    mem = -1;
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
 8003a94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d029      	beq.n	8003af0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d012      	beq.n	8003aca <osMessageQueueNew+0x82>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b4f      	cmp	r3, #79	; 0x4f
 8003aaa:	d90e      	bls.n	8003aca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d302      	bcc.n	8003aca <osMessageQueueNew+0x82>
        mem = 1;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	e014      	b.n	8003af4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d110      	bne.n	8003af4 <osMessageQueueNew+0xac>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10c      	bne.n	8003af4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <osMessageQueueNew+0xac>
          mem = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	623b      	str	r3, [r7, #32]
 8003aee:	e001      	b.n	8003af4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d10b      	bne.n	8003b12 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2100      	movs	r1, #0
 8003b04:	9100      	str	r1, [sp, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fa53 	bl	8003fb4 <xQueueGenericCreateStatic>
 8003b0e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b10:	e008      	b.n	8003b24 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d105      	bne.n	8003b24 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fac0 	bl	80040a2 <xQueueGenericCreate>
 8003b22:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	e001      	b.n	8003b3c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b3c:	69f9      	ldr	r1, [r7, #28]
 8003b3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b40:	f000 ff16 	bl	8004970 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3728      	adds	r7, #40	; 0x28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200001f0 	.word	0x200001f0

08003b54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b6c:	f3ef 8305 	mrs	r3, IPSR
 8003b70:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b72:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10f      	bne.n	8003b98 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b78:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <osMessageQueuePut+0x44>
 8003b84:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <osMessageQueuePut+0xe0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d12e      	bne.n	8003bea <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b90:	617b      	str	r3, [r7, #20]
  return(result);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d028      	beq.n	8003bea <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <osMessageQueuePut+0x56>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <osMessageQueuePut+0x56>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003baa:	f06f 0303 	mvn.w	r3, #3
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bb0:	e039      	b.n	8003c26 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003bb6:	f107 0210 	add.w	r2, r7, #16
 8003bba:	2300      	movs	r3, #0
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	6a38      	ldr	r0, [r7, #32]
 8003bc0:	f000 fbce 	bl	8004360 <xQueueGenericSendFromISR>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d003      	beq.n	8003bd2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003bca:	f06f 0302 	mvn.w	r3, #2
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bd0:	e029      	b.n	8003c26 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d026      	beq.n	8003c26 <osMessageQueuePut+0xd2>
 8003bd8:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <osMessageQueuePut+0xe4>)
 8003bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003be8:	e01d      	b.n	8003c26 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <osMessageQueuePut+0xa2>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003bf6:	f06f 0303 	mvn.w	r3, #3
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfc:	e014      	b.n	8003c28 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003bfe:	2300      	movs	r3, #0
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	6a38      	ldr	r0, [r7, #32]
 8003c06:	f000 faad 	bl	8004164 <xQueueGenericSend>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d00b      	beq.n	8003c28 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003c16:	f06f 0301 	mvn.w	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	e004      	b.n	8003c28 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003c1e:	f06f 0302 	mvn.w	r3, #2
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
 8003c24:	e000      	b.n	8003c28 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3728      	adds	r7, #40	; 0x28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200001f0 	.word	0x200001f0
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c52:	f3ef 8305 	mrs	r3, IPSR
 8003c56:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c58:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c62:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <osMessageQueueGet+0x42>
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <osMessageQueueGet+0xdc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d12e      	bne.n	8003cd0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c72:	f3ef 8311 	mrs	r3, BASEPRI
 8003c76:	617b      	str	r3, [r7, #20]
  return(result);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d028      	beq.n	8003cd0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <osMessageQueueGet+0x54>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <osMessageQueueGet+0x54>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003c90:	f06f 0303 	mvn.w	r3, #3
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c96:	e038      	b.n	8003d0a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	6a38      	ldr	r0, [r7, #32]
 8003ca6:	f000 fcd3 	bl	8004650 <xQueueReceiveFromISR>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d003      	beq.n	8003cb8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003cb0:	f06f 0302 	mvn.w	r3, #2
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cb6:	e028      	b.n	8003d0a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d025      	beq.n	8003d0a <osMessageQueueGet+0xce>
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <osMessageQueueGet+0xe0>)
 8003cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003cce:	e01c      	b.n	8003d0a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <osMessageQueueGet+0xa0>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003cdc:	f06f 0303 	mvn.w	r3, #3
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	e013      	b.n	8003d0c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	6a38      	ldr	r0, [r7, #32]
 8003cea:	f000 fbd1 	bl	8004490 <xQueueReceive>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d00b      	beq.n	8003d0c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003cfa:	f06f 0301 	mvn.w	r3, #1
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003d00:	e004      	b.n	8003d0c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003d02:	f06f 0302 	mvn.w	r3, #2
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
 8003d08:	e000      	b.n	8003d0c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3728      	adds	r7, #40	; 0x28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200001f0 	.word	0x200001f0
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a06      	ldr	r2, [pc, #24]	; (8003d48 <vApplicationGetIdleTaskMemory+0x28>)
 8003d30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4a05      	ldr	r2, [pc, #20]	; (8003d4c <vApplicationGetIdleTaskMemory+0x2c>)
 8003d36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	601a      	str	r2, [r3, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	200001f4 	.word	0x200001f4
 8003d4c:	20000250 	.word	0x20000250

08003d50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <vApplicationGetTimerTaskMemory+0x2c>)
 8003d60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4a06      	ldr	r2, [pc, #24]	; (8003d80 <vApplicationGetTimerTaskMemory+0x30>)
 8003d66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d6e:	601a      	str	r2, [r3, #0]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000450 	.word	0x20000450
 8003d80:	200004ac 	.word	0x200004ac

08003d84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f103 0208 	add.w	r2, r3, #8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f103 0208 	add.w	r2, r3, #8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f103 0208 	add.w	r2, r3, #8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d103      	bne.n	8003e40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e00c      	b.n	8003e5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3308      	adds	r3, #8
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	e002      	b.n	8003e4e <vListInsert+0x2e>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d2f6      	bcs.n	8003e48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6892      	ldr	r2, [r2, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6852      	ldr	r2, [r2, #4]
 8003eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d103      	bne.n	8003ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	1e5a      	subs	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
	...

08003ee4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f0e:	f002 f885 	bl	800601c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f1e:	fb01 f303 	mul.w	r3, r1, r3
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	68f9      	ldr	r1, [r7, #12]
 8003f42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	441a      	add	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	22ff      	movs	r2, #255	; 0xff
 8003f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	22ff      	movs	r2, #255	; 0xff
 8003f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d114      	bne.n	8003f8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01a      	beq.n	8003fa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3310      	adds	r3, #16
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 f9af 	bl	80052d4 <xTaskRemoveFromEventList>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <xQueueGenericReset+0xcc>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	e009      	b.n	8003fa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3310      	adds	r3, #16
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fef6 	bl	8003d84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3324      	adds	r3, #36	; 0x24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fef1 	bl	8003d84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fa2:	f002 f86b 	bl	800607c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fa6:	2301      	movs	r3, #1
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08e      	sub	sp, #56	; 0x38
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <xQueueGenericCreateStatic+0x52>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <xQueueGenericCreateStatic+0x56>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <xQueueGenericCreateStatic+0x58>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	623b      	str	r3, [r7, #32]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <xQueueGenericCreateStatic+0x7e>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <xQueueGenericCreateStatic+0x82>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <xQueueGenericCreateStatic+0x84>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	61fb      	str	r3, [r7, #28]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004052:	2350      	movs	r3, #80	; 0x50
 8004054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b50      	cmp	r3, #80	; 0x50
 800405a:	d00a      	beq.n	8004072 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	61bb      	str	r3, [r7, #24]
}
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004084:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f843 	bl	800411e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800409a:	4618      	mov	r0, r3
 800409c:	3730      	adds	r7, #48	; 0x30
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b08a      	sub	sp, #40	; 0x28
 80040a6:	af02      	add	r7, sp, #8
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	4613      	mov	r3, r2
 80040ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <xQueueGenericCreate+0x2a>
	__asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	613b      	str	r3, [r7, #16]
}
 80040c8:	bf00      	nop
 80040ca:	e7fe      	b.n	80040ca <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	e004      	b.n	80040e2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3350      	adds	r3, #80	; 0x50
 80040e6:	4618      	mov	r0, r3
 80040e8:	f002 f898 	bl	800621c <pvPortMalloc>
 80040ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00f      	beq.n	8004114 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	3350      	adds	r3, #80	; 0x50
 80040f8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004102:	79fa      	ldrb	r2, [r7, #7]
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f805 	bl	800411e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004114:	69bb      	ldr	r3, [r7, #24]
	}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e002      	b.n	8004140 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800414c:	2101      	movs	r1, #1
 800414e:	69b8      	ldr	r0, [r7, #24]
 8004150:	f7ff fec8 	bl	8003ee4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08e      	sub	sp, #56	; 0x38
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004172:	2300      	movs	r3, #0
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <xQueueGenericSend+0x32>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d103      	bne.n	80041a4 <xQueueGenericSend+0x40>
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <xQueueGenericSend+0x44>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <xQueueGenericSend+0x46>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <xQueueGenericSend+0x60>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d103      	bne.n	80041d2 <xQueueGenericSend+0x6e>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <xQueueGenericSend+0x72>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <xQueueGenericSend+0x74>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	623b      	str	r3, [r7, #32]
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041f2:	f001 fa31 	bl	8005658 <xTaskGetSchedulerState>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <xQueueGenericSend+0x9e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <xQueueGenericSend+0xa2>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <xQueueGenericSend+0xa4>
 8004206:	2300      	movs	r3, #0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <xQueueGenericSend+0xbe>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	61fb      	str	r3, [r7, #28]
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004222:	f001 fefb 	bl	800601c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <xQueueGenericSend+0xd4>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d129      	bne.n	800428c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800423e:	f000 fa87 	bl	8004750 <prvCopyDataToQueue>
 8004242:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d010      	beq.n	800426e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	3324      	adds	r3, #36	; 0x24
 8004250:	4618      	mov	r0, r3
 8004252:	f001 f83f 	bl	80052d4 <xTaskRemoveFromEventList>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d013      	beq.n	8004284 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800425c:	4b3f      	ldr	r3, [pc, #252]	; (800435c <xQueueGenericSend+0x1f8>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	e00a      	b.n	8004284 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004274:	4b39      	ldr	r3, [pc, #228]	; (800435c <xQueueGenericSend+0x1f8>)
 8004276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004284:	f001 fefa 	bl	800607c <vPortExitCritical>
				return pdPASS;
 8004288:	2301      	movs	r3, #1
 800428a:	e063      	b.n	8004354 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004292:	f001 fef3 	bl	800607c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004296:	2300      	movs	r3, #0
 8004298:	e05c      	b.n	8004354 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800429a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	4618      	mov	r0, r3
 80042a6:	f001 f879 	bl	800539c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042aa:	2301      	movs	r3, #1
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042ae:	f001 fee5 	bl	800607c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042b2:	f000 fdeb 	bl	8004e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042b6:	f001 feb1 	bl	800601c <vPortEnterCritical>
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d103      	bne.n	80042d0 <xQueueGenericSend+0x16c>
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d6:	b25b      	sxtb	r3, r3
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d103      	bne.n	80042e6 <xQueueGenericSend+0x182>
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e6:	f001 fec9 	bl	800607c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ea:	1d3a      	adds	r2, r7, #4
 80042ec:	f107 0314 	add.w	r3, r7, #20
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f001 f868 	bl	80053c8 <xTaskCheckForTimeOut>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d124      	bne.n	8004348 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004300:	f000 fb1e 	bl	8004940 <prvIsQueueFull>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d018      	beq.n	800433c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	3310      	adds	r3, #16
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f000 ff8e 	bl	8005234 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431a:	f000 faa9 	bl	8004870 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800431e:	f000 fdc3 	bl	8004ea8 <xTaskResumeAll>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	f47f af7c 	bne.w	8004222 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <xQueueGenericSend+0x1f8>)
 800432c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	e772      	b.n	8004222 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800433c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800433e:	f000 fa97 	bl	8004870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004342:	f000 fdb1 	bl	8004ea8 <xTaskResumeAll>
 8004346:	e76c      	b.n	8004222 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800434a:	f000 fa91 	bl	8004870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800434e:	f000 fdab 	bl	8004ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004352:	2300      	movs	r3, #0
		}
	}
}
 8004354:	4618      	mov	r0, r3
 8004356:	3738      	adds	r7, #56	; 0x38
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08e      	sub	sp, #56	; 0x38
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d103      	bne.n	800439c <xQueueGenericSendFromISR+0x3c>
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <xQueueGenericSendFromISR+0x40>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <xQueueGenericSendFromISR+0x42>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	623b      	str	r3, [r7, #32]
}
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d103      	bne.n	80043ca <xQueueGenericSendFromISR+0x6a>
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <xQueueGenericSendFromISR+0x6e>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <xQueueGenericSendFromISR+0x70>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	61fb      	str	r3, [r7, #28]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043ea:	f001 fed9 	bl	80061a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043ee:	f3ef 8211 	mrs	r2, BASEPRI
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	61ba      	str	r2, [r7, #24]
 8004404:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004406:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <xQueueGenericSendFromISR+0xbc>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d12c      	bne.n	8004476 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442c:	f000 f990 	bl	8004750 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004430:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d112      	bne.n	8004460 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	3324      	adds	r3, #36	; 0x24
 8004446:	4618      	mov	r0, r3
 8004448:	f000 ff44 	bl	80052d4 <xTaskRemoveFromEventList>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00e      	beq.n	8004470 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e007      	b.n	8004470 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004464:	3301      	adds	r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	b25a      	sxtb	r2, r3
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004470:	2301      	movs	r3, #1
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004474:	e001      	b.n	800447a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004476:	2300      	movs	r3, #0
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004484:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004488:	4618      	mov	r0, r3
 800448a:	3738      	adds	r7, #56	; 0x38
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800449c:	2300      	movs	r3, #0
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <xQueueReceive+0x30>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	623b      	str	r3, [r7, #32]
}
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <xQueueReceive+0x3e>
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <xQueueReceive+0x42>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <xQueueReceive+0x44>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <xQueueReceive+0x5e>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	61fb      	str	r3, [r7, #28]
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ee:	f001 f8b3 	bl	8005658 <xTaskGetSchedulerState>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <xQueueReceive+0x6e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <xQueueReceive+0x72>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <xQueueReceive+0x74>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <xQueueReceive+0x8e>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	61bb      	str	r3, [r7, #24]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800451e:	f001 fd7d 	bl	800601c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01f      	beq.n	800456e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004532:	f000 f977 	bl	8004824 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	1e5a      	subs	r2, r3, #1
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00f      	beq.n	8004566 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	3310      	adds	r3, #16
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fec2 	bl	80052d4 <xTaskRemoveFromEventList>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004556:	4b3d      	ldr	r3, [pc, #244]	; (800464c <xQueueReceive+0x1bc>)
 8004558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004566:	f001 fd89 	bl	800607c <vPortExitCritical>
				return pdPASS;
 800456a:	2301      	movs	r3, #1
 800456c:	e069      	b.n	8004642 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d103      	bne.n	800457c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004574:	f001 fd82 	bl	800607c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004578:	2300      	movs	r3, #0
 800457a:	e062      	b.n	8004642 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004582:	f107 0310 	add.w	r3, r7, #16
 8004586:	4618      	mov	r0, r3
 8004588:	f000 ff08 	bl	800539c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800458c:	2301      	movs	r3, #1
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004590:	f001 fd74 	bl	800607c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004594:	f000 fc7a 	bl	8004e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004598:	f001 fd40 	bl	800601c <vPortEnterCritical>
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a2:	b25b      	sxtb	r3, r3
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d103      	bne.n	80045b2 <xQueueReceive+0x122>
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d103      	bne.n	80045c8 <xQueueReceive+0x138>
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045c8:	f001 fd58 	bl	800607c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045cc:	1d3a      	adds	r2, r7, #4
 80045ce:	f107 0310 	add.w	r3, r7, #16
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fef7 	bl	80053c8 <xTaskCheckForTimeOut>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d123      	bne.n	8004628 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e2:	f000 f997 	bl	8004914 <prvIsQueueEmpty>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d017      	beq.n	800461c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fe1d 	bl	8005234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fc:	f000 f938 	bl	8004870 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004600:	f000 fc52 	bl	8004ea8 <xTaskResumeAll>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d189      	bne.n	800451e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <xQueueReceive+0x1bc>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	e780      	b.n	800451e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800461c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800461e:	f000 f927 	bl	8004870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004622:	f000 fc41 	bl	8004ea8 <xTaskResumeAll>
 8004626:	e77a      	b.n	800451e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462a:	f000 f921 	bl	8004870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800462e:	f000 fc3b 	bl	8004ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004634:	f000 f96e 	bl	8004914 <prvIsQueueEmpty>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	f43f af6f 	beq.w	800451e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004640:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004642:	4618      	mov	r0, r3
 8004644:	3730      	adds	r7, #48	; 0x30
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	623b      	str	r3, [r7, #32]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <xQueueReceiveFromISR+0x3a>
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <xQueueReceiveFromISR+0x3e>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <xQueueReceiveFromISR+0x40>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	61fb      	str	r3, [r7, #28]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046aa:	f001 fd79 	bl	80061a0 <vPortValidateInterruptPriority>
	__asm volatile
 80046ae:	f3ef 8211 	mrs	r2, BASEPRI
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	61ba      	str	r2, [r7, #24]
 80046c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d02f      	beq.n	8004736 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e4:	f000 f89e 	bl	8004824 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	1e5a      	subs	r2, r3, #1
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80046f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d112      	bne.n	8004720 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d016      	beq.n	8004730 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	3310      	adds	r3, #16
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fde4 	bl	80052d4 <xTaskRemoveFromEventList>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00e      	beq.n	8004730 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e007      	b.n	8004730 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004724:	3301      	adds	r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	b25a      	sxtb	r2, r3
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004730:	2301      	movs	r3, #1
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
 8004734:	e001      	b.n	800473a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004736:	2300      	movs	r3, #0
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f383 8811 	msr	BASEPRI, r3
}
 8004744:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004748:	4618      	mov	r0, r3
 800474a:	3738      	adds	r7, #56	; 0x38
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10d      	bne.n	800478a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d14d      	bne.n	8004812 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 ff8a 	bl	8005694 <xTaskPriorityDisinherit>
 8004780:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	605a      	str	r2, [r3, #4]
 8004788:	e043      	b.n	8004812 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d119      	bne.n	80047c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6898      	ldr	r0, [r3, #8]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	461a      	mov	r2, r3
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	f001 ff44 	bl	8006628 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	441a      	add	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d32b      	bcc.n	8004812 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	e026      	b.n	8004812 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68d8      	ldr	r0, [r3, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	461a      	mov	r2, r3
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	f001 ff2a 	bl	8006628 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	425b      	negs	r3, r3
 80047de:	441a      	add	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d207      	bcs.n	8004800 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	425b      	negs	r3, r3
 80047fa:	441a      	add	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d105      	bne.n	8004812 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	3b01      	subs	r3, #1
 8004810:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800481a:	697b      	ldr	r3, [r7, #20]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	441a      	add	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d303      	bcc.n	8004858 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68d9      	ldr	r1, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	461a      	mov	r2, r3
 8004862:	6838      	ldr	r0, [r7, #0]
 8004864:	f001 fee0 	bl	8006628 <memcpy>
	}
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004878:	f001 fbd0 	bl	800601c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004882:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004884:	e011      	b.n	80048aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3324      	adds	r3, #36	; 0x24
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fd1e 	bl	80052d4 <xTaskRemoveFromEventList>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800489e:	f000 fdf5 	bl	800548c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dce9      	bgt.n	8004886 <prvUnlockQueue+0x16>
 80048b2:	e000      	b.n	80048b6 <prvUnlockQueue+0x46>
					break;
 80048b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	22ff      	movs	r2, #255	; 0xff
 80048ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048be:	f001 fbdd 	bl	800607c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048c2:	f001 fbab 	bl	800601c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ce:	e011      	b.n	80048f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3310      	adds	r3, #16
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fcf9 	bl	80052d4 <xTaskRemoveFromEventList>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048e8:	f000 fdd0 	bl	800548c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048ec:	7bbb      	ldrb	r3, [r7, #14]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	dce9      	bgt.n	80048d0 <prvUnlockQueue+0x60>
 80048fc:	e000      	b.n	8004900 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	22ff      	movs	r2, #255	; 0xff
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004908:	f001 fbb8 	bl	800607c <vPortExitCritical>
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800491c:	f001 fb7e 	bl	800601c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004928:	2301      	movs	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e001      	b.n	8004932 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004932:	f001 fba3 	bl	800607c <vPortExitCritical>

	return xReturn;
 8004936:	68fb      	ldr	r3, [r7, #12]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004948:	f001 fb68 	bl	800601c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	429a      	cmp	r2, r3
 8004956:	d102      	bne.n	800495e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e001      	b.n	8004962 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004962:	f001 fb8b 	bl	800607c <vPortExitCritical>

	return xReturn;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e014      	b.n	80049aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004980:	4a0e      	ldr	r2, [pc, #56]	; (80049bc <vQueueAddToRegistry+0x4c>)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800498c:	490b      	ldr	r1, [pc, #44]	; (80049bc <vQueueAddToRegistry+0x4c>)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <vQueueAddToRegistry+0x4c>)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4413      	add	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049a2:	e006      	b.n	80049b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b07      	cmp	r3, #7
 80049ae:	d9e7      	bls.n	8004980 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	200008ac 	.word	0x200008ac

080049c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049d0:	f001 fb24 	bl	800601c <vPortEnterCritical>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049da:	b25b      	sxtb	r3, r3
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d103      	bne.n	80049ea <vQueueWaitForMessageRestricted+0x2a>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f0:	b25b      	sxtb	r3, r3
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d103      	bne.n	8004a00 <vQueueWaitForMessageRestricted+0x40>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a00:	f001 fb3c 	bl	800607c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d106      	bne.n	8004a1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	3324      	adds	r3, #36	; 0x24
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fc31 	bl	800527c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a1a:	6978      	ldr	r0, [r7, #20]
 8004a1c:	f7ff ff28 	bl	8004870 <prvUnlockQueue>
	}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08e      	sub	sp, #56	; 0x38
 8004a2c:	af04      	add	r7, sp, #16
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	623b      	str	r3, [r7, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xTaskCreateStatic+0x46>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	61fb      	str	r3, [r7, #28]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a6e:	235c      	movs	r3, #92	; 0x5c
 8004a70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b5c      	cmp	r3, #92	; 0x5c
 8004a76:	d00a      	beq.n	8004a8e <xTaskCreateStatic+0x66>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	61bb      	str	r3, [r7, #24]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01e      	beq.n	8004ad2 <xTaskCreateStatic+0xaa>
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01b      	beq.n	8004ad2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004aac:	2300      	movs	r3, #0
 8004aae:	9303      	str	r3, [sp, #12]
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	9302      	str	r3, [sp, #8]
 8004ab4:	f107 0314 	add.w	r3, r7, #20
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f850 	bl	8004b6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004acc:	f000 f8d4 	bl	8004c78 <prvAddNewTaskToReadyList>
 8004ad0:	e001      	b.n	8004ad6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ad6:	697b      	ldr	r3, [r7, #20]
	}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	; 0x30
 8004ae4:	af04      	add	r7, sp, #16
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 fb91 	bl	800621c <pvPortMalloc>
 8004afa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00e      	beq.n	8004b20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b02:	205c      	movs	r0, #92	; 0x5c
 8004b04:	f001 fb8a 	bl	800621c <pvPortMalloc>
 8004b08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
 8004b16:	e005      	b.n	8004b24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f001 fc43 	bl	80063a4 <vPortFree>
 8004b1e:	e001      	b.n	8004b24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d017      	beq.n	8004b5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	2300      	movs	r3, #0
 8004b36:	9303      	str	r3, [sp, #12]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	9302      	str	r3, [sp, #8]
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f80e 	bl	8004b6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b4e:	69f8      	ldr	r0, [r7, #28]
 8004b50:	f000 f892 	bl	8004c78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b54:	2301      	movs	r3, #1
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	e002      	b.n	8004b60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b60:	69bb      	ldr	r3, [r7, #24]
	}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b088      	sub	sp, #32
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	461a      	mov	r2, r3
 8004b82:	21a5      	movs	r1, #165	; 0xa5
 8004b84:	f001 fd5e 	bl	8006644 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b92:	3b01      	subs	r3, #1
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f023 0307 	bic.w	r3, r3, #7
 8004ba0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	617b      	str	r3, [r7, #20]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	e012      	b.n	8004bee <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	7819      	ldrb	r1, [r3, #0]
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3334      	adds	r3, #52	; 0x34
 8004bd8:	460a      	mov	r2, r1
 8004bda:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d006      	beq.n	8004bf6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2b0f      	cmp	r3, #15
 8004bf2:	d9e9      	bls.n	8004bc8 <prvInitialiseNewTask+0x5e>
 8004bf4:	e000      	b.n	8004bf8 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004bf6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	2b37      	cmp	r3, #55	; 0x37
 8004c04:	d901      	bls.n	8004c0a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c06:	2337      	movs	r3, #55	; 0x37
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c14:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	2200      	movs	r2, #0
 8004c1a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff f8ce 	bl	8003dc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	3318      	adds	r3, #24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff f8c9 	bl	8003dc2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2200      	movs	r2, #0
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	69b8      	ldr	r0, [r7, #24]
 8004c5a:	f001 f8ef 	bl	8005e3c <pxPortInitialiseStack>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c70:	bf00      	nop
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c80:	f001 f9cc 	bl	800601c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c84:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <prvAddNewTaskToReadyList+0xc4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	4a2c      	ldr	r2, [pc, #176]	; (8004d3c <prvAddNewTaskToReadyList+0xc4>)
 8004c8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c8e:	4b2c      	ldr	r3, [pc, #176]	; (8004d40 <prvAddNewTaskToReadyList+0xc8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c96:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <prvAddNewTaskToReadyList+0xc8>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c9c:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <prvAddNewTaskToReadyList+0xc4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d110      	bne.n	8004cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ca4:	f000 fc16 	bl	80054d4 <prvInitialiseTaskLists>
 8004ca8:	e00d      	b.n	8004cc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <prvAddNewTaskToReadyList+0xcc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cb2:	4b23      	ldr	r3, [pc, #140]	; (8004d40 <prvAddNewTaskToReadyList+0xc8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d802      	bhi.n	8004cc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <prvAddNewTaskToReadyList+0xc8>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <prvAddNewTaskToReadyList+0xd0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <prvAddNewTaskToReadyList+0xd0>)
 8004cce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <prvAddNewTaskToReadyList+0xd0>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <prvAddNewTaskToReadyList+0xd4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d903      	bls.n	8004cec <prvAddNewTaskToReadyList+0x74>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <prvAddNewTaskToReadyList+0xd4>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <prvAddNewTaskToReadyList+0xd8>)
 8004cfa:	441a      	add	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7ff f869 	bl	8003dda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d08:	f001 f9b8 	bl	800607c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <prvAddNewTaskToReadyList+0xcc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00e      	beq.n	8004d32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <prvAddNewTaskToReadyList+0xc8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d207      	bcs.n	8004d32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d22:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <prvAddNewTaskToReadyList+0xdc>)
 8004d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000dc0 	.word	0x20000dc0
 8004d40:	200008ec 	.word	0x200008ec
 8004d44:	20000dcc 	.word	0x20000dcc
 8004d48:	20000ddc 	.word	0x20000ddc
 8004d4c:	20000dc8 	.word	0x20000dc8
 8004d50:	200008f0 	.word	0x200008f0
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d017      	beq.n	8004d9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <vTaskDelay+0x60>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <vTaskDelay+0x30>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60bb      	str	r3, [r7, #8]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d88:	f000 f880 	bl	8004e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fcee 	bl	8005770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d94:	f000 f888 	bl	8004ea8 <xTaskResumeAll>
 8004d98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <vTaskDelay+0x64>)
 8004da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000de8 	.word	0x20000de8
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dce:	463a      	mov	r2, r7
 8004dd0:	1d39      	adds	r1, r7, #4
 8004dd2:	f107 0308 	add.w	r3, r7, #8
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe ffa2 	bl	8003d20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	9202      	str	r2, [sp, #8]
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	2300      	movs	r3, #0
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	2300      	movs	r3, #0
 8004dec:	460a      	mov	r2, r1
 8004dee:	4921      	ldr	r1, [pc, #132]	; (8004e74 <vTaskStartScheduler+0xb4>)
 8004df0:	4821      	ldr	r0, [pc, #132]	; (8004e78 <vTaskStartScheduler+0xb8>)
 8004df2:	f7ff fe19 	bl	8004a28 <xTaskCreateStatic>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <vTaskStartScheduler+0xbc>)
 8004dfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004dfc:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <vTaskStartScheduler+0xbc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e04:	2301      	movs	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e001      	b.n	8004e0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d102      	bne.n	8004e1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e14:	f000 fd00 	bl	8005818 <xTimerCreateTimerTask>
 8004e18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d116      	bne.n	8004e4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	613b      	str	r3, [r7, #16]
}
 8004e32:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e34:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <vTaskStartScheduler+0xc0>)
 8004e36:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <vTaskStartScheduler+0xc4>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <vTaskStartScheduler+0xc8>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e48:	f001 f876 	bl	8005f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e4c:	e00e      	b.n	8004e6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d10a      	bne.n	8004e6c <vTaskStartScheduler+0xac>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	60fb      	str	r3, [r7, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	e7fe      	b.n	8004e6a <vTaskStartScheduler+0xaa>
}
 8004e6c:	bf00      	nop
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	08007df0 	.word	0x08007df0
 8004e78:	080054a5 	.word	0x080054a5
 8004e7c:	20000de4 	.word	0x20000de4
 8004e80:	20000de0 	.word	0x20000de0
 8004e84:	20000dcc 	.word	0x20000dcc
 8004e88:	20000dc4 	.word	0x20000dc4

08004e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <vTaskSuspendAll+0x18>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	4a03      	ldr	r2, [pc, #12]	; (8004ea4 <vTaskSuspendAll+0x18>)
 8004e98:	6013      	str	r3, [r2, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000de8 	.word	0x20000de8

08004ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eb6:	4b42      	ldr	r3, [pc, #264]	; (8004fc0 <xTaskResumeAll+0x118>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	603b      	str	r3, [r7, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	e7fe      	b.n	8004ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ed4:	f001 f8a2 	bl	800601c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ed8:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <xTaskResumeAll+0x118>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	4a38      	ldr	r2, [pc, #224]	; (8004fc0 <xTaskResumeAll+0x118>)
 8004ee0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee2:	4b37      	ldr	r3, [pc, #220]	; (8004fc0 <xTaskResumeAll+0x118>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d162      	bne.n	8004fb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004eea:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <xTaskResumeAll+0x11c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d05e      	beq.n	8004fb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef2:	e02f      	b.n	8004f54 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ef4:	4b34      	ldr	r3, [pc, #208]	; (8004fc8 <xTaskResumeAll+0x120>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3318      	adds	r3, #24
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe ffc5 	bl	8003e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe ffc0 	bl	8003e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <xTaskResumeAll+0x124>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d903      	bls.n	8004f24 <xTaskResumeAll+0x7c>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <xTaskResumeAll+0x124>)
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <xTaskResumeAll+0x128>)
 8004f32:	441a      	add	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fe ff4d 	bl	8003dda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	4b23      	ldr	r3, [pc, #140]	; (8004fd4 <xTaskResumeAll+0x12c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f4e:	4b22      	ldr	r3, [pc, #136]	; (8004fd8 <xTaskResumeAll+0x130>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f54:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <xTaskResumeAll+0x120>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1cb      	bne.n	8004ef4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f62:	f000 fb55 	bl	8005610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f66:	4b1d      	ldr	r3, [pc, #116]	; (8004fdc <xTaskResumeAll+0x134>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d010      	beq.n	8004f94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f72:	f000 f845 	bl	8005000 <xTaskIncrementTick>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f7c:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <xTaskResumeAll+0x130>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f1      	bne.n	8004f72 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <xTaskResumeAll+0x134>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f94:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <xTaskResumeAll+0x130>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <xTaskResumeAll+0x138>)
 8004fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fb0:	f001 f864 	bl	800607c <vPortExitCritical>

	return xAlreadyYielded;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000de8 	.word	0x20000de8
 8004fc4:	20000dc0 	.word	0x20000dc0
 8004fc8:	20000d80 	.word	0x20000d80
 8004fcc:	20000dc8 	.word	0x20000dc8
 8004fd0:	200008f0 	.word	0x200008f0
 8004fd4:	200008ec 	.word	0x200008ec
 8004fd8:	20000dd4 	.word	0x20000dd4
 8004fdc:	20000dd0 	.word	0x20000dd0
 8004fe0:	e000ed04 	.word	0xe000ed04

08004fe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fea:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <xTaskGetTickCount+0x18>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ff0:	687b      	ldr	r3, [r7, #4]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	20000dc4 	.word	0x20000dc4

08005000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500a:	4b51      	ldr	r3, [pc, #324]	; (8005150 <xTaskIncrementTick+0x150>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 808e 	bne.w	8005130 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005014:	4b4f      	ldr	r3, [pc, #316]	; (8005154 <xTaskIncrementTick+0x154>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800501c:	4a4d      	ldr	r2, [pc, #308]	; (8005154 <xTaskIncrementTick+0x154>)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d120      	bne.n	800506a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005028:	4b4b      	ldr	r3, [pc, #300]	; (8005158 <xTaskIncrementTick+0x158>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <xTaskIncrementTick+0x48>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	603b      	str	r3, [r7, #0]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <xTaskIncrementTick+0x46>
 8005048:	4b43      	ldr	r3, [pc, #268]	; (8005158 <xTaskIncrementTick+0x158>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	4b43      	ldr	r3, [pc, #268]	; (800515c <xTaskIncrementTick+0x15c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a41      	ldr	r2, [pc, #260]	; (8005158 <xTaskIncrementTick+0x158>)
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4a41      	ldr	r2, [pc, #260]	; (800515c <xTaskIncrementTick+0x15c>)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4b40      	ldr	r3, [pc, #256]	; (8005160 <xTaskIncrementTick+0x160>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	4a3f      	ldr	r2, [pc, #252]	; (8005160 <xTaskIncrementTick+0x160>)
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	f000 fad3 	bl	8005610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800506a:	4b3e      	ldr	r3, [pc, #248]	; (8005164 <xTaskIncrementTick+0x164>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d34e      	bcc.n	8005112 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005074:	4b38      	ldr	r3, [pc, #224]	; (8005158 <xTaskIncrementTick+0x158>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <xTaskIncrementTick+0x82>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <xTaskIncrementTick+0x84>
 8005082:	2300      	movs	r3, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005088:	4b36      	ldr	r3, [pc, #216]	; (8005164 <xTaskIncrementTick+0x164>)
 800508a:	f04f 32ff 	mov.w	r2, #4294967295
 800508e:	601a      	str	r2, [r3, #0]
					break;
 8005090:	e03f      	b.n	8005112 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005092:	4b31      	ldr	r3, [pc, #196]	; (8005158 <xTaskIncrementTick+0x158>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d203      	bcs.n	80050b2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050aa:	4a2e      	ldr	r2, [pc, #184]	; (8005164 <xTaskIncrementTick+0x164>)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6013      	str	r3, [r2, #0]
						break;
 80050b0:	e02f      	b.n	8005112 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe feea 	bl	8003e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	3318      	adds	r3, #24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fee1 	bl	8003e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d2:	4b25      	ldr	r3, [pc, #148]	; (8005168 <xTaskIncrementTick+0x168>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d903      	bls.n	80050e2 <xTaskIncrementTick+0xe2>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	4a22      	ldr	r2, [pc, #136]	; (8005168 <xTaskIncrementTick+0x168>)
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4a1f      	ldr	r2, [pc, #124]	; (800516c <xTaskIncrementTick+0x16c>)
 80050f0:	441a      	add	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f7fe fe6e 	bl	8003dda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005102:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <xTaskIncrementTick+0x170>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	429a      	cmp	r2, r3
 800510a:	d3b3      	bcc.n	8005074 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800510c:	2301      	movs	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005110:	e7b0      	b.n	8005074 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005112:	4b17      	ldr	r3, [pc, #92]	; (8005170 <xTaskIncrementTick+0x170>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	4914      	ldr	r1, [pc, #80]	; (800516c <xTaskIncrementTick+0x16c>)
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d907      	bls.n	800513a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800512a:	2301      	movs	r3, #1
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e004      	b.n	800513a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <xTaskIncrementTick+0x174>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	4a0f      	ldr	r2, [pc, #60]	; (8005174 <xTaskIncrementTick+0x174>)
 8005138:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800513a:	4b0f      	ldr	r3, [pc, #60]	; (8005178 <xTaskIncrementTick+0x178>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005142:	2301      	movs	r3, #1
 8005144:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005146:	697b      	ldr	r3, [r7, #20]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000de8 	.word	0x20000de8
 8005154:	20000dc4 	.word	0x20000dc4
 8005158:	20000d78 	.word	0x20000d78
 800515c:	20000d7c 	.word	0x20000d7c
 8005160:	20000dd8 	.word	0x20000dd8
 8005164:	20000de0 	.word	0x20000de0
 8005168:	20000dc8 	.word	0x20000dc8
 800516c:	200008f0 	.word	0x200008f0
 8005170:	200008ec 	.word	0x200008ec
 8005174:	20000dd0 	.word	0x20000dd0
 8005178:	20000dd4 	.word	0x20000dd4

0800517c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005182:	4b27      	ldr	r3, [pc, #156]	; (8005220 <vTaskSwitchContext+0xa4>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800518a:	4b26      	ldr	r3, [pc, #152]	; (8005224 <vTaskSwitchContext+0xa8>)
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005190:	e041      	b.n	8005216 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <vTaskSwitchContext+0xa8>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005198:	4b23      	ldr	r3, [pc, #140]	; (8005228 <vTaskSwitchContext+0xac>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e010      	b.n	80051c2 <vTaskSwitchContext+0x46>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <vTaskSwitchContext+0x40>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	607b      	str	r3, [r7, #4]
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <vTaskSwitchContext+0x3e>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3b01      	subs	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	491a      	ldr	r1, [pc, #104]	; (800522c <vTaskSwitchContext+0xb0>)
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0e4      	beq.n	80051a0 <vTaskSwitchContext+0x24>
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4a12      	ldr	r2, [pc, #72]	; (800522c <vTaskSwitchContext+0xb0>)
 80051e2:	4413      	add	r3, r2
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	3308      	adds	r3, #8
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d104      	bne.n	8005206 <vTaskSwitchContext+0x8a>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a08      	ldr	r2, [pc, #32]	; (8005230 <vTaskSwitchContext+0xb4>)
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	4a05      	ldr	r2, [pc, #20]	; (8005228 <vTaskSwitchContext+0xac>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6013      	str	r3, [r2, #0]
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	bc80      	pop	{r7}
 800521e:	4770      	bx	lr
 8005220:	20000de8 	.word	0x20000de8
 8005224:	20000dd4 	.word	0x20000dd4
 8005228:	20000dc8 	.word	0x20000dc8
 800522c:	200008f0 	.word	0x200008f0
 8005230:	200008ec 	.word	0x200008ec

08005234 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60fb      	str	r3, [r7, #12]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800525a:	4b07      	ldr	r3, [pc, #28]	; (8005278 <vTaskPlaceOnEventList+0x44>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3318      	adds	r3, #24
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fe fddc 	bl	8003e20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005268:	2101      	movs	r1, #1
 800526a:	6838      	ldr	r0, [r7, #0]
 800526c:	f000 fa80 	bl	8005770 <prvAddCurrentTaskToDelayedList>
}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	200008ec 	.word	0x200008ec

0800527c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	617b      	str	r3, [r7, #20]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3318      	adds	r3, #24
 80052aa:	4619      	mov	r1, r3
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7fe fd94 	bl	8003dda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	68b8      	ldr	r0, [r7, #8]
 80052c2:	f000 fa55 	bl	8005770 <prvAddCurrentTaskToDelayedList>
	}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200008ec 	.word	0x200008ec

080052d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	60fb      	str	r3, [r7, #12]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	3318      	adds	r3, #24
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe fdc3 	bl	8003e90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <xTaskRemoveFromEventList+0xb0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11d      	bne.n	800534e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	3304      	adds	r3, #4
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fdba 	bl	8003e90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	4b19      	ldr	r3, [pc, #100]	; (8005388 <xTaskRemoveFromEventList+0xb4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d903      	bls.n	8005330 <xTaskRemoveFromEventList+0x5c>
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	4a16      	ldr	r2, [pc, #88]	; (8005388 <xTaskRemoveFromEventList+0xb4>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4a13      	ldr	r2, [pc, #76]	; (800538c <xTaskRemoveFromEventList+0xb8>)
 800533e:	441a      	add	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f7fe fd47 	bl	8003dda <vListInsertEnd>
 800534c:	e005      	b.n	800535a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3318      	adds	r3, #24
 8005352:	4619      	mov	r1, r3
 8005354:	480e      	ldr	r0, [pc, #56]	; (8005390 <xTaskRemoveFromEventList+0xbc>)
 8005356:	f7fe fd40 	bl	8003dda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535e:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <xTaskRemoveFromEventList+0xc0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d905      	bls.n	8005374 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <xTaskRemoveFromEventList+0xc4>)
 800536e:	2201      	movs	r2, #1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e001      	b.n	8005378 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005378:	697b      	ldr	r3, [r7, #20]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000de8 	.word	0x20000de8
 8005388:	20000dc8 	.word	0x20000dc8
 800538c:	200008f0 	.word	0x200008f0
 8005390:	20000d80 	.word	0x20000d80
 8005394:	200008ec 	.word	0x200008ec
 8005398:	20000dd4 	.word	0x20000dd4

0800539c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <vTaskInternalSetTimeOutState+0x24>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <vTaskInternalSetTimeOutState+0x28>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	605a      	str	r2, [r3, #4]
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000dd8 	.word	0x20000dd8
 80053c4:	20000dc4 	.word	0x20000dc4

080053c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	613b      	str	r3, [r7, #16]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	60fb      	str	r3, [r7, #12]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800540a:	f000 fe07 	bl	800601c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800540e:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <xTaskCheckForTimeOut+0xbc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d102      	bne.n	800542e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	e023      	b.n	8005476 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <xTaskCheckForTimeOut+0xc0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d007      	beq.n	800544a <xTaskCheckForTimeOut+0x82>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e015      	b.n	8005476 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	429a      	cmp	r2, r3
 8005452:	d20b      	bcs.n	800546c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff ff9b 	bl	800539c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e004      	b.n	8005476 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005476:	f000 fe01 	bl	800607c <vPortExitCritical>

	return xReturn;
 800547a:	69fb      	ldr	r3, [r7, #28]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000dc4 	.word	0x20000dc4
 8005488:	20000dd8 	.word	0x20000dd8

0800548c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <vTaskMissedYield+0x14>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000dd4 	.word	0x20000dd4

080054a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054ac:	f000 f852 	bl	8005554 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <prvIdleTask+0x28>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d9f9      	bls.n	80054ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <prvIdleTask+0x2c>)
 80054ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054c8:	e7f0      	b.n	80054ac <prvIdleTask+0x8>
 80054ca:	bf00      	nop
 80054cc:	200008f0 	.word	0x200008f0
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054da:	2300      	movs	r3, #0
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	e00c      	b.n	80054fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4a12      	ldr	r2, [pc, #72]	; (8005534 <prvInitialiseTaskLists+0x60>)
 80054ec:	4413      	add	r3, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe fc48 	bl	8003d84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3301      	adds	r3, #1
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b37      	cmp	r3, #55	; 0x37
 80054fe:	d9ef      	bls.n	80054e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005500:	480d      	ldr	r0, [pc, #52]	; (8005538 <prvInitialiseTaskLists+0x64>)
 8005502:	f7fe fc3f 	bl	8003d84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005506:	480d      	ldr	r0, [pc, #52]	; (800553c <prvInitialiseTaskLists+0x68>)
 8005508:	f7fe fc3c 	bl	8003d84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800550c:	480c      	ldr	r0, [pc, #48]	; (8005540 <prvInitialiseTaskLists+0x6c>)
 800550e:	f7fe fc39 	bl	8003d84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005512:	480c      	ldr	r0, [pc, #48]	; (8005544 <prvInitialiseTaskLists+0x70>)
 8005514:	f7fe fc36 	bl	8003d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005518:	480b      	ldr	r0, [pc, #44]	; (8005548 <prvInitialiseTaskLists+0x74>)
 800551a:	f7fe fc33 	bl	8003d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800551e:	4b0b      	ldr	r3, [pc, #44]	; (800554c <prvInitialiseTaskLists+0x78>)
 8005520:	4a05      	ldr	r2, [pc, #20]	; (8005538 <prvInitialiseTaskLists+0x64>)
 8005522:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <prvInitialiseTaskLists+0x7c>)
 8005526:	4a05      	ldr	r2, [pc, #20]	; (800553c <prvInitialiseTaskLists+0x68>)
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	200008f0 	.word	0x200008f0
 8005538:	20000d50 	.word	0x20000d50
 800553c:	20000d64 	.word	0x20000d64
 8005540:	20000d80 	.word	0x20000d80
 8005544:	20000d94 	.word	0x20000d94
 8005548:	20000dac 	.word	0x20000dac
 800554c:	20000d78 	.word	0x20000d78
 8005550:	20000d7c 	.word	0x20000d7c

08005554 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800555a:	e019      	b.n	8005590 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800555c:	f000 fd5e 	bl	800601c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005560:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <prvCheckTasksWaitingTermination+0x50>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fc8f 	bl	8003e90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <prvCheckTasksWaitingTermination+0x54>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a0b      	ldr	r2, [pc, #44]	; (80055a8 <prvCheckTasksWaitingTermination+0x54>)
 800557a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <prvCheckTasksWaitingTermination+0x58>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3b01      	subs	r3, #1
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <prvCheckTasksWaitingTermination+0x58>)
 8005584:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005586:	f000 fd79 	bl	800607c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f810 	bl	80055b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <prvCheckTasksWaitingTermination+0x58>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e1      	bne.n	800555c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000d94 	.word	0x20000d94
 80055a8:	20000dc0 	.word	0x20000dc0
 80055ac:	20000da8 	.word	0x20000da8

080055b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d108      	bne.n	80055d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 feec 	bl	80063a4 <vPortFree>
				vPortFree( pxTCB );
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fee9 	bl	80063a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055d2:	e018      	b.n	8005606 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d103      	bne.n	80055e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fee0 	bl	80063a4 <vPortFree>
	}
 80055e4:	e00f      	b.n	8005606 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d00a      	beq.n	8005606 <prvDeleteTCB+0x56>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <prvDeleteTCB+0x54>
	}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005616:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <prvResetNextTaskUnblockTime+0x40>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <prvResetNextTaskUnblockTime+0x14>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <prvResetNextTaskUnblockTime+0x16>
 8005624:	2300      	movs	r3, #0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800562a:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <prvResetNextTaskUnblockTime+0x44>)
 800562c:	f04f 32ff 	mov.w	r2, #4294967295
 8005630:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005632:	e008      	b.n	8005646 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <prvResetNextTaskUnblockTime+0x40>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4a04      	ldr	r2, [pc, #16]	; (8005654 <prvResetNextTaskUnblockTime+0x44>)
 8005644:	6013      	str	r3, [r2, #0]
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr
 8005650:	20000d78 	.word	0x20000d78
 8005654:	20000de0 	.word	0x20000de0

08005658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <xTaskGetSchedulerState+0x34>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005666:	2301      	movs	r3, #1
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	e008      	b.n	800567e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566c:	4b08      	ldr	r3, [pc, #32]	; (8005690 <xTaskGetSchedulerState+0x38>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005674:	2302      	movs	r3, #2
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	e001      	b.n	800567e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800567e:	687b      	ldr	r3, [r7, #4]
	}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20000dcc 	.word	0x20000dcc
 8005690:	20000de8 	.word	0x20000de8

08005694 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d056      	beq.n	8005758 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056aa:	4b2e      	ldr	r3, [pc, #184]	; (8005764 <xTaskPriorityDisinherit+0xd0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d00a      	beq.n	80056ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60bb      	str	r3, [r7, #8]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	1e5a      	subs	r2, r3, #1
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d02c      	beq.n	8005758 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005702:	2b00      	cmp	r3, #0
 8005704:	d128      	bne.n	8005758 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3304      	adds	r3, #4
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe fbc0 	bl	8003e90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	4b0f      	ldr	r3, [pc, #60]	; (8005768 <xTaskPriorityDisinherit+0xd4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d903      	bls.n	8005738 <xTaskPriorityDisinherit+0xa4>
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <xTaskPriorityDisinherit+0xd4>)
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4a09      	ldr	r2, [pc, #36]	; (800576c <xTaskPriorityDisinherit+0xd8>)
 8005746:	441a      	add	r2, r3
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f7fe fb43 	bl	8003dda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005758:	697b      	ldr	r3, [r7, #20]
	}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200008ec 	.word	0x200008ec
 8005768:	20000dc8 	.word	0x20000dc8
 800576c:	200008f0 	.word	0x200008f0

08005770 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800577a:	4b21      	ldr	r3, [pc, #132]	; (8005800 <prvAddCurrentTaskToDelayedList+0x90>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005780:	4b20      	ldr	r3, [pc, #128]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3304      	adds	r3, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fb82 	bl	8003e90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d10a      	bne.n	80057aa <prvAddCurrentTaskToDelayedList+0x3a>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800579a:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4819      	ldr	r0, [pc, #100]	; (8005808 <prvAddCurrentTaskToDelayedList+0x98>)
 80057a4:	f7fe fb19 	bl	8003dda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057a8:	e026      	b.n	80057f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4413      	add	r3, r2
 80057b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d209      	bcs.n	80057d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <prvAddCurrentTaskToDelayedList+0x9c>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe fb26 	bl	8003e20 <vListInsert>
}
 80057d4:	e010      	b.n	80057f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <prvAddCurrentTaskToDelayedList+0x94>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f7fe fb1c 	bl	8003e20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d202      	bcs.n	80057f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057f2:	4a08      	ldr	r2, [pc, #32]	; (8005814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6013      	str	r3, [r2, #0]
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000dc4 	.word	0x20000dc4
 8005804:	200008ec 	.word	0x200008ec
 8005808:	20000dac 	.word	0x20000dac
 800580c:	20000d7c 	.word	0x20000d7c
 8005810:	20000d78 	.word	0x20000d78
 8005814:	20000de0 	.word	0x20000de0

08005818 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005822:	f000 facb 	bl	8005dbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005826:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <xTimerCreateTimerTask+0x80>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d021      	beq.n	8005872 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005836:	1d3a      	adds	r2, r7, #4
 8005838:	f107 0108 	add.w	r1, r7, #8
 800583c:	f107 030c 	add.w	r3, r7, #12
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe fa85 	bl	8003d50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	9202      	str	r2, [sp, #8]
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	2302      	movs	r3, #2
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	2300      	movs	r3, #0
 8005856:	460a      	mov	r2, r1
 8005858:	4910      	ldr	r1, [pc, #64]	; (800589c <xTimerCreateTimerTask+0x84>)
 800585a:	4811      	ldr	r0, [pc, #68]	; (80058a0 <xTimerCreateTimerTask+0x88>)
 800585c:	f7ff f8e4 	bl	8004a28 <xTaskCreateStatic>
 8005860:	4603      	mov	r3, r0
 8005862:	4a10      	ldr	r2, [pc, #64]	; (80058a4 <xTimerCreateTimerTask+0x8c>)
 8005864:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005866:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <xTimerCreateTimerTask+0x8c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800586e:	2301      	movs	r3, #1
 8005870:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	613b      	str	r3, [r7, #16]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800588e:	697b      	ldr	r3, [r7, #20]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000e1c 	.word	0x20000e1c
 800589c:	08007df8 	.word	0x08007df8
 80058a0:	080059c5 	.word	0x080059c5
 80058a4:	20000e20 	.word	0x20000e20

080058a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	623b      	str	r3, [r7, #32]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058d6:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <xTimerGenericCommand+0x98>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d02a      	beq.n	8005934 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b05      	cmp	r3, #5
 80058ee:	dc18      	bgt.n	8005922 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058f0:	f7ff feb2 	bl	8005658 <xTaskGetSchedulerState>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d109      	bne.n	800590e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <xTimerGenericCommand+0x98>)
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	f107 0110 	add.w	r1, r7, #16
 8005902:	2300      	movs	r3, #0
 8005904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005906:	f7fe fc2d 	bl	8004164 <xQueueGenericSend>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24
 800590c:	e012      	b.n	8005934 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <xTimerGenericCommand+0x98>)
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	f107 0110 	add.w	r1, r7, #16
 8005916:	2300      	movs	r3, #0
 8005918:	2200      	movs	r2, #0
 800591a:	f7fe fc23 	bl	8004164 <xQueueGenericSend>
 800591e:	6278      	str	r0, [r7, #36]	; 0x24
 8005920:	e008      	b.n	8005934 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005922:	4b07      	ldr	r3, [pc, #28]	; (8005940 <xTimerGenericCommand+0x98>)
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	f107 0110 	add.w	r1, r7, #16
 800592a:	2300      	movs	r3, #0
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	f7fe fd17 	bl	8004360 <xQueueGenericSendFromISR>
 8005932:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005936:	4618      	mov	r0, r3
 8005938:	3728      	adds	r7, #40	; 0x28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000e1c 	.word	0x20000e1c

08005944 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <prvProcessExpiredTimer+0x7c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3304      	adds	r3, #4
 800595c:	4618      	mov	r0, r3
 800595e:	f7fe fa97 	bl	8003e90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d122      	bne.n	80059b0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	18d1      	adds	r1, r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	6978      	ldr	r0, [r7, #20]
 8005978:	f000 f8c8 	bl	8005b0c <prvInsertTimerInActiveList>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d016      	beq.n	80059b0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005982:	2300      	movs	r3, #0
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	2300      	movs	r3, #0
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	2100      	movs	r1, #0
 800598c:	6978      	ldr	r0, [r7, #20]
 800598e:	f7ff ff8b 	bl	80058a8 <xTimerGenericCommand>
 8005992:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60fb      	str	r3, [r7, #12]
}
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	4798      	blx	r3
}
 80059b8:	bf00      	nop
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000e14 	.word	0x20000e14

080059c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059cc:	f107 0308 	add.w	r3, r7, #8
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f857 	bl	8005a84 <prvGetNextExpireTime>
 80059d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4619      	mov	r1, r3
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f803 	bl	80059e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059e2:	f000 f8d5 	bl	8005b90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059e6:	e7f1      	b.n	80059cc <prvTimerTask+0x8>

080059e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059f2:	f7ff fa4b 	bl	8004e8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059f6:	f107 0308 	add.w	r3, r7, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f866 	bl	8005acc <prvSampleTimeNow>
 8005a00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d130      	bne.n	8005a6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <prvProcessTimerOrBlockTask+0x3c>
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d806      	bhi.n	8005a24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a16:	f7ff fa47 	bl	8004ea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff91 	bl	8005944 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a22:	e024      	b.n	8005a6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <prvProcessTimerOrBlockTask+0x90>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <prvProcessTimerOrBlockTask+0x94>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f7fe ffb9 	bl	80049c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a4e:	f7ff fa2b 	bl	8004ea8 <xTaskResumeAll>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <prvProcessTimerOrBlockTask+0x98>)
 8005a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	f3bf 8f6f 	isb	sy
}
 8005a68:	e001      	b.n	8005a6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a6a:	f7ff fa1d 	bl	8004ea8 <xTaskResumeAll>
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000e18 	.word	0x20000e18
 8005a7c:	20000e1c 	.word	0x20000e1c
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <prvGetNextExpireTime+0x44>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bf0c      	ite	eq
 8005a96:	2301      	moveq	r3, #1
 8005a98:	2300      	movne	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d105      	bne.n	8005ab6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <prvGetNextExpireTime+0x44>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e001      	b.n	8005aba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005aba:	68fb      	ldr	r3, [r7, #12]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000e14 	.word	0x20000e14

08005acc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ad4:	f7ff fa86 	bl	8004fe4 <xTaskGetTickCount>
 8005ad8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <prvSampleTimeNow+0x3c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d205      	bcs.n	8005af0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ae4:	f000 f908 	bl	8005cf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005af6:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <prvSampleTimeNow+0x3c>)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005afc:	68fb      	ldr	r3, [r7, #12]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000e24 	.word	0x20000e24

08005b0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d812      	bhi.n	8005b58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	1ad2      	subs	r2, r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e01b      	b.n	8005b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <prvInsertTimerInActiveList+0x7c>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f7fe f965 	bl	8003e20 <vListInsert>
 8005b56:	e012      	b.n	8005b7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d206      	bcs.n	8005b6e <prvInsertTimerInActiveList+0x62>
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e007      	b.n	8005b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <prvInsertTimerInActiveList+0x80>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f7fe f951 	bl	8003e20 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b7e:	697b      	ldr	r3, [r7, #20]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000e18 	.word	0x20000e18
 8005b8c:	20000e14 	.word	0x20000e14

08005b90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08e      	sub	sp, #56	; 0x38
 8005b94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b96:	e09d      	b.n	8005cd4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da18      	bge.n	8005bd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	61fb      	str	r3, [r7, #28]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc6:	6850      	ldr	r0, [r2, #4]
 8005bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bca:	6892      	ldr	r2, [r2, #8]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	db7d      	blt.n	8005cd2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe f952 	bl	8003e90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bec:	463b      	mov	r3, r7
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff ff6c 	bl	8005acc <prvSampleTimeNow>
 8005bf4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b09      	cmp	r3, #9
 8005bfa:	d86b      	bhi.n	8005cd4 <prvProcessReceivedCommands+0x144>
 8005bfc:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <prvProcessReceivedCommands+0x74>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c2d 	.word	0x08005c2d
 8005c10:	08005cd5 	.word	0x08005cd5
 8005c14:	08005c89 	.word	0x08005c89
 8005c18:	08005cc1 	.word	0x08005cc1
 8005c1c:	08005c2d 	.word	0x08005c2d
 8005c20:	08005c2d 	.word	0x08005c2d
 8005c24:	08005cd5 	.word	0x08005cd5
 8005c28:	08005c89 	.word	0x08005c89
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	18d1      	adds	r1, r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3a:	f7ff ff67 	bl	8005b0c <prvInsertTimerInActiveList>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d047      	beq.n	8005cd4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c4a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d13f      	bne.n	8005cd4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	441a      	add	r2, r3
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	2300      	movs	r3, #0
 8005c62:	2100      	movs	r1, #0
 8005c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c66:	f7ff fe1f 	bl	80058a8 <xTimerGenericCommand>
 8005c6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d130      	bne.n	8005cd4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	61bb      	str	r3, [r7, #24]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	617b      	str	r3, [r7, #20]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	699a      	ldr	r2, [r3, #24]
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	18d1      	adds	r1, r2, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cba:	f7ff ff27 	bl	8005b0c <prvInsertTimerInActiveList>
					break;
 8005cbe:	e009      	b.n	8005cd4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d104      	bne.n	8005cd4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ccc:	f000 fb6a 	bl	80063a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cd0:	e000      	b.n	8005cd4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005cd2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cd4:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <prvProcessReceivedCommands+0x164>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	1d39      	adds	r1, r7, #4
 8005cda:	2200      	movs	r2, #0
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe fbd7 	bl	8004490 <xQueueReceive>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f47f af57 	bne.w	8005b98 <prvProcessReceivedCommands+0x8>
	}
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	3730      	adds	r7, #48	; 0x30
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20000e1c 	.word	0x20000e1c

08005cf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cfe:	e045      	b.n	8005d8c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d00:	4b2c      	ldr	r3, [pc, #176]	; (8005db4 <prvSwitchTimerLists+0xbc>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <prvSwitchTimerLists+0xbc>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fe f8b9 	bl	8003e90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d12e      	bne.n	8005d8c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4413      	add	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d90e      	bls.n	8005d5e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d4c:	4b19      	ldr	r3, [pc, #100]	; (8005db4 <prvSwitchTimerLists+0xbc>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fe f862 	bl	8003e20 <vListInsert>
 8005d5c:	e016      	b.n	8005d8c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	2300      	movs	r3, #0
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	2100      	movs	r1, #0
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fd9d 	bl	80058a8 <xTimerGenericCommand>
 8005d6e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	603b      	str	r3, [r7, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <prvSwitchTimerLists+0xbc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1b4      	bne.n	8005d00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d96:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <prvSwitchTimerLists+0xbc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d9c:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <prvSwitchTimerLists+0xc0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a04      	ldr	r2, [pc, #16]	; (8005db4 <prvSwitchTimerLists+0xbc>)
 8005da2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005da4:	4a04      	ldr	r2, [pc, #16]	; (8005db8 <prvSwitchTimerLists+0xc0>)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	6013      	str	r3, [r2, #0]
}
 8005daa:	bf00      	nop
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000e14 	.word	0x20000e14
 8005db8:	20000e18 	.word	0x20000e18

08005dbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005dc2:	f000 f92b 	bl	800601c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005dc6:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <prvCheckForValidListAndQueue+0x60>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d120      	bne.n	8005e10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dce:	4814      	ldr	r0, [pc, #80]	; (8005e20 <prvCheckForValidListAndQueue+0x64>)
 8005dd0:	f7fd ffd8 	bl	8003d84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005dd4:	4813      	ldr	r0, [pc, #76]	; (8005e24 <prvCheckForValidListAndQueue+0x68>)
 8005dd6:	f7fd ffd5 	bl	8003d84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <prvCheckForValidListAndQueue+0x6c>)
 8005ddc:	4a10      	ldr	r2, [pc, #64]	; (8005e20 <prvCheckForValidListAndQueue+0x64>)
 8005dde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005de0:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <prvCheckForValidListAndQueue+0x70>)
 8005de2:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <prvCheckForValidListAndQueue+0x68>)
 8005de4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005de6:	2300      	movs	r3, #0
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <prvCheckForValidListAndQueue+0x74>)
 8005dec:	4a11      	ldr	r2, [pc, #68]	; (8005e34 <prvCheckForValidListAndQueue+0x78>)
 8005dee:	2110      	movs	r1, #16
 8005df0:	200a      	movs	r0, #10
 8005df2:	f7fe f8df 	bl	8003fb4 <xQueueGenericCreateStatic>
 8005df6:	4603      	mov	r3, r0
 8005df8:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <prvCheckForValidListAndQueue+0x60>)
 8005dfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <prvCheckForValidListAndQueue+0x60>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <prvCheckForValidListAndQueue+0x60>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	490b      	ldr	r1, [pc, #44]	; (8005e38 <prvCheckForValidListAndQueue+0x7c>)
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fdb0 	bl	8004970 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e10:	f000 f934 	bl	800607c <vPortExitCritical>
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000e1c 	.word	0x20000e1c
 8005e20:	20000dec 	.word	0x20000dec
 8005e24:	20000e00 	.word	0x20000e00
 8005e28:	20000e14 	.word	0x20000e14
 8005e2c:	20000e18 	.word	0x20000e18
 8005e30:	20000ec8 	.word	0x20000ec8
 8005e34:	20000e28 	.word	0x20000e28
 8005e38:	08007e00 	.word	0x08007e00

08005e3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3b04      	subs	r3, #4
 8005e4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3b04      	subs	r3, #4
 8005e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f023 0201 	bic.w	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3b04      	subs	r3, #4
 8005e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e6c:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <pxPortInitialiseStack+0x54>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b14      	subs	r3, #20
 8005e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3b20      	subs	r3, #32
 8005e82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e84:	68fb      	ldr	r3, [r7, #12]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr
 8005e90:	08005e95 	.word	0x08005e95

08005e94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <prvTaskExitError+0x54>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d00a      	beq.n	8005ebe <prvTaskExitError+0x2a>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	60fb      	str	r3, [r7, #12]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <prvTaskExitError+0x28>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	60bb      	str	r3, [r7, #8]
}
 8005ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ed2:	bf00      	nop
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0fc      	beq.n	8005ed4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	20000010 	.word	0x20000010
 8005eec:	00000000 	.word	0x00000000

08005ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <pxCurrentTCBConst2>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	6808      	ldr	r0, [r1, #0]
 8005ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005efa:	f380 8809 	msr	PSP, r0
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005f0e:	4770      	bx	lr

08005f10 <pxCurrentTCBConst2>:
 8005f10:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005f18:	4806      	ldr	r0, [pc, #24]	; (8005f34 <prvPortStartFirstTask+0x1c>)
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f380 8808 	msr	MSP, r0
 8005f22:	b662      	cpsie	i
 8005f24:	b661      	cpsie	f
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	df00      	svc	0
 8005f30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f32:	bf00      	nop
 8005f34:	e000ed08 	.word	0xe000ed08

08005f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f3e:	4b32      	ldr	r3, [pc, #200]	; (8006008 <xPortStartScheduler+0xd0>)
 8005f40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	22ff      	movs	r2, #255	; 0xff
 8005f4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	4b2a      	ldr	r3, [pc, #168]	; (800600c <xPortStartScheduler+0xd4>)
 8005f64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f66:	4b2a      	ldr	r3, [pc, #168]	; (8006010 <xPortStartScheduler+0xd8>)
 8005f68:	2207      	movs	r2, #7
 8005f6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f6c:	e009      	b.n	8005f82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f6e:	4b28      	ldr	r3, [pc, #160]	; (8006010 <xPortStartScheduler+0xd8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	4a26      	ldr	r2, [pc, #152]	; (8006010 <xPortStartScheduler+0xd8>)
 8005f76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b80      	cmp	r3, #128	; 0x80
 8005f8c:	d0ef      	beq.n	8005f6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <xPortStartScheduler+0xd8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f1c3 0307 	rsb	r3, r3, #7
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d00a      	beq.n	8005fb0 <xPortStartScheduler+0x78>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	60bb      	str	r3, [r7, #8]
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fb0:	4b17      	ldr	r3, [pc, #92]	; (8006010 <xPortStartScheduler+0xd8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	4a16      	ldr	r2, [pc, #88]	; (8006010 <xPortStartScheduler+0xd8>)
 8005fb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fba:	4b15      	ldr	r3, [pc, #84]	; (8006010 <xPortStartScheduler+0xd8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fc2:	4a13      	ldr	r2, [pc, #76]	; (8006010 <xPortStartScheduler+0xd8>)
 8005fc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <xPortStartScheduler+0xdc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a10      	ldr	r2, [pc, #64]	; (8006014 <xPortStartScheduler+0xdc>)
 8005fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fda:	4b0e      	ldr	r3, [pc, #56]	; (8006014 <xPortStartScheduler+0xdc>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a0d      	ldr	r2, [pc, #52]	; (8006014 <xPortStartScheduler+0xdc>)
 8005fe0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fe4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fe6:	f000 f8b9 	bl	800615c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fea:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <xPortStartScheduler+0xe0>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ff0:	f7ff ff92 	bl	8005f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ff4:	f7ff f8c2 	bl	800517c <vTaskSwitchContext>
	prvTaskExitError();
 8005ff8:	f7ff ff4c 	bl	8005e94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	e000e400 	.word	0xe000e400
 800600c:	20000f18 	.word	0x20000f18
 8006010:	20000f1c 	.word	0x20000f1c
 8006014:	e000ed20 	.word	0xe000ed20
 8006018:	20000010 	.word	0x20000010

0800601c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	607b      	str	r3, [r7, #4]
}
 8006034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <vPortEnterCritical+0x58>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3301      	adds	r3, #1
 800603c:	4a0d      	ldr	r2, [pc, #52]	; (8006074 <vPortEnterCritical+0x58>)
 800603e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <vPortEnterCritical+0x58>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10f      	bne.n	8006068 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <vPortEnterCritical+0x5c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <vPortEnterCritical+0x4c>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	603b      	str	r3, [r7, #0]
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <vPortEnterCritical+0x4a>
	}
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000010 	.word	0x20000010
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006082:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <vPortExitCritical+0x4c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <vPortExitCritical+0x24>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
}
 800609c:	bf00      	nop
 800609e:	e7fe      	b.n	800609e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <vPortExitCritical+0x4c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <vPortExitCritical+0x4c>)
 80060a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <vPortExitCritical+0x4c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <vPortExitCritical+0x42>
 80060b2:	2300      	movs	r3, #0
 80060b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f383 8811 	msr	BASEPRI, r3
}
 80060bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	20000010 	.word	0x20000010
 80060cc:	00000000 	.word	0x00000000

080060d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060d0:	f3ef 8009 	mrs	r0, PSP
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <pxCurrentTCBConst>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060e0:	6010      	str	r0, [r2, #0]
 80060e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80060e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060ea:	f380 8811 	msr	BASEPRI, r0
 80060ee:	f7ff f845 	bl	800517c <vTaskSwitchContext>
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f380 8811 	msr	BASEPRI, r0
 80060fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060fe:	6819      	ldr	r1, [r3, #0]
 8006100:	6808      	ldr	r0, [r1, #0]
 8006102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006106:	f380 8809 	msr	PSP, r0
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	4770      	bx	lr

08006110 <pxCurrentTCBConst>:
 8006110:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop

08006118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	607b      	str	r3, [r7, #4]
}
 8006130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006132:	f7fe ff65 	bl	8005000 <xTaskIncrementTick>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <SysTick_Handler+0x40>)
 800613e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f383 8811 	msr	BASEPRI, r3
}
 800614e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006160:	4b0a      	ldr	r3, [pc, #40]	; (800618c <vPortSetupTimerInterrupt+0x30>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <vPortSetupTimerInterrupt+0x34>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800616c:	4b09      	ldr	r3, [pc, #36]	; (8006194 <vPortSetupTimerInterrupt+0x38>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a09      	ldr	r2, [pc, #36]	; (8006198 <vPortSetupTimerInterrupt+0x3c>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	099b      	lsrs	r3, r3, #6
 8006178:	4a08      	ldr	r2, [pc, #32]	; (800619c <vPortSetupTimerInterrupt+0x40>)
 800617a:	3b01      	subs	r3, #1
 800617c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800617e:	4b03      	ldr	r3, [pc, #12]	; (800618c <vPortSetupTimerInterrupt+0x30>)
 8006180:	2207      	movs	r2, #7
 8006182:	601a      	str	r2, [r3, #0]
}
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr
 800618c:	e000e010 	.word	0xe000e010
 8006190:	e000e018 	.word	0xe000e018
 8006194:	20000004 	.word	0x20000004
 8006198:	10624dd3 	.word	0x10624dd3
 800619c:	e000e014 	.word	0xe000e014

080061a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061a6:	f3ef 8305 	mrs	r3, IPSR
 80061aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b0f      	cmp	r3, #15
 80061b0:	d914      	bls.n	80061dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061b2:	4a16      	ldr	r2, [pc, #88]	; (800620c <vPortValidateInterruptPriority+0x6c>)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061bc:	4b14      	ldr	r3, [pc, #80]	; (8006210 <vPortValidateInterruptPriority+0x70>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	7afa      	ldrb	r2, [r7, #11]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d20a      	bcs.n	80061dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	607b      	str	r3, [r7, #4]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061dc:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <vPortValidateInterruptPriority+0x74>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <vPortValidateInterruptPriority+0x78>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d90a      	bls.n	8006202 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	603b      	str	r3, [r7, #0]
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <vPortValidateInterruptPriority+0x60>
	}
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr
 800620c:	e000e3f0 	.word	0xe000e3f0
 8006210:	20000f18 	.word	0x20000f18
 8006214:	e000ed0c 	.word	0xe000ed0c
 8006218:	20000f1c 	.word	0x20000f1c

0800621c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006224:	2300      	movs	r3, #0
 8006226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006228:	f7fe fe30 	bl	8004e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800622c:	4b58      	ldr	r3, [pc, #352]	; (8006390 <pvPortMalloc+0x174>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006234:	f000 f910 	bl	8006458 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006238:	4b56      	ldr	r3, [pc, #344]	; (8006394 <pvPortMalloc+0x178>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4013      	ands	r3, r2
 8006240:	2b00      	cmp	r3, #0
 8006242:	f040 808e 	bne.w	8006362 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01d      	beq.n	8006288 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800624c:	2208      	movs	r2, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b00      	cmp	r3, #0
 800625c:	d014      	beq.n	8006288 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f023 0307 	bic.w	r3, r3, #7
 8006264:	3308      	adds	r3, #8
 8006266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <pvPortMalloc+0x6c>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	617b      	str	r3, [r7, #20]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d069      	beq.n	8006362 <pvPortMalloc+0x146>
 800628e:	4b42      	ldr	r3, [pc, #264]	; (8006398 <pvPortMalloc+0x17c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d864      	bhi.n	8006362 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006298:	4b40      	ldr	r3, [pc, #256]	; (800639c <pvPortMalloc+0x180>)
 800629a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800629c:	4b3f      	ldr	r3, [pc, #252]	; (800639c <pvPortMalloc+0x180>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062a2:	e004      	b.n	80062ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d903      	bls.n	80062c0 <pvPortMalloc+0xa4>
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f1      	bne.n	80062a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062c0:	4b33      	ldr	r3, [pc, #204]	; (8006390 <pvPortMalloc+0x174>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d04b      	beq.n	8006362 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2208      	movs	r2, #8
 80062d0:	4413      	add	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	1ad2      	subs	r2, r2, r3
 80062e4:	2308      	movs	r3, #8
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d91f      	bls.n	800632c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <pvPortMalloc+0xf8>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	613b      	str	r3, [r7, #16]
}
 8006310:	bf00      	nop
 8006312:	e7fe      	b.n	8006312 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	1ad2      	subs	r2, r2, r3
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006326:	69b8      	ldr	r0, [r7, #24]
 8006328:	f000 f8f8 	bl	800651c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800632c:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <pvPortMalloc+0x17c>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	4a18      	ldr	r2, [pc, #96]	; (8006398 <pvPortMalloc+0x17c>)
 8006338:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800633a:	4b17      	ldr	r3, [pc, #92]	; (8006398 <pvPortMalloc+0x17c>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <pvPortMalloc+0x184>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d203      	bcs.n	800634e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006346:	4b14      	ldr	r3, [pc, #80]	; (8006398 <pvPortMalloc+0x17c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <pvPortMalloc+0x184>)
 800634c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	4b10      	ldr	r3, [pc, #64]	; (8006394 <pvPortMalloc+0x178>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	431a      	orrs	r2, r3
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006362:	f7fe fda1 	bl	8004ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <pvPortMalloc+0x16a>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <pvPortMalloc+0x168>
	return pvReturn;
 8006386:	69fb      	ldr	r3, [r7, #28]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3728      	adds	r7, #40	; 0x28
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	20001b28 	.word	0x20001b28
 8006394:	20001b34 	.word	0x20001b34
 8006398:	20001b2c 	.word	0x20001b2c
 800639c:	20001b20 	.word	0x20001b20
 80063a0:	20001b30 	.word	0x20001b30

080063a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d048      	beq.n	8006448 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063b6:	2308      	movs	r3, #8
 80063b8:	425b      	negs	r3, r3
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4413      	add	r3, r2
 80063be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	4b21      	ldr	r3, [pc, #132]	; (8006450 <vPortFree+0xac>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <vPortFree+0x44>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	60fb      	str	r3, [r7, #12]
}
 80063e4:	bf00      	nop
 80063e6:	e7fe      	b.n	80063e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <vPortFree+0x62>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	60bb      	str	r3, [r7, #8]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	4b11      	ldr	r3, [pc, #68]	; (8006450 <vPortFree+0xac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4013      	ands	r3, r2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d019      	beq.n	8006448 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d115      	bne.n	8006448 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <vPortFree+0xac>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	43db      	mvns	r3, r3
 8006426:	401a      	ands	r2, r3
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800642c:	f7fe fd2e 	bl	8004e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	4b07      	ldr	r3, [pc, #28]	; (8006454 <vPortFree+0xb0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4413      	add	r3, r2
 800643a:	4a06      	ldr	r2, [pc, #24]	; (8006454 <vPortFree+0xb0>)
 800643c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800643e:	6938      	ldr	r0, [r7, #16]
 8006440:	f000 f86c 	bl	800651c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006444:	f7fe fd30 	bl	8004ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006448:	bf00      	nop
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20001b34 	.word	0x20001b34
 8006454:	20001b2c 	.word	0x20001b2c

08006458 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800645e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006462:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006464:	4b27      	ldr	r3, [pc, #156]	; (8006504 <prvHeapInit+0xac>)
 8006466:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3307      	adds	r3, #7
 8006476:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0307 	bic.w	r3, r3, #7
 800647e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	4a1f      	ldr	r2, [pc, #124]	; (8006504 <prvHeapInit+0xac>)
 8006488:	4413      	add	r3, r2
 800648a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006490:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <prvHeapInit+0xb0>)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006496:	4b1c      	ldr	r3, [pc, #112]	; (8006508 <prvHeapInit+0xb0>)
 8006498:	2200      	movs	r2, #0
 800649a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064a4:	2208      	movs	r2, #8
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1a9b      	subs	r3, r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0307 	bic.w	r3, r3, #7
 80064b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4a15      	ldr	r2, [pc, #84]	; (800650c <prvHeapInit+0xb4>)
 80064b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064ba:	4b14      	ldr	r3, [pc, #80]	; (800650c <prvHeapInit+0xb4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064c2:	4b12      	ldr	r3, [pc, #72]	; (800650c <prvHeapInit+0xb4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064d8:	4b0c      	ldr	r3, [pc, #48]	; (800650c <prvHeapInit+0xb4>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4a0a      	ldr	r2, [pc, #40]	; (8006510 <prvHeapInit+0xb8>)
 80064e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4a09      	ldr	r2, [pc, #36]	; (8006514 <prvHeapInit+0xbc>)
 80064ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064f0:	4b09      	ldr	r3, [pc, #36]	; (8006518 <prvHeapInit+0xc0>)
 80064f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064f6:	601a      	str	r2, [r3, #0]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000f20 	.word	0x20000f20
 8006508:	20001b20 	.word	0x20001b20
 800650c:	20001b28 	.word	0x20001b28
 8006510:	20001b30 	.word	0x20001b30
 8006514:	20001b2c 	.word	0x20001b2c
 8006518:	20001b34 	.word	0x20001b34

0800651c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006524:	4b27      	ldr	r3, [pc, #156]	; (80065c4 <prvInsertBlockIntoFreeList+0xa8>)
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e002      	b.n	8006530 <prvInsertBlockIntoFreeList+0x14>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d8f7      	bhi.n	800652a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	4413      	add	r3, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	429a      	cmp	r2, r3
 800654a:	d108      	bne.n	800655e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	441a      	add	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	441a      	add	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d118      	bne.n	80065a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <prvInsertBlockIntoFreeList+0xac>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d00d      	beq.n	800659a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	441a      	add	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e008      	b.n	80065ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <prvInsertBlockIntoFreeList+0xac>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e003      	b.n	80065ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d002      	beq.n	80065ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr
 80065c4:	20001b20 	.word	0x20001b20
 80065c8:	20001b28 	.word	0x20001b28

080065cc <atoi>:
 80065cc:	220a      	movs	r2, #10
 80065ce:	2100      	movs	r1, #0
 80065d0:	f000 b920 	b.w	8006814 <strtol>

080065d4 <__errno>:
 80065d4:	4b01      	ldr	r3, [pc, #4]	; (80065dc <__errno+0x8>)
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000014 	.word	0x20000014

080065e0 <__libc_init_array>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	2600      	movs	r6, #0
 80065e4:	4d0c      	ldr	r5, [pc, #48]	; (8006618 <__libc_init_array+0x38>)
 80065e6:	4c0d      	ldr	r4, [pc, #52]	; (800661c <__libc_init_array+0x3c>)
 80065e8:	1b64      	subs	r4, r4, r5
 80065ea:	10a4      	asrs	r4, r4, #2
 80065ec:	42a6      	cmp	r6, r4
 80065ee:	d109      	bne.n	8006604 <__libc_init_array+0x24>
 80065f0:	f001 f91a 	bl	8007828 <_init>
 80065f4:	2600      	movs	r6, #0
 80065f6:	4d0a      	ldr	r5, [pc, #40]	; (8006620 <__libc_init_array+0x40>)
 80065f8:	4c0a      	ldr	r4, [pc, #40]	; (8006624 <__libc_init_array+0x44>)
 80065fa:	1b64      	subs	r4, r4, r5
 80065fc:	10a4      	asrs	r4, r4, #2
 80065fe:	42a6      	cmp	r6, r4
 8006600:	d105      	bne.n	800660e <__libc_init_array+0x2e>
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	f855 3b04 	ldr.w	r3, [r5], #4
 8006608:	4798      	blx	r3
 800660a:	3601      	adds	r6, #1
 800660c:	e7ee      	b.n	80065ec <__libc_init_array+0xc>
 800660e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006612:	4798      	blx	r3
 8006614:	3601      	adds	r6, #1
 8006616:	e7f2      	b.n	80065fe <__libc_init_array+0x1e>
 8006618:	08008104 	.word	0x08008104
 800661c:	08008104 	.word	0x08008104
 8006620:	08008104 	.word	0x08008104
 8006624:	08008108 	.word	0x08008108

08006628 <memcpy>:
 8006628:	440a      	add	r2, r1
 800662a:	4291      	cmp	r1, r2
 800662c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006630:	d100      	bne.n	8006634 <memcpy+0xc>
 8006632:	4770      	bx	lr
 8006634:	b510      	push	{r4, lr}
 8006636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800663a:	4291      	cmp	r1, r2
 800663c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006640:	d1f9      	bne.n	8006636 <memcpy+0xe>
 8006642:	bd10      	pop	{r4, pc}

08006644 <memset>:
 8006644:	4603      	mov	r3, r0
 8006646:	4402      	add	r2, r0
 8006648:	4293      	cmp	r3, r2
 800664a:	d100      	bne.n	800664e <memset+0xa>
 800664c:	4770      	bx	lr
 800664e:	f803 1b01 	strb.w	r1, [r3], #1
 8006652:	e7f9      	b.n	8006648 <memset+0x4>

08006654 <strcpy>:
 8006654:	4603      	mov	r3, r0
 8006656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800665a:	f803 2b01 	strb.w	r2, [r3], #1
 800665e:	2a00      	cmp	r2, #0
 8006660:	d1f9      	bne.n	8006656 <strcpy+0x2>
 8006662:	4770      	bx	lr

08006664 <strtok>:
 8006664:	4b16      	ldr	r3, [pc, #88]	; (80066c0 <strtok+0x5c>)
 8006666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666a:	681f      	ldr	r7, [r3, #0]
 800666c:	4605      	mov	r5, r0
 800666e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006670:	460e      	mov	r6, r1
 8006672:	b9ec      	cbnz	r4, 80066b0 <strtok+0x4c>
 8006674:	2050      	movs	r0, #80	; 0x50
 8006676:	f000 f907 	bl	8006888 <malloc>
 800667a:	4602      	mov	r2, r0
 800667c:	65b8      	str	r0, [r7, #88]	; 0x58
 800667e:	b920      	cbnz	r0, 800668a <strtok+0x26>
 8006680:	2157      	movs	r1, #87	; 0x57
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <strtok+0x60>)
 8006684:	4810      	ldr	r0, [pc, #64]	; (80066c8 <strtok+0x64>)
 8006686:	f000 f8cf 	bl	8006828 <__assert_func>
 800668a:	e9c0 4400 	strd	r4, r4, [r0]
 800668e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006692:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006696:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800669a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800669e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80066a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80066a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80066aa:	6184      	str	r4, [r0, #24]
 80066ac:	7704      	strb	r4, [r0, #28]
 80066ae:	6244      	str	r4, [r0, #36]	; 0x24
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066b6:	2301      	movs	r3, #1
 80066b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066bc:	f000 b806 	b.w	80066cc <__strtok_r>
 80066c0:	20000014 	.word	0x20000014
 80066c4:	08007ec0 	.word	0x08007ec0
 80066c8:	08007ed7 	.word	0x08007ed7

080066cc <__strtok_r>:
 80066cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ce:	b908      	cbnz	r0, 80066d4 <__strtok_r+0x8>
 80066d0:	6810      	ldr	r0, [r2, #0]
 80066d2:	b188      	cbz	r0, 80066f8 <__strtok_r+0x2c>
 80066d4:	4604      	mov	r4, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	4620      	mov	r0, r4
 80066da:	f814 5b01 	ldrb.w	r5, [r4], #1
 80066de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80066e2:	b91e      	cbnz	r6, 80066ec <__strtok_r+0x20>
 80066e4:	b965      	cbnz	r5, 8006700 <__strtok_r+0x34>
 80066e6:	4628      	mov	r0, r5
 80066e8:	6015      	str	r5, [r2, #0]
 80066ea:	e005      	b.n	80066f8 <__strtok_r+0x2c>
 80066ec:	42b5      	cmp	r5, r6
 80066ee:	d1f6      	bne.n	80066de <__strtok_r+0x12>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f0      	bne.n	80066d6 <__strtok_r+0xa>
 80066f4:	6014      	str	r4, [r2, #0]
 80066f6:	7003      	strb	r3, [r0, #0]
 80066f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066fa:	461c      	mov	r4, r3
 80066fc:	e00c      	b.n	8006718 <__strtok_r+0x4c>
 80066fe:	b915      	cbnz	r5, 8006706 <__strtok_r+0x3a>
 8006700:	460e      	mov	r6, r1
 8006702:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006706:	f816 5b01 	ldrb.w	r5, [r6], #1
 800670a:	42ab      	cmp	r3, r5
 800670c:	d1f7      	bne.n	80066fe <__strtok_r+0x32>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f3      	beq.n	80066fa <__strtok_r+0x2e>
 8006712:	2300      	movs	r3, #0
 8006714:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006718:	6014      	str	r4, [r2, #0]
 800671a:	e7ed      	b.n	80066f8 <__strtok_r+0x2c>

0800671c <_strtol_l.constprop.0>:
 800671c:	2b01      	cmp	r3, #1
 800671e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006722:	4680      	mov	r8, r0
 8006724:	d001      	beq.n	800672a <_strtol_l.constprop.0+0xe>
 8006726:	2b24      	cmp	r3, #36	; 0x24
 8006728:	d906      	bls.n	8006738 <_strtol_l.constprop.0+0x1c>
 800672a:	f7ff ff53 	bl	80065d4 <__errno>
 800672e:	2316      	movs	r3, #22
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	2000      	movs	r0, #0
 8006734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006738:	460d      	mov	r5, r1
 800673a:	4f35      	ldr	r7, [pc, #212]	; (8006810 <_strtol_l.constprop.0+0xf4>)
 800673c:	4628      	mov	r0, r5
 800673e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006742:	5de6      	ldrb	r6, [r4, r7]
 8006744:	f016 0608 	ands.w	r6, r6, #8
 8006748:	d1f8      	bne.n	800673c <_strtol_l.constprop.0+0x20>
 800674a:	2c2d      	cmp	r4, #45	; 0x2d
 800674c:	d12f      	bne.n	80067ae <_strtol_l.constprop.0+0x92>
 800674e:	2601      	movs	r6, #1
 8006750:	782c      	ldrb	r4, [r5, #0]
 8006752:	1c85      	adds	r5, r0, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d057      	beq.n	8006808 <_strtol_l.constprop.0+0xec>
 8006758:	2b10      	cmp	r3, #16
 800675a:	d109      	bne.n	8006770 <_strtol_l.constprop.0+0x54>
 800675c:	2c30      	cmp	r4, #48	; 0x30
 800675e:	d107      	bne.n	8006770 <_strtol_l.constprop.0+0x54>
 8006760:	7828      	ldrb	r0, [r5, #0]
 8006762:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006766:	2858      	cmp	r0, #88	; 0x58
 8006768:	d149      	bne.n	80067fe <_strtol_l.constprop.0+0xe2>
 800676a:	2310      	movs	r3, #16
 800676c:	786c      	ldrb	r4, [r5, #1]
 800676e:	3502      	adds	r5, #2
 8006770:	2700      	movs	r7, #0
 8006772:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006776:	f10e 3eff 	add.w	lr, lr, #4294967295
 800677a:	fbbe f9f3 	udiv	r9, lr, r3
 800677e:	4638      	mov	r0, r7
 8006780:	fb03 ea19 	mls	sl, r3, r9, lr
 8006784:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006788:	f1bc 0f09 	cmp.w	ip, #9
 800678c:	d814      	bhi.n	80067b8 <_strtol_l.constprop.0+0x9c>
 800678e:	4664      	mov	r4, ip
 8006790:	42a3      	cmp	r3, r4
 8006792:	dd22      	ble.n	80067da <_strtol_l.constprop.0+0xbe>
 8006794:	2f00      	cmp	r7, #0
 8006796:	db1d      	blt.n	80067d4 <_strtol_l.constprop.0+0xb8>
 8006798:	4581      	cmp	r9, r0
 800679a:	d31b      	bcc.n	80067d4 <_strtol_l.constprop.0+0xb8>
 800679c:	d101      	bne.n	80067a2 <_strtol_l.constprop.0+0x86>
 800679e:	45a2      	cmp	sl, r4
 80067a0:	db18      	blt.n	80067d4 <_strtol_l.constprop.0+0xb8>
 80067a2:	2701      	movs	r7, #1
 80067a4:	fb00 4003 	mla	r0, r0, r3, r4
 80067a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067ac:	e7ea      	b.n	8006784 <_strtol_l.constprop.0+0x68>
 80067ae:	2c2b      	cmp	r4, #43	; 0x2b
 80067b0:	bf04      	itt	eq
 80067b2:	782c      	ldrbeq	r4, [r5, #0]
 80067b4:	1c85      	addeq	r5, r0, #2
 80067b6:	e7cd      	b.n	8006754 <_strtol_l.constprop.0+0x38>
 80067b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80067bc:	f1bc 0f19 	cmp.w	ip, #25
 80067c0:	d801      	bhi.n	80067c6 <_strtol_l.constprop.0+0xaa>
 80067c2:	3c37      	subs	r4, #55	; 0x37
 80067c4:	e7e4      	b.n	8006790 <_strtol_l.constprop.0+0x74>
 80067c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80067ca:	f1bc 0f19 	cmp.w	ip, #25
 80067ce:	d804      	bhi.n	80067da <_strtol_l.constprop.0+0xbe>
 80067d0:	3c57      	subs	r4, #87	; 0x57
 80067d2:	e7dd      	b.n	8006790 <_strtol_l.constprop.0+0x74>
 80067d4:	f04f 37ff 	mov.w	r7, #4294967295
 80067d8:	e7e6      	b.n	80067a8 <_strtol_l.constprop.0+0x8c>
 80067da:	2f00      	cmp	r7, #0
 80067dc:	da07      	bge.n	80067ee <_strtol_l.constprop.0+0xd2>
 80067de:	2322      	movs	r3, #34	; 0x22
 80067e0:	4670      	mov	r0, lr
 80067e2:	f8c8 3000 	str.w	r3, [r8]
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	d0a4      	beq.n	8006734 <_strtol_l.constprop.0+0x18>
 80067ea:	1e69      	subs	r1, r5, #1
 80067ec:	e005      	b.n	80067fa <_strtol_l.constprop.0+0xde>
 80067ee:	b106      	cbz	r6, 80067f2 <_strtol_l.constprop.0+0xd6>
 80067f0:	4240      	negs	r0, r0
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	d09e      	beq.n	8006734 <_strtol_l.constprop.0+0x18>
 80067f6:	2f00      	cmp	r7, #0
 80067f8:	d1f7      	bne.n	80067ea <_strtol_l.constprop.0+0xce>
 80067fa:	6011      	str	r1, [r2, #0]
 80067fc:	e79a      	b.n	8006734 <_strtol_l.constprop.0+0x18>
 80067fe:	2430      	movs	r4, #48	; 0x30
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1b5      	bne.n	8006770 <_strtol_l.constprop.0+0x54>
 8006804:	2308      	movs	r3, #8
 8006806:	e7b3      	b.n	8006770 <_strtol_l.constprop.0+0x54>
 8006808:	2c30      	cmp	r4, #48	; 0x30
 800680a:	d0a9      	beq.n	8006760 <_strtol_l.constprop.0+0x44>
 800680c:	230a      	movs	r3, #10
 800680e:	e7af      	b.n	8006770 <_strtol_l.constprop.0+0x54>
 8006810:	08007f71 	.word	0x08007f71

08006814 <strtol>:
 8006814:	4613      	mov	r3, r2
 8006816:	460a      	mov	r2, r1
 8006818:	4601      	mov	r1, r0
 800681a:	4802      	ldr	r0, [pc, #8]	; (8006824 <strtol+0x10>)
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f7ff bf7d 	b.w	800671c <_strtol_l.constprop.0>
 8006822:	bf00      	nop
 8006824:	20000014 	.word	0x20000014

08006828 <__assert_func>:
 8006828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800682a:	4614      	mov	r4, r2
 800682c:	461a      	mov	r2, r3
 800682e:	4b09      	ldr	r3, [pc, #36]	; (8006854 <__assert_func+0x2c>)
 8006830:	4605      	mov	r5, r0
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68d8      	ldr	r0, [r3, #12]
 8006836:	b14c      	cbz	r4, 800684c <__assert_func+0x24>
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <__assert_func+0x30>)
 800683a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800683e:	9100      	str	r1, [sp, #0]
 8006840:	462b      	mov	r3, r5
 8006842:	4906      	ldr	r1, [pc, #24]	; (800685c <__assert_func+0x34>)
 8006844:	f000 f80e 	bl	8006864 <fiprintf>
 8006848:	f000 fcc0 	bl	80071cc <abort>
 800684c:	4b04      	ldr	r3, [pc, #16]	; (8006860 <__assert_func+0x38>)
 800684e:	461c      	mov	r4, r3
 8006850:	e7f3      	b.n	800683a <__assert_func+0x12>
 8006852:	bf00      	nop
 8006854:	20000014 	.word	0x20000014
 8006858:	08007f34 	.word	0x08007f34
 800685c:	08007f41 	.word	0x08007f41
 8006860:	08007f6f 	.word	0x08007f6f

08006864 <fiprintf>:
 8006864:	b40e      	push	{r1, r2, r3}
 8006866:	b503      	push	{r0, r1, lr}
 8006868:	4601      	mov	r1, r0
 800686a:	ab03      	add	r3, sp, #12
 800686c:	4805      	ldr	r0, [pc, #20]	; (8006884 <fiprintf+0x20>)
 800686e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006872:	6800      	ldr	r0, [r0, #0]
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	f000 f913 	bl	8006aa0 <_vfiprintf_r>
 800687a:	b002      	add	sp, #8
 800687c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006880:	b003      	add	sp, #12
 8006882:	4770      	bx	lr
 8006884:	20000014 	.word	0x20000014

08006888 <malloc>:
 8006888:	4b02      	ldr	r3, [pc, #8]	; (8006894 <malloc+0xc>)
 800688a:	4601      	mov	r1, r0
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	f000 b86b 	b.w	8006968 <_malloc_r>
 8006892:	bf00      	nop
 8006894:	20000014 	.word	0x20000014

08006898 <_free_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4605      	mov	r5, r0
 800689c:	2900      	cmp	r1, #0
 800689e:	d040      	beq.n	8006922 <_free_r+0x8a>
 80068a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a4:	1f0c      	subs	r4, r1, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	bfb8      	it	lt
 80068aa:	18e4      	addlt	r4, r4, r3
 80068ac:	f000 fec0 	bl	8007630 <__malloc_lock>
 80068b0:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <_free_r+0x8c>)
 80068b2:	6813      	ldr	r3, [r2, #0]
 80068b4:	b933      	cbnz	r3, 80068c4 <_free_r+0x2c>
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	6014      	str	r4, [r2, #0]
 80068ba:	4628      	mov	r0, r5
 80068bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068c0:	f000 bebc 	b.w	800763c <__malloc_unlock>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d908      	bls.n	80068da <_free_r+0x42>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	1821      	adds	r1, r4, r0
 80068cc:	428b      	cmp	r3, r1
 80068ce:	bf01      	itttt	eq
 80068d0:	6819      	ldreq	r1, [r3, #0]
 80068d2:	685b      	ldreq	r3, [r3, #4]
 80068d4:	1809      	addeq	r1, r1, r0
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	e7ed      	b.n	80068b6 <_free_r+0x1e>
 80068da:	461a      	mov	r2, r3
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b10b      	cbz	r3, 80068e4 <_free_r+0x4c>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d9fa      	bls.n	80068da <_free_r+0x42>
 80068e4:	6811      	ldr	r1, [r2, #0]
 80068e6:	1850      	adds	r0, r2, r1
 80068e8:	42a0      	cmp	r0, r4
 80068ea:	d10b      	bne.n	8006904 <_free_r+0x6c>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	4401      	add	r1, r0
 80068f0:	1850      	adds	r0, r2, r1
 80068f2:	4283      	cmp	r3, r0
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	d1e0      	bne.n	80068ba <_free_r+0x22>
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4401      	add	r1, r0
 80068fe:	6011      	str	r1, [r2, #0]
 8006900:	6053      	str	r3, [r2, #4]
 8006902:	e7da      	b.n	80068ba <_free_r+0x22>
 8006904:	d902      	bls.n	800690c <_free_r+0x74>
 8006906:	230c      	movs	r3, #12
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	e7d6      	b.n	80068ba <_free_r+0x22>
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	1821      	adds	r1, r4, r0
 8006910:	428b      	cmp	r3, r1
 8006912:	bf01      	itttt	eq
 8006914:	6819      	ldreq	r1, [r3, #0]
 8006916:	685b      	ldreq	r3, [r3, #4]
 8006918:	1809      	addeq	r1, r1, r0
 800691a:	6021      	streq	r1, [r4, #0]
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6054      	str	r4, [r2, #4]
 8006920:	e7cb      	b.n	80068ba <_free_r+0x22>
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	20001b38 	.word	0x20001b38

08006928 <sbrk_aligned>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	4e0e      	ldr	r6, [pc, #56]	; (8006964 <sbrk_aligned+0x3c>)
 800692c:	460c      	mov	r4, r1
 800692e:	6831      	ldr	r1, [r6, #0]
 8006930:	4605      	mov	r5, r0
 8006932:	b911      	cbnz	r1, 800693a <sbrk_aligned+0x12>
 8006934:	f000 fb7a 	bl	800702c <_sbrk_r>
 8006938:	6030      	str	r0, [r6, #0]
 800693a:	4621      	mov	r1, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f000 fb75 	bl	800702c <_sbrk_r>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	d00a      	beq.n	800695c <sbrk_aligned+0x34>
 8006946:	1cc4      	adds	r4, r0, #3
 8006948:	f024 0403 	bic.w	r4, r4, #3
 800694c:	42a0      	cmp	r0, r4
 800694e:	d007      	beq.n	8006960 <sbrk_aligned+0x38>
 8006950:	1a21      	subs	r1, r4, r0
 8006952:	4628      	mov	r0, r5
 8006954:	f000 fb6a 	bl	800702c <_sbrk_r>
 8006958:	3001      	adds	r0, #1
 800695a:	d101      	bne.n	8006960 <sbrk_aligned+0x38>
 800695c:	f04f 34ff 	mov.w	r4, #4294967295
 8006960:	4620      	mov	r0, r4
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	20001b3c 	.word	0x20001b3c

08006968 <_malloc_r>:
 8006968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800696c:	1ccd      	adds	r5, r1, #3
 800696e:	f025 0503 	bic.w	r5, r5, #3
 8006972:	3508      	adds	r5, #8
 8006974:	2d0c      	cmp	r5, #12
 8006976:	bf38      	it	cc
 8006978:	250c      	movcc	r5, #12
 800697a:	2d00      	cmp	r5, #0
 800697c:	4607      	mov	r7, r0
 800697e:	db01      	blt.n	8006984 <_malloc_r+0x1c>
 8006980:	42a9      	cmp	r1, r5
 8006982:	d905      	bls.n	8006990 <_malloc_r+0x28>
 8006984:	230c      	movs	r3, #12
 8006986:	2600      	movs	r6, #0
 8006988:	603b      	str	r3, [r7, #0]
 800698a:	4630      	mov	r0, r6
 800698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006990:	4e2e      	ldr	r6, [pc, #184]	; (8006a4c <_malloc_r+0xe4>)
 8006992:	f000 fe4d 	bl	8007630 <__malloc_lock>
 8006996:	6833      	ldr	r3, [r6, #0]
 8006998:	461c      	mov	r4, r3
 800699a:	bb34      	cbnz	r4, 80069ea <_malloc_r+0x82>
 800699c:	4629      	mov	r1, r5
 800699e:	4638      	mov	r0, r7
 80069a0:	f7ff ffc2 	bl	8006928 <sbrk_aligned>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	4604      	mov	r4, r0
 80069a8:	d14d      	bne.n	8006a46 <_malloc_r+0xde>
 80069aa:	6834      	ldr	r4, [r6, #0]
 80069ac:	4626      	mov	r6, r4
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	d140      	bne.n	8006a34 <_malloc_r+0xcc>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	4631      	mov	r1, r6
 80069b6:	4638      	mov	r0, r7
 80069b8:	eb04 0803 	add.w	r8, r4, r3
 80069bc:	f000 fb36 	bl	800702c <_sbrk_r>
 80069c0:	4580      	cmp	r8, r0
 80069c2:	d13a      	bne.n	8006a3a <_malloc_r+0xd2>
 80069c4:	6821      	ldr	r1, [r4, #0]
 80069c6:	3503      	adds	r5, #3
 80069c8:	1a6d      	subs	r5, r5, r1
 80069ca:	f025 0503 	bic.w	r5, r5, #3
 80069ce:	3508      	adds	r5, #8
 80069d0:	2d0c      	cmp	r5, #12
 80069d2:	bf38      	it	cc
 80069d4:	250c      	movcc	r5, #12
 80069d6:	4638      	mov	r0, r7
 80069d8:	4629      	mov	r1, r5
 80069da:	f7ff ffa5 	bl	8006928 <sbrk_aligned>
 80069de:	3001      	adds	r0, #1
 80069e0:	d02b      	beq.n	8006a3a <_malloc_r+0xd2>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	442b      	add	r3, r5
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	e00e      	b.n	8006a08 <_malloc_r+0xa0>
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	1b52      	subs	r2, r2, r5
 80069ee:	d41e      	bmi.n	8006a2e <_malloc_r+0xc6>
 80069f0:	2a0b      	cmp	r2, #11
 80069f2:	d916      	bls.n	8006a22 <_malloc_r+0xba>
 80069f4:	1961      	adds	r1, r4, r5
 80069f6:	42a3      	cmp	r3, r4
 80069f8:	6025      	str	r5, [r4, #0]
 80069fa:	bf18      	it	ne
 80069fc:	6059      	strne	r1, [r3, #4]
 80069fe:	6863      	ldr	r3, [r4, #4]
 8006a00:	bf08      	it	eq
 8006a02:	6031      	streq	r1, [r6, #0]
 8006a04:	5162      	str	r2, [r4, r5]
 8006a06:	604b      	str	r3, [r1, #4]
 8006a08:	4638      	mov	r0, r7
 8006a0a:	f104 060b 	add.w	r6, r4, #11
 8006a0e:	f000 fe15 	bl	800763c <__malloc_unlock>
 8006a12:	f026 0607 	bic.w	r6, r6, #7
 8006a16:	1d23      	adds	r3, r4, #4
 8006a18:	1af2      	subs	r2, r6, r3
 8006a1a:	d0b6      	beq.n	800698a <_malloc_r+0x22>
 8006a1c:	1b9b      	subs	r3, r3, r6
 8006a1e:	50a3      	str	r3, [r4, r2]
 8006a20:	e7b3      	b.n	800698a <_malloc_r+0x22>
 8006a22:	6862      	ldr	r2, [r4, #4]
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	bf0c      	ite	eq
 8006a28:	6032      	streq	r2, [r6, #0]
 8006a2a:	605a      	strne	r2, [r3, #4]
 8006a2c:	e7ec      	b.n	8006a08 <_malloc_r+0xa0>
 8006a2e:	4623      	mov	r3, r4
 8006a30:	6864      	ldr	r4, [r4, #4]
 8006a32:	e7b2      	b.n	800699a <_malloc_r+0x32>
 8006a34:	4634      	mov	r4, r6
 8006a36:	6876      	ldr	r6, [r6, #4]
 8006a38:	e7b9      	b.n	80069ae <_malloc_r+0x46>
 8006a3a:	230c      	movs	r3, #12
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	f000 fdfc 	bl	800763c <__malloc_unlock>
 8006a44:	e7a1      	b.n	800698a <_malloc_r+0x22>
 8006a46:	6025      	str	r5, [r4, #0]
 8006a48:	e7de      	b.n	8006a08 <_malloc_r+0xa0>
 8006a4a:	bf00      	nop
 8006a4c:	20001b38 	.word	0x20001b38

08006a50 <__sfputc_r>:
 8006a50:	6893      	ldr	r3, [r2, #8]
 8006a52:	b410      	push	{r4}
 8006a54:	3b01      	subs	r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	6093      	str	r3, [r2, #8]
 8006a5a:	da07      	bge.n	8006a6c <__sfputc_r+0x1c>
 8006a5c:	6994      	ldr	r4, [r2, #24]
 8006a5e:	42a3      	cmp	r3, r4
 8006a60:	db01      	blt.n	8006a66 <__sfputc_r+0x16>
 8006a62:	290a      	cmp	r1, #10
 8006a64:	d102      	bne.n	8006a6c <__sfputc_r+0x1c>
 8006a66:	bc10      	pop	{r4}
 8006a68:	f000 baf0 	b.w	800704c <__swbuf_r>
 8006a6c:	6813      	ldr	r3, [r2, #0]
 8006a6e:	1c58      	adds	r0, r3, #1
 8006a70:	6010      	str	r0, [r2, #0]
 8006a72:	7019      	strb	r1, [r3, #0]
 8006a74:	4608      	mov	r0, r1
 8006a76:	bc10      	pop	{r4}
 8006a78:	4770      	bx	lr

08006a7a <__sfputs_r>:
 8006a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460f      	mov	r7, r1
 8006a80:	4614      	mov	r4, r2
 8006a82:	18d5      	adds	r5, r2, r3
 8006a84:	42ac      	cmp	r4, r5
 8006a86:	d101      	bne.n	8006a8c <__sfputs_r+0x12>
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e007      	b.n	8006a9c <__sfputs_r+0x22>
 8006a8c:	463a      	mov	r2, r7
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a94:	f7ff ffdc 	bl	8006a50 <__sfputc_r>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d1f3      	bne.n	8006a84 <__sfputs_r+0xa>
 8006a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006aa0 <_vfiprintf_r>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	4698      	mov	r8, r3
 8006aaa:	4606      	mov	r6, r0
 8006aac:	b09d      	sub	sp, #116	; 0x74
 8006aae:	b118      	cbz	r0, 8006ab8 <_vfiprintf_r+0x18>
 8006ab0:	6983      	ldr	r3, [r0, #24]
 8006ab2:	b90b      	cbnz	r3, 8006ab8 <_vfiprintf_r+0x18>
 8006ab4:	f000 fca8 	bl	8007408 <__sinit>
 8006ab8:	4b89      	ldr	r3, [pc, #548]	; (8006ce0 <_vfiprintf_r+0x240>)
 8006aba:	429d      	cmp	r5, r3
 8006abc:	d11b      	bne.n	8006af6 <_vfiprintf_r+0x56>
 8006abe:	6875      	ldr	r5, [r6, #4]
 8006ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ac2:	07d9      	lsls	r1, r3, #31
 8006ac4:	d405      	bmi.n	8006ad2 <_vfiprintf_r+0x32>
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	059a      	lsls	r2, r3, #22
 8006aca:	d402      	bmi.n	8006ad2 <_vfiprintf_r+0x32>
 8006acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ace:	f000 fd39 	bl	8007544 <__retarget_lock_acquire_recursive>
 8006ad2:	89ab      	ldrh	r3, [r5, #12]
 8006ad4:	071b      	lsls	r3, r3, #28
 8006ad6:	d501      	bpl.n	8006adc <_vfiprintf_r+0x3c>
 8006ad8:	692b      	ldr	r3, [r5, #16]
 8006ada:	b9eb      	cbnz	r3, 8006b18 <_vfiprintf_r+0x78>
 8006adc:	4629      	mov	r1, r5
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f000 fb06 	bl	80070f0 <__swsetup_r>
 8006ae4:	b1c0      	cbz	r0, 8006b18 <_vfiprintf_r+0x78>
 8006ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ae8:	07dc      	lsls	r4, r3, #31
 8006aea:	d50e      	bpl.n	8006b0a <_vfiprintf_r+0x6a>
 8006aec:	f04f 30ff 	mov.w	r0, #4294967295
 8006af0:	b01d      	add	sp, #116	; 0x74
 8006af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af6:	4b7b      	ldr	r3, [pc, #492]	; (8006ce4 <_vfiprintf_r+0x244>)
 8006af8:	429d      	cmp	r5, r3
 8006afa:	d101      	bne.n	8006b00 <_vfiprintf_r+0x60>
 8006afc:	68b5      	ldr	r5, [r6, #8]
 8006afe:	e7df      	b.n	8006ac0 <_vfiprintf_r+0x20>
 8006b00:	4b79      	ldr	r3, [pc, #484]	; (8006ce8 <_vfiprintf_r+0x248>)
 8006b02:	429d      	cmp	r5, r3
 8006b04:	bf08      	it	eq
 8006b06:	68f5      	ldreq	r5, [r6, #12]
 8006b08:	e7da      	b.n	8006ac0 <_vfiprintf_r+0x20>
 8006b0a:	89ab      	ldrh	r3, [r5, #12]
 8006b0c:	0598      	lsls	r0, r3, #22
 8006b0e:	d4ed      	bmi.n	8006aec <_vfiprintf_r+0x4c>
 8006b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b12:	f000 fd18 	bl	8007546 <__retarget_lock_release_recursive>
 8006b16:	e7e9      	b.n	8006aec <_vfiprintf_r+0x4c>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1c:	2320      	movs	r3, #32
 8006b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b22:	2330      	movs	r3, #48	; 0x30
 8006b24:	f04f 0901 	mov.w	r9, #1
 8006b28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006cec <_vfiprintf_r+0x24c>
 8006b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b34:	4623      	mov	r3, r4
 8006b36:	469a      	mov	sl, r3
 8006b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b3c:	b10a      	cbz	r2, 8006b42 <_vfiprintf_r+0xa2>
 8006b3e:	2a25      	cmp	r2, #37	; 0x25
 8006b40:	d1f9      	bne.n	8006b36 <_vfiprintf_r+0x96>
 8006b42:	ebba 0b04 	subs.w	fp, sl, r4
 8006b46:	d00b      	beq.n	8006b60 <_vfiprintf_r+0xc0>
 8006b48:	465b      	mov	r3, fp
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f7ff ff93 	bl	8006a7a <__sfputs_r>
 8006b54:	3001      	adds	r0, #1
 8006b56:	f000 80aa 	beq.w	8006cae <_vfiprintf_r+0x20e>
 8006b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b5c:	445a      	add	r2, fp
 8006b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b60:	f89a 3000 	ldrb.w	r3, [sl]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 80a2 	beq.w	8006cae <_vfiprintf_r+0x20e>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b74:	f10a 0a01 	add.w	sl, sl, #1
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	9307      	str	r3, [sp, #28]
 8006b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b80:	931a      	str	r3, [sp, #104]	; 0x68
 8006b82:	4654      	mov	r4, sl
 8006b84:	2205      	movs	r2, #5
 8006b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8a:	4858      	ldr	r0, [pc, #352]	; (8006cec <_vfiprintf_r+0x24c>)
 8006b8c:	f000 fd42 	bl	8007614 <memchr>
 8006b90:	9a04      	ldr	r2, [sp, #16]
 8006b92:	b9d8      	cbnz	r0, 8006bcc <_vfiprintf_r+0x12c>
 8006b94:	06d1      	lsls	r1, r2, #27
 8006b96:	bf44      	itt	mi
 8006b98:	2320      	movmi	r3, #32
 8006b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b9e:	0713      	lsls	r3, r2, #28
 8006ba0:	bf44      	itt	mi
 8006ba2:	232b      	movmi	r3, #43	; 0x2b
 8006ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bac:	2b2a      	cmp	r3, #42	; 0x2a
 8006bae:	d015      	beq.n	8006bdc <_vfiprintf_r+0x13c>
 8006bb0:	4654      	mov	r4, sl
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	f04f 0c0a 	mov.w	ip, #10
 8006bb8:	9a07      	ldr	r2, [sp, #28]
 8006bba:	4621      	mov	r1, r4
 8006bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bc0:	3b30      	subs	r3, #48	; 0x30
 8006bc2:	2b09      	cmp	r3, #9
 8006bc4:	d94e      	bls.n	8006c64 <_vfiprintf_r+0x1c4>
 8006bc6:	b1b0      	cbz	r0, 8006bf6 <_vfiprintf_r+0x156>
 8006bc8:	9207      	str	r2, [sp, #28]
 8006bca:	e014      	b.n	8006bf6 <_vfiprintf_r+0x156>
 8006bcc:	eba0 0308 	sub.w	r3, r0, r8
 8006bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	46a2      	mov	sl, r4
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	e7d2      	b.n	8006b82 <_vfiprintf_r+0xe2>
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	1d19      	adds	r1, r3, #4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	9103      	str	r1, [sp, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	bfbb      	ittet	lt
 8006be8:	425b      	neglt	r3, r3
 8006bea:	f042 0202 	orrlt.w	r2, r2, #2
 8006bee:	9307      	strge	r3, [sp, #28]
 8006bf0:	9307      	strlt	r3, [sp, #28]
 8006bf2:	bfb8      	it	lt
 8006bf4:	9204      	strlt	r2, [sp, #16]
 8006bf6:	7823      	ldrb	r3, [r4, #0]
 8006bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8006bfa:	d10c      	bne.n	8006c16 <_vfiprintf_r+0x176>
 8006bfc:	7863      	ldrb	r3, [r4, #1]
 8006bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006c00:	d135      	bne.n	8006c6e <_vfiprintf_r+0x1ce>
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	3402      	adds	r4, #2
 8006c06:	1d1a      	adds	r2, r3, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	9203      	str	r2, [sp, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bfb8      	it	lt
 8006c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006cf0 <_vfiprintf_r+0x250>
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	4650      	mov	r0, sl
 8006c1e:	7821      	ldrb	r1, [r4, #0]
 8006c20:	f000 fcf8 	bl	8007614 <memchr>
 8006c24:	b140      	cbz	r0, 8006c38 <_vfiprintf_r+0x198>
 8006c26:	2340      	movs	r3, #64	; 0x40
 8006c28:	eba0 000a 	sub.w	r0, r0, sl
 8006c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	3401      	adds	r4, #1
 8006c34:	4303      	orrs	r3, r0
 8006c36:	9304      	str	r3, [sp, #16]
 8006c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c3c:	2206      	movs	r2, #6
 8006c3e:	482d      	ldr	r0, [pc, #180]	; (8006cf4 <_vfiprintf_r+0x254>)
 8006c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c44:	f000 fce6 	bl	8007614 <memchr>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d03f      	beq.n	8006ccc <_vfiprintf_r+0x22c>
 8006c4c:	4b2a      	ldr	r3, [pc, #168]	; (8006cf8 <_vfiprintf_r+0x258>)
 8006c4e:	bb1b      	cbnz	r3, 8006c98 <_vfiprintf_r+0x1f8>
 8006c50:	9b03      	ldr	r3, [sp, #12]
 8006c52:	3307      	adds	r3, #7
 8006c54:	f023 0307 	bic.w	r3, r3, #7
 8006c58:	3308      	adds	r3, #8
 8006c5a:	9303      	str	r3, [sp, #12]
 8006c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5e:	443b      	add	r3, r7
 8006c60:	9309      	str	r3, [sp, #36]	; 0x24
 8006c62:	e767      	b.n	8006b34 <_vfiprintf_r+0x94>
 8006c64:	460c      	mov	r4, r1
 8006c66:	2001      	movs	r0, #1
 8006c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c6c:	e7a5      	b.n	8006bba <_vfiprintf_r+0x11a>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f04f 0c0a 	mov.w	ip, #10
 8006c74:	4619      	mov	r1, r3
 8006c76:	3401      	adds	r4, #1
 8006c78:	9305      	str	r3, [sp, #20]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c80:	3a30      	subs	r2, #48	; 0x30
 8006c82:	2a09      	cmp	r2, #9
 8006c84:	d903      	bls.n	8006c8e <_vfiprintf_r+0x1ee>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0c5      	beq.n	8006c16 <_vfiprintf_r+0x176>
 8006c8a:	9105      	str	r1, [sp, #20]
 8006c8c:	e7c3      	b.n	8006c16 <_vfiprintf_r+0x176>
 8006c8e:	4604      	mov	r4, r0
 8006c90:	2301      	movs	r3, #1
 8006c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c96:	e7f0      	b.n	8006c7a <_vfiprintf_r+0x1da>
 8006c98:	ab03      	add	r3, sp, #12
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	462a      	mov	r2, r5
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4b16      	ldr	r3, [pc, #88]	; (8006cfc <_vfiprintf_r+0x25c>)
 8006ca2:	a904      	add	r1, sp, #16
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	4607      	mov	r7, r0
 8006caa:	1c78      	adds	r0, r7, #1
 8006cac:	d1d6      	bne.n	8006c5c <_vfiprintf_r+0x1bc>
 8006cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cb0:	07d9      	lsls	r1, r3, #31
 8006cb2:	d405      	bmi.n	8006cc0 <_vfiprintf_r+0x220>
 8006cb4:	89ab      	ldrh	r3, [r5, #12]
 8006cb6:	059a      	lsls	r2, r3, #22
 8006cb8:	d402      	bmi.n	8006cc0 <_vfiprintf_r+0x220>
 8006cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cbc:	f000 fc43 	bl	8007546 <__retarget_lock_release_recursive>
 8006cc0:	89ab      	ldrh	r3, [r5, #12]
 8006cc2:	065b      	lsls	r3, r3, #25
 8006cc4:	f53f af12 	bmi.w	8006aec <_vfiprintf_r+0x4c>
 8006cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cca:	e711      	b.n	8006af0 <_vfiprintf_r+0x50>
 8006ccc:	ab03      	add	r3, sp, #12
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	462a      	mov	r2, r5
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <_vfiprintf_r+0x25c>)
 8006cd6:	a904      	add	r1, sp, #16
 8006cd8:	f000 f882 	bl	8006de0 <_printf_i>
 8006cdc:	e7e4      	b.n	8006ca8 <_vfiprintf_r+0x208>
 8006cde:	bf00      	nop
 8006ce0:	080080c4 	.word	0x080080c4
 8006ce4:	080080e4 	.word	0x080080e4
 8006ce8:	080080a4 	.word	0x080080a4
 8006cec:	08008071 	.word	0x08008071
 8006cf0:	08008077 	.word	0x08008077
 8006cf4:	0800807b 	.word	0x0800807b
 8006cf8:	00000000 	.word	0x00000000
 8006cfc:	08006a7b 	.word	0x08006a7b

08006d00 <_printf_common>:
 8006d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d04:	4616      	mov	r6, r2
 8006d06:	4699      	mov	r9, r3
 8006d08:	688a      	ldr	r2, [r1, #8]
 8006d0a:	690b      	ldr	r3, [r1, #16]
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	bfb8      	it	lt
 8006d12:	4613      	movlt	r3, r2
 8006d14:	6033      	str	r3, [r6, #0]
 8006d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d20:	b10a      	cbz	r2, 8006d26 <_printf_common+0x26>
 8006d22:	3301      	adds	r3, #1
 8006d24:	6033      	str	r3, [r6, #0]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	0699      	lsls	r1, r3, #26
 8006d2a:	bf42      	ittt	mi
 8006d2c:	6833      	ldrmi	r3, [r6, #0]
 8006d2e:	3302      	addmi	r3, #2
 8006d30:	6033      	strmi	r3, [r6, #0]
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	f015 0506 	ands.w	r5, r5, #6
 8006d38:	d106      	bne.n	8006d48 <_printf_common+0x48>
 8006d3a:	f104 0a19 	add.w	sl, r4, #25
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	6832      	ldr	r2, [r6, #0]
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dc28      	bgt.n	8006d9a <_printf_common+0x9a>
 8006d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d4c:	1e13      	subs	r3, r2, #0
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	bf18      	it	ne
 8006d52:	2301      	movne	r3, #1
 8006d54:	0692      	lsls	r2, r2, #26
 8006d56:	d42d      	bmi.n	8006db4 <_printf_common+0xb4>
 8006d58:	4649      	mov	r1, r9
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d60:	47c0      	blx	r8
 8006d62:	3001      	adds	r0, #1
 8006d64:	d020      	beq.n	8006da8 <_printf_common+0xa8>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	68e5      	ldr	r5, [r4, #12]
 8006d6a:	f003 0306 	and.w	r3, r3, #6
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	bf18      	it	ne
 8006d72:	2500      	movne	r5, #0
 8006d74:	6832      	ldr	r2, [r6, #0]
 8006d76:	f04f 0600 	mov.w	r6, #0
 8006d7a:	68a3      	ldr	r3, [r4, #8]
 8006d7c:	bf08      	it	eq
 8006d7e:	1aad      	subeq	r5, r5, r2
 8006d80:	6922      	ldr	r2, [r4, #16]
 8006d82:	bf08      	it	eq
 8006d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	bfc4      	itt	gt
 8006d8c:	1a9b      	subgt	r3, r3, r2
 8006d8e:	18ed      	addgt	r5, r5, r3
 8006d90:	341a      	adds	r4, #26
 8006d92:	42b5      	cmp	r5, r6
 8006d94:	d11a      	bne.n	8006dcc <_printf_common+0xcc>
 8006d96:	2000      	movs	r0, #0
 8006d98:	e008      	b.n	8006dac <_printf_common+0xac>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4652      	mov	r2, sl
 8006d9e:	4649      	mov	r1, r9
 8006da0:	4638      	mov	r0, r7
 8006da2:	47c0      	blx	r8
 8006da4:	3001      	adds	r0, #1
 8006da6:	d103      	bne.n	8006db0 <_printf_common+0xb0>
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db0:	3501      	adds	r5, #1
 8006db2:	e7c4      	b.n	8006d3e <_printf_common+0x3e>
 8006db4:	2030      	movs	r0, #48	; 0x30
 8006db6:	18e1      	adds	r1, r4, r3
 8006db8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc2:	4422      	add	r2, r4
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dca:	e7c5      	b.n	8006d58 <_printf_common+0x58>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	4622      	mov	r2, r4
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	47c0      	blx	r8
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	d0e6      	beq.n	8006da8 <_printf_common+0xa8>
 8006dda:	3601      	adds	r6, #1
 8006ddc:	e7d9      	b.n	8006d92 <_printf_common+0x92>
	...

08006de0 <_printf_i>:
 8006de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	7e0f      	ldrb	r7, [r1, #24]
 8006de6:	4691      	mov	r9, r2
 8006de8:	2f78      	cmp	r7, #120	; 0x78
 8006dea:	4680      	mov	r8, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	469a      	mov	sl, r3
 8006df0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006df6:	d807      	bhi.n	8006e08 <_printf_i+0x28>
 8006df8:	2f62      	cmp	r7, #98	; 0x62
 8006dfa:	d80a      	bhi.n	8006e12 <_printf_i+0x32>
 8006dfc:	2f00      	cmp	r7, #0
 8006dfe:	f000 80d9 	beq.w	8006fb4 <_printf_i+0x1d4>
 8006e02:	2f58      	cmp	r7, #88	; 0x58
 8006e04:	f000 80a4 	beq.w	8006f50 <_printf_i+0x170>
 8006e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e10:	e03a      	b.n	8006e88 <_printf_i+0xa8>
 8006e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e16:	2b15      	cmp	r3, #21
 8006e18:	d8f6      	bhi.n	8006e08 <_printf_i+0x28>
 8006e1a:	a101      	add	r1, pc, #4	; (adr r1, 8006e20 <_printf_i+0x40>)
 8006e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e20:	08006e79 	.word	0x08006e79
 8006e24:	08006e8d 	.word	0x08006e8d
 8006e28:	08006e09 	.word	0x08006e09
 8006e2c:	08006e09 	.word	0x08006e09
 8006e30:	08006e09 	.word	0x08006e09
 8006e34:	08006e09 	.word	0x08006e09
 8006e38:	08006e8d 	.word	0x08006e8d
 8006e3c:	08006e09 	.word	0x08006e09
 8006e40:	08006e09 	.word	0x08006e09
 8006e44:	08006e09 	.word	0x08006e09
 8006e48:	08006e09 	.word	0x08006e09
 8006e4c:	08006f9b 	.word	0x08006f9b
 8006e50:	08006ebd 	.word	0x08006ebd
 8006e54:	08006f7d 	.word	0x08006f7d
 8006e58:	08006e09 	.word	0x08006e09
 8006e5c:	08006e09 	.word	0x08006e09
 8006e60:	08006fbd 	.word	0x08006fbd
 8006e64:	08006e09 	.word	0x08006e09
 8006e68:	08006ebd 	.word	0x08006ebd
 8006e6c:	08006e09 	.word	0x08006e09
 8006e70:	08006e09 	.word	0x08006e09
 8006e74:	08006f85 	.word	0x08006f85
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	1d1a      	adds	r2, r3, #4
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	602a      	str	r2, [r5, #0]
 8006e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0a4      	b.n	8006fd6 <_printf_i+0x1f6>
 8006e8c:	6820      	ldr	r0, [r4, #0]
 8006e8e:	6829      	ldr	r1, [r5, #0]
 8006e90:	0606      	lsls	r6, r0, #24
 8006e92:	f101 0304 	add.w	r3, r1, #4
 8006e96:	d50a      	bpl.n	8006eae <_printf_i+0xce>
 8006e98:	680e      	ldr	r6, [r1, #0]
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	2e00      	cmp	r6, #0
 8006e9e:	da03      	bge.n	8006ea8 <_printf_i+0xc8>
 8006ea0:	232d      	movs	r3, #45	; 0x2d
 8006ea2:	4276      	negs	r6, r6
 8006ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea8:	230a      	movs	r3, #10
 8006eaa:	485e      	ldr	r0, [pc, #376]	; (8007024 <_printf_i+0x244>)
 8006eac:	e019      	b.n	8006ee2 <_printf_i+0x102>
 8006eae:	680e      	ldr	r6, [r1, #0]
 8006eb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eb4:	602b      	str	r3, [r5, #0]
 8006eb6:	bf18      	it	ne
 8006eb8:	b236      	sxthne	r6, r6
 8006eba:	e7ef      	b.n	8006e9c <_printf_i+0xbc>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	6820      	ldr	r0, [r4, #0]
 8006ec0:	1d19      	adds	r1, r3, #4
 8006ec2:	6029      	str	r1, [r5, #0]
 8006ec4:	0601      	lsls	r1, r0, #24
 8006ec6:	d501      	bpl.n	8006ecc <_printf_i+0xec>
 8006ec8:	681e      	ldr	r6, [r3, #0]
 8006eca:	e002      	b.n	8006ed2 <_printf_i+0xf2>
 8006ecc:	0646      	lsls	r6, r0, #25
 8006ece:	d5fb      	bpl.n	8006ec8 <_printf_i+0xe8>
 8006ed0:	881e      	ldrh	r6, [r3, #0]
 8006ed2:	2f6f      	cmp	r7, #111	; 0x6f
 8006ed4:	bf0c      	ite	eq
 8006ed6:	2308      	moveq	r3, #8
 8006ed8:	230a      	movne	r3, #10
 8006eda:	4852      	ldr	r0, [pc, #328]	; (8007024 <_printf_i+0x244>)
 8006edc:	2100      	movs	r1, #0
 8006ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ee2:	6865      	ldr	r5, [r4, #4]
 8006ee4:	2d00      	cmp	r5, #0
 8006ee6:	bfa8      	it	ge
 8006ee8:	6821      	ldrge	r1, [r4, #0]
 8006eea:	60a5      	str	r5, [r4, #8]
 8006eec:	bfa4      	itt	ge
 8006eee:	f021 0104 	bicge.w	r1, r1, #4
 8006ef2:	6021      	strge	r1, [r4, #0]
 8006ef4:	b90e      	cbnz	r6, 8006efa <_printf_i+0x11a>
 8006ef6:	2d00      	cmp	r5, #0
 8006ef8:	d04d      	beq.n	8006f96 <_printf_i+0x1b6>
 8006efa:	4615      	mov	r5, r2
 8006efc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f00:	fb03 6711 	mls	r7, r3, r1, r6
 8006f04:	5dc7      	ldrb	r7, [r0, r7]
 8006f06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f0a:	4637      	mov	r7, r6
 8006f0c:	42bb      	cmp	r3, r7
 8006f0e:	460e      	mov	r6, r1
 8006f10:	d9f4      	bls.n	8006efc <_printf_i+0x11c>
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d10b      	bne.n	8006f2e <_printf_i+0x14e>
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	07de      	lsls	r6, r3, #31
 8006f1a:	d508      	bpl.n	8006f2e <_printf_i+0x14e>
 8006f1c:	6923      	ldr	r3, [r4, #16]
 8006f1e:	6861      	ldr	r1, [r4, #4]
 8006f20:	4299      	cmp	r1, r3
 8006f22:	bfde      	ittt	le
 8006f24:	2330      	movle	r3, #48	; 0x30
 8006f26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f2e:	1b52      	subs	r2, r2, r5
 8006f30:	6122      	str	r2, [r4, #16]
 8006f32:	464b      	mov	r3, r9
 8006f34:	4621      	mov	r1, r4
 8006f36:	4640      	mov	r0, r8
 8006f38:	f8cd a000 	str.w	sl, [sp]
 8006f3c:	aa03      	add	r2, sp, #12
 8006f3e:	f7ff fedf 	bl	8006d00 <_printf_common>
 8006f42:	3001      	adds	r0, #1
 8006f44:	d14c      	bne.n	8006fe0 <_printf_i+0x200>
 8006f46:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4a:	b004      	add	sp, #16
 8006f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f50:	4834      	ldr	r0, [pc, #208]	; (8007024 <_printf_i+0x244>)
 8006f52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f56:	6829      	ldr	r1, [r5, #0]
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f5e:	6029      	str	r1, [r5, #0]
 8006f60:	061d      	lsls	r5, r3, #24
 8006f62:	d514      	bpl.n	8006f8e <_printf_i+0x1ae>
 8006f64:	07df      	lsls	r7, r3, #31
 8006f66:	bf44      	itt	mi
 8006f68:	f043 0320 	orrmi.w	r3, r3, #32
 8006f6c:	6023      	strmi	r3, [r4, #0]
 8006f6e:	b91e      	cbnz	r6, 8006f78 <_printf_i+0x198>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	f023 0320 	bic.w	r3, r3, #32
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	2310      	movs	r3, #16
 8006f7a:	e7af      	b.n	8006edc <_printf_i+0xfc>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	f043 0320 	orr.w	r3, r3, #32
 8006f82:	6023      	str	r3, [r4, #0]
 8006f84:	2378      	movs	r3, #120	; 0x78
 8006f86:	4828      	ldr	r0, [pc, #160]	; (8007028 <_printf_i+0x248>)
 8006f88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f8c:	e7e3      	b.n	8006f56 <_printf_i+0x176>
 8006f8e:	0659      	lsls	r1, r3, #25
 8006f90:	bf48      	it	mi
 8006f92:	b2b6      	uxthmi	r6, r6
 8006f94:	e7e6      	b.n	8006f64 <_printf_i+0x184>
 8006f96:	4615      	mov	r5, r2
 8006f98:	e7bb      	b.n	8006f12 <_printf_i+0x132>
 8006f9a:	682b      	ldr	r3, [r5, #0]
 8006f9c:	6826      	ldr	r6, [r4, #0]
 8006f9e:	1d18      	adds	r0, r3, #4
 8006fa0:	6961      	ldr	r1, [r4, #20]
 8006fa2:	6028      	str	r0, [r5, #0]
 8006fa4:	0635      	lsls	r5, r6, #24
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	d501      	bpl.n	8006fae <_printf_i+0x1ce>
 8006faa:	6019      	str	r1, [r3, #0]
 8006fac:	e002      	b.n	8006fb4 <_printf_i+0x1d4>
 8006fae:	0670      	lsls	r0, r6, #25
 8006fb0:	d5fb      	bpl.n	8006faa <_printf_i+0x1ca>
 8006fb2:	8019      	strh	r1, [r3, #0]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4615      	mov	r5, r2
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	e7ba      	b.n	8006f32 <_printf_i+0x152>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	1d1a      	adds	r2, r3, #4
 8006fc2:	602a      	str	r2, [r5, #0]
 8006fc4:	681d      	ldr	r5, [r3, #0]
 8006fc6:	6862      	ldr	r2, [r4, #4]
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f000 fb23 	bl	8007614 <memchr>
 8006fce:	b108      	cbz	r0, 8006fd4 <_printf_i+0x1f4>
 8006fd0:	1b40      	subs	r0, r0, r5
 8006fd2:	6060      	str	r0, [r4, #4]
 8006fd4:	6863      	ldr	r3, [r4, #4]
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fde:	e7a8      	b.n	8006f32 <_printf_i+0x152>
 8006fe0:	462a      	mov	r2, r5
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	6923      	ldr	r3, [r4, #16]
 8006fe8:	47d0      	blx	sl
 8006fea:	3001      	adds	r0, #1
 8006fec:	d0ab      	beq.n	8006f46 <_printf_i+0x166>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	079b      	lsls	r3, r3, #30
 8006ff2:	d413      	bmi.n	800701c <_printf_i+0x23c>
 8006ff4:	68e0      	ldr	r0, [r4, #12]
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	4298      	cmp	r0, r3
 8006ffa:	bfb8      	it	lt
 8006ffc:	4618      	movlt	r0, r3
 8006ffe:	e7a4      	b.n	8006f4a <_printf_i+0x16a>
 8007000:	2301      	movs	r3, #1
 8007002:	4632      	mov	r2, r6
 8007004:	4649      	mov	r1, r9
 8007006:	4640      	mov	r0, r8
 8007008:	47d0      	blx	sl
 800700a:	3001      	adds	r0, #1
 800700c:	d09b      	beq.n	8006f46 <_printf_i+0x166>
 800700e:	3501      	adds	r5, #1
 8007010:	68e3      	ldr	r3, [r4, #12]
 8007012:	9903      	ldr	r1, [sp, #12]
 8007014:	1a5b      	subs	r3, r3, r1
 8007016:	42ab      	cmp	r3, r5
 8007018:	dcf2      	bgt.n	8007000 <_printf_i+0x220>
 800701a:	e7eb      	b.n	8006ff4 <_printf_i+0x214>
 800701c:	2500      	movs	r5, #0
 800701e:	f104 0619 	add.w	r6, r4, #25
 8007022:	e7f5      	b.n	8007010 <_printf_i+0x230>
 8007024:	08008082 	.word	0x08008082
 8007028:	08008093 	.word	0x08008093

0800702c <_sbrk_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	2300      	movs	r3, #0
 8007030:	4d05      	ldr	r5, [pc, #20]	; (8007048 <_sbrk_r+0x1c>)
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	f7fa fbbc 	bl	80017b4 <_sbrk>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_sbrk_r+0x1a>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_sbrk_r+0x1a>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20001b44 	.word	0x20001b44

0800704c <__swbuf_r>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	460e      	mov	r6, r1
 8007050:	4614      	mov	r4, r2
 8007052:	4605      	mov	r5, r0
 8007054:	b118      	cbz	r0, 800705e <__swbuf_r+0x12>
 8007056:	6983      	ldr	r3, [r0, #24]
 8007058:	b90b      	cbnz	r3, 800705e <__swbuf_r+0x12>
 800705a:	f000 f9d5 	bl	8007408 <__sinit>
 800705e:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <__swbuf_r+0x98>)
 8007060:	429c      	cmp	r4, r3
 8007062:	d12b      	bne.n	80070bc <__swbuf_r+0x70>
 8007064:	686c      	ldr	r4, [r5, #4]
 8007066:	69a3      	ldr	r3, [r4, #24]
 8007068:	60a3      	str	r3, [r4, #8]
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	071a      	lsls	r2, r3, #28
 800706e:	d52f      	bpl.n	80070d0 <__swbuf_r+0x84>
 8007070:	6923      	ldr	r3, [r4, #16]
 8007072:	b36b      	cbz	r3, 80070d0 <__swbuf_r+0x84>
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	6820      	ldr	r0, [r4, #0]
 8007078:	b2f6      	uxtb	r6, r6
 800707a:	1ac0      	subs	r0, r0, r3
 800707c:	6963      	ldr	r3, [r4, #20]
 800707e:	4637      	mov	r7, r6
 8007080:	4283      	cmp	r3, r0
 8007082:	dc04      	bgt.n	800708e <__swbuf_r+0x42>
 8007084:	4621      	mov	r1, r4
 8007086:	4628      	mov	r0, r5
 8007088:	f000 f92a 	bl	80072e0 <_fflush_r>
 800708c:	bb30      	cbnz	r0, 80070dc <__swbuf_r+0x90>
 800708e:	68a3      	ldr	r3, [r4, #8]
 8007090:	3001      	adds	r0, #1
 8007092:	3b01      	subs	r3, #1
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	6022      	str	r2, [r4, #0]
 800709c:	701e      	strb	r6, [r3, #0]
 800709e:	6963      	ldr	r3, [r4, #20]
 80070a0:	4283      	cmp	r3, r0
 80070a2:	d004      	beq.n	80070ae <__swbuf_r+0x62>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	07db      	lsls	r3, r3, #31
 80070a8:	d506      	bpl.n	80070b8 <__swbuf_r+0x6c>
 80070aa:	2e0a      	cmp	r6, #10
 80070ac:	d104      	bne.n	80070b8 <__swbuf_r+0x6c>
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 f915 	bl	80072e0 <_fflush_r>
 80070b6:	b988      	cbnz	r0, 80070dc <__swbuf_r+0x90>
 80070b8:	4638      	mov	r0, r7
 80070ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <__swbuf_r+0x9c>)
 80070be:	429c      	cmp	r4, r3
 80070c0:	d101      	bne.n	80070c6 <__swbuf_r+0x7a>
 80070c2:	68ac      	ldr	r4, [r5, #8]
 80070c4:	e7cf      	b.n	8007066 <__swbuf_r+0x1a>
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <__swbuf_r+0xa0>)
 80070c8:	429c      	cmp	r4, r3
 80070ca:	bf08      	it	eq
 80070cc:	68ec      	ldreq	r4, [r5, #12]
 80070ce:	e7ca      	b.n	8007066 <__swbuf_r+0x1a>
 80070d0:	4621      	mov	r1, r4
 80070d2:	4628      	mov	r0, r5
 80070d4:	f000 f80c 	bl	80070f0 <__swsetup_r>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d0cb      	beq.n	8007074 <__swbuf_r+0x28>
 80070dc:	f04f 37ff 	mov.w	r7, #4294967295
 80070e0:	e7ea      	b.n	80070b8 <__swbuf_r+0x6c>
 80070e2:	bf00      	nop
 80070e4:	080080c4 	.word	0x080080c4
 80070e8:	080080e4 	.word	0x080080e4
 80070ec:	080080a4 	.word	0x080080a4

080070f0 <__swsetup_r>:
 80070f0:	4b32      	ldr	r3, [pc, #200]	; (80071bc <__swsetup_r+0xcc>)
 80070f2:	b570      	push	{r4, r5, r6, lr}
 80070f4:	681d      	ldr	r5, [r3, #0]
 80070f6:	4606      	mov	r6, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	b125      	cbz	r5, 8007106 <__swsetup_r+0x16>
 80070fc:	69ab      	ldr	r3, [r5, #24]
 80070fe:	b913      	cbnz	r3, 8007106 <__swsetup_r+0x16>
 8007100:	4628      	mov	r0, r5
 8007102:	f000 f981 	bl	8007408 <__sinit>
 8007106:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <__swsetup_r+0xd0>)
 8007108:	429c      	cmp	r4, r3
 800710a:	d10f      	bne.n	800712c <__swsetup_r+0x3c>
 800710c:	686c      	ldr	r4, [r5, #4]
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007114:	0719      	lsls	r1, r3, #28
 8007116:	d42c      	bmi.n	8007172 <__swsetup_r+0x82>
 8007118:	06dd      	lsls	r5, r3, #27
 800711a:	d411      	bmi.n	8007140 <__swsetup_r+0x50>
 800711c:	2309      	movs	r3, #9
 800711e:	6033      	str	r3, [r6, #0]
 8007120:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	e03e      	b.n	80071aa <__swsetup_r+0xba>
 800712c:	4b25      	ldr	r3, [pc, #148]	; (80071c4 <__swsetup_r+0xd4>)
 800712e:	429c      	cmp	r4, r3
 8007130:	d101      	bne.n	8007136 <__swsetup_r+0x46>
 8007132:	68ac      	ldr	r4, [r5, #8]
 8007134:	e7eb      	b.n	800710e <__swsetup_r+0x1e>
 8007136:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <__swsetup_r+0xd8>)
 8007138:	429c      	cmp	r4, r3
 800713a:	bf08      	it	eq
 800713c:	68ec      	ldreq	r4, [r5, #12]
 800713e:	e7e6      	b.n	800710e <__swsetup_r+0x1e>
 8007140:	0758      	lsls	r0, r3, #29
 8007142:	d512      	bpl.n	800716a <__swsetup_r+0x7a>
 8007144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007146:	b141      	cbz	r1, 800715a <__swsetup_r+0x6a>
 8007148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800714c:	4299      	cmp	r1, r3
 800714e:	d002      	beq.n	8007156 <__swsetup_r+0x66>
 8007150:	4630      	mov	r0, r6
 8007152:	f7ff fba1 	bl	8006898 <_free_r>
 8007156:	2300      	movs	r3, #0
 8007158:	6363      	str	r3, [r4, #52]	; 0x34
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	2300      	movs	r3, #0
 8007164:	6063      	str	r3, [r4, #4]
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	f043 0308 	orr.w	r3, r3, #8
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	6923      	ldr	r3, [r4, #16]
 8007174:	b94b      	cbnz	r3, 800718a <__swsetup_r+0x9a>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800717c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007180:	d003      	beq.n	800718a <__swsetup_r+0x9a>
 8007182:	4621      	mov	r1, r4
 8007184:	4630      	mov	r0, r6
 8007186:	f000 fa05 	bl	8007594 <__smakebuf_r>
 800718a:	89a0      	ldrh	r0, [r4, #12]
 800718c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007190:	f010 0301 	ands.w	r3, r0, #1
 8007194:	d00a      	beq.n	80071ac <__swsetup_r+0xbc>
 8007196:	2300      	movs	r3, #0
 8007198:	60a3      	str	r3, [r4, #8]
 800719a:	6963      	ldr	r3, [r4, #20]
 800719c:	425b      	negs	r3, r3
 800719e:	61a3      	str	r3, [r4, #24]
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	b943      	cbnz	r3, 80071b6 <__swsetup_r+0xc6>
 80071a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071a8:	d1ba      	bne.n	8007120 <__swsetup_r+0x30>
 80071aa:	bd70      	pop	{r4, r5, r6, pc}
 80071ac:	0781      	lsls	r1, r0, #30
 80071ae:	bf58      	it	pl
 80071b0:	6963      	ldrpl	r3, [r4, #20]
 80071b2:	60a3      	str	r3, [r4, #8]
 80071b4:	e7f4      	b.n	80071a0 <__swsetup_r+0xb0>
 80071b6:	2000      	movs	r0, #0
 80071b8:	e7f7      	b.n	80071aa <__swsetup_r+0xba>
 80071ba:	bf00      	nop
 80071bc:	20000014 	.word	0x20000014
 80071c0:	080080c4 	.word	0x080080c4
 80071c4:	080080e4 	.word	0x080080e4
 80071c8:	080080a4 	.word	0x080080a4

080071cc <abort>:
 80071cc:	2006      	movs	r0, #6
 80071ce:	b508      	push	{r3, lr}
 80071d0:	f000 fa62 	bl	8007698 <raise>
 80071d4:	2001      	movs	r0, #1
 80071d6:	f7fa fa7a 	bl	80016ce <_exit>
	...

080071dc <__sflush_r>:
 80071dc:	898a      	ldrh	r2, [r1, #12]
 80071de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e0:	4605      	mov	r5, r0
 80071e2:	0710      	lsls	r0, r2, #28
 80071e4:	460c      	mov	r4, r1
 80071e6:	d457      	bmi.n	8007298 <__sflush_r+0xbc>
 80071e8:	684b      	ldr	r3, [r1, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dc04      	bgt.n	80071f8 <__sflush_r+0x1c>
 80071ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	dc01      	bgt.n	80071f8 <__sflush_r+0x1c>
 80071f4:	2000      	movs	r0, #0
 80071f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	d0fa      	beq.n	80071f4 <__sflush_r+0x18>
 80071fe:	2300      	movs	r3, #0
 8007200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007204:	682f      	ldr	r7, [r5, #0]
 8007206:	602b      	str	r3, [r5, #0]
 8007208:	d032      	beq.n	8007270 <__sflush_r+0x94>
 800720a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	075a      	lsls	r2, r3, #29
 8007210:	d505      	bpl.n	800721e <__sflush_r+0x42>
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	1ac0      	subs	r0, r0, r3
 8007216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007218:	b10b      	cbz	r3, 800721e <__sflush_r+0x42>
 800721a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800721c:	1ac0      	subs	r0, r0, r3
 800721e:	2300      	movs	r3, #0
 8007220:	4602      	mov	r2, r0
 8007222:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007224:	4628      	mov	r0, r5
 8007226:	6a21      	ldr	r1, [r4, #32]
 8007228:	47b0      	blx	r6
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	d106      	bne.n	800723e <__sflush_r+0x62>
 8007230:	6829      	ldr	r1, [r5, #0]
 8007232:	291d      	cmp	r1, #29
 8007234:	d82c      	bhi.n	8007290 <__sflush_r+0xb4>
 8007236:	4a29      	ldr	r2, [pc, #164]	; (80072dc <__sflush_r+0x100>)
 8007238:	40ca      	lsrs	r2, r1
 800723a:	07d6      	lsls	r6, r2, #31
 800723c:	d528      	bpl.n	8007290 <__sflush_r+0xb4>
 800723e:	2200      	movs	r2, #0
 8007240:	6062      	str	r2, [r4, #4]
 8007242:	6922      	ldr	r2, [r4, #16]
 8007244:	04d9      	lsls	r1, r3, #19
 8007246:	6022      	str	r2, [r4, #0]
 8007248:	d504      	bpl.n	8007254 <__sflush_r+0x78>
 800724a:	1c42      	adds	r2, r0, #1
 800724c:	d101      	bne.n	8007252 <__sflush_r+0x76>
 800724e:	682b      	ldr	r3, [r5, #0]
 8007250:	b903      	cbnz	r3, 8007254 <__sflush_r+0x78>
 8007252:	6560      	str	r0, [r4, #84]	; 0x54
 8007254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007256:	602f      	str	r7, [r5, #0]
 8007258:	2900      	cmp	r1, #0
 800725a:	d0cb      	beq.n	80071f4 <__sflush_r+0x18>
 800725c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007260:	4299      	cmp	r1, r3
 8007262:	d002      	beq.n	800726a <__sflush_r+0x8e>
 8007264:	4628      	mov	r0, r5
 8007266:	f7ff fb17 	bl	8006898 <_free_r>
 800726a:	2000      	movs	r0, #0
 800726c:	6360      	str	r0, [r4, #52]	; 0x34
 800726e:	e7c2      	b.n	80071f6 <__sflush_r+0x1a>
 8007270:	6a21      	ldr	r1, [r4, #32]
 8007272:	2301      	movs	r3, #1
 8007274:	4628      	mov	r0, r5
 8007276:	47b0      	blx	r6
 8007278:	1c41      	adds	r1, r0, #1
 800727a:	d1c7      	bne.n	800720c <__sflush_r+0x30>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0c4      	beq.n	800720c <__sflush_r+0x30>
 8007282:	2b1d      	cmp	r3, #29
 8007284:	d001      	beq.n	800728a <__sflush_r+0xae>
 8007286:	2b16      	cmp	r3, #22
 8007288:	d101      	bne.n	800728e <__sflush_r+0xb2>
 800728a:	602f      	str	r7, [r5, #0]
 800728c:	e7b2      	b.n	80071f4 <__sflush_r+0x18>
 800728e:	89a3      	ldrh	r3, [r4, #12]
 8007290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007294:	81a3      	strh	r3, [r4, #12]
 8007296:	e7ae      	b.n	80071f6 <__sflush_r+0x1a>
 8007298:	690f      	ldr	r7, [r1, #16]
 800729a:	2f00      	cmp	r7, #0
 800729c:	d0aa      	beq.n	80071f4 <__sflush_r+0x18>
 800729e:	0793      	lsls	r3, r2, #30
 80072a0:	bf18      	it	ne
 80072a2:	2300      	movne	r3, #0
 80072a4:	680e      	ldr	r6, [r1, #0]
 80072a6:	bf08      	it	eq
 80072a8:	694b      	ldreq	r3, [r1, #20]
 80072aa:	1bf6      	subs	r6, r6, r7
 80072ac:	600f      	str	r7, [r1, #0]
 80072ae:	608b      	str	r3, [r1, #8]
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	dd9f      	ble.n	80071f4 <__sflush_r+0x18>
 80072b4:	4633      	mov	r3, r6
 80072b6:	463a      	mov	r2, r7
 80072b8:	4628      	mov	r0, r5
 80072ba:	6a21      	ldr	r1, [r4, #32]
 80072bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80072c0:	47e0      	blx	ip
 80072c2:	2800      	cmp	r0, #0
 80072c4:	dc06      	bgt.n	80072d4 <__sflush_r+0xf8>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	e790      	b.n	80071f6 <__sflush_r+0x1a>
 80072d4:	4407      	add	r7, r0
 80072d6:	1a36      	subs	r6, r6, r0
 80072d8:	e7ea      	b.n	80072b0 <__sflush_r+0xd4>
 80072da:	bf00      	nop
 80072dc:	20400001 	.word	0x20400001

080072e0 <_fflush_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	4605      	mov	r5, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	b913      	cbnz	r3, 80072f0 <_fflush_r+0x10>
 80072ea:	2500      	movs	r5, #0
 80072ec:	4628      	mov	r0, r5
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	b118      	cbz	r0, 80072fa <_fflush_r+0x1a>
 80072f2:	6983      	ldr	r3, [r0, #24]
 80072f4:	b90b      	cbnz	r3, 80072fa <_fflush_r+0x1a>
 80072f6:	f000 f887 	bl	8007408 <__sinit>
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <_fflush_r+0x6c>)
 80072fc:	429c      	cmp	r4, r3
 80072fe:	d11b      	bne.n	8007338 <_fflush_r+0x58>
 8007300:	686c      	ldr	r4, [r5, #4]
 8007302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d0ef      	beq.n	80072ea <_fflush_r+0xa>
 800730a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800730c:	07d0      	lsls	r0, r2, #31
 800730e:	d404      	bmi.n	800731a <_fflush_r+0x3a>
 8007310:	0599      	lsls	r1, r3, #22
 8007312:	d402      	bmi.n	800731a <_fflush_r+0x3a>
 8007314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007316:	f000 f915 	bl	8007544 <__retarget_lock_acquire_recursive>
 800731a:	4628      	mov	r0, r5
 800731c:	4621      	mov	r1, r4
 800731e:	f7ff ff5d 	bl	80071dc <__sflush_r>
 8007322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007324:	4605      	mov	r5, r0
 8007326:	07da      	lsls	r2, r3, #31
 8007328:	d4e0      	bmi.n	80072ec <_fflush_r+0xc>
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	059b      	lsls	r3, r3, #22
 800732e:	d4dd      	bmi.n	80072ec <_fflush_r+0xc>
 8007330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007332:	f000 f908 	bl	8007546 <__retarget_lock_release_recursive>
 8007336:	e7d9      	b.n	80072ec <_fflush_r+0xc>
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <_fflush_r+0x70>)
 800733a:	429c      	cmp	r4, r3
 800733c:	d101      	bne.n	8007342 <_fflush_r+0x62>
 800733e:	68ac      	ldr	r4, [r5, #8]
 8007340:	e7df      	b.n	8007302 <_fflush_r+0x22>
 8007342:	4b04      	ldr	r3, [pc, #16]	; (8007354 <_fflush_r+0x74>)
 8007344:	429c      	cmp	r4, r3
 8007346:	bf08      	it	eq
 8007348:	68ec      	ldreq	r4, [r5, #12]
 800734a:	e7da      	b.n	8007302 <_fflush_r+0x22>
 800734c:	080080c4 	.word	0x080080c4
 8007350:	080080e4 	.word	0x080080e4
 8007354:	080080a4 	.word	0x080080a4

08007358 <std>:
 8007358:	2300      	movs	r3, #0
 800735a:	b510      	push	{r4, lr}
 800735c:	4604      	mov	r4, r0
 800735e:	e9c0 3300 	strd	r3, r3, [r0]
 8007362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007366:	6083      	str	r3, [r0, #8]
 8007368:	8181      	strh	r1, [r0, #12]
 800736a:	6643      	str	r3, [r0, #100]	; 0x64
 800736c:	81c2      	strh	r2, [r0, #14]
 800736e:	6183      	str	r3, [r0, #24]
 8007370:	4619      	mov	r1, r3
 8007372:	2208      	movs	r2, #8
 8007374:	305c      	adds	r0, #92	; 0x5c
 8007376:	f7ff f965 	bl	8006644 <memset>
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <std+0x38>)
 800737c:	6224      	str	r4, [r4, #32]
 800737e:	6263      	str	r3, [r4, #36]	; 0x24
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <std+0x3c>)
 8007382:	62a3      	str	r3, [r4, #40]	; 0x28
 8007384:	4b04      	ldr	r3, [pc, #16]	; (8007398 <std+0x40>)
 8007386:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <std+0x44>)
 800738a:	6323      	str	r3, [r4, #48]	; 0x30
 800738c:	bd10      	pop	{r4, pc}
 800738e:	bf00      	nop
 8007390:	080076d1 	.word	0x080076d1
 8007394:	080076f3 	.word	0x080076f3
 8007398:	0800772b 	.word	0x0800772b
 800739c:	0800774f 	.word	0x0800774f

080073a0 <_cleanup_r>:
 80073a0:	4901      	ldr	r1, [pc, #4]	; (80073a8 <_cleanup_r+0x8>)
 80073a2:	f000 b8af 	b.w	8007504 <_fwalk_reent>
 80073a6:	bf00      	nop
 80073a8:	080072e1 	.word	0x080072e1

080073ac <__sfmoreglue>:
 80073ac:	2268      	movs	r2, #104	; 0x68
 80073ae:	b570      	push	{r4, r5, r6, lr}
 80073b0:	1e4d      	subs	r5, r1, #1
 80073b2:	4355      	muls	r5, r2
 80073b4:	460e      	mov	r6, r1
 80073b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073ba:	f7ff fad5 	bl	8006968 <_malloc_r>
 80073be:	4604      	mov	r4, r0
 80073c0:	b140      	cbz	r0, 80073d4 <__sfmoreglue+0x28>
 80073c2:	2100      	movs	r1, #0
 80073c4:	e9c0 1600 	strd	r1, r6, [r0]
 80073c8:	300c      	adds	r0, #12
 80073ca:	60a0      	str	r0, [r4, #8]
 80073cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073d0:	f7ff f938 	bl	8006644 <memset>
 80073d4:	4620      	mov	r0, r4
 80073d6:	bd70      	pop	{r4, r5, r6, pc}

080073d8 <__sfp_lock_acquire>:
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <__sfp_lock_acquire+0x8>)
 80073da:	f000 b8b3 	b.w	8007544 <__retarget_lock_acquire_recursive>
 80073de:	bf00      	nop
 80073e0:	20001b41 	.word	0x20001b41

080073e4 <__sfp_lock_release>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__sfp_lock_release+0x8>)
 80073e6:	f000 b8ae 	b.w	8007546 <__retarget_lock_release_recursive>
 80073ea:	bf00      	nop
 80073ec:	20001b41 	.word	0x20001b41

080073f0 <__sinit_lock_acquire>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__sinit_lock_acquire+0x8>)
 80073f2:	f000 b8a7 	b.w	8007544 <__retarget_lock_acquire_recursive>
 80073f6:	bf00      	nop
 80073f8:	20001b42 	.word	0x20001b42

080073fc <__sinit_lock_release>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__sinit_lock_release+0x8>)
 80073fe:	f000 b8a2 	b.w	8007546 <__retarget_lock_release_recursive>
 8007402:	bf00      	nop
 8007404:	20001b42 	.word	0x20001b42

08007408 <__sinit>:
 8007408:	b510      	push	{r4, lr}
 800740a:	4604      	mov	r4, r0
 800740c:	f7ff fff0 	bl	80073f0 <__sinit_lock_acquire>
 8007410:	69a3      	ldr	r3, [r4, #24]
 8007412:	b11b      	cbz	r3, 800741c <__sinit+0x14>
 8007414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007418:	f7ff bff0 	b.w	80073fc <__sinit_lock_release>
 800741c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007420:	6523      	str	r3, [r4, #80]	; 0x50
 8007422:	4b13      	ldr	r3, [pc, #76]	; (8007470 <__sinit+0x68>)
 8007424:	4a13      	ldr	r2, [pc, #76]	; (8007474 <__sinit+0x6c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	62a2      	str	r2, [r4, #40]	; 0x28
 800742a:	42a3      	cmp	r3, r4
 800742c:	bf08      	it	eq
 800742e:	2301      	moveq	r3, #1
 8007430:	4620      	mov	r0, r4
 8007432:	bf08      	it	eq
 8007434:	61a3      	streq	r3, [r4, #24]
 8007436:	f000 f81f 	bl	8007478 <__sfp>
 800743a:	6060      	str	r0, [r4, #4]
 800743c:	4620      	mov	r0, r4
 800743e:	f000 f81b 	bl	8007478 <__sfp>
 8007442:	60a0      	str	r0, [r4, #8]
 8007444:	4620      	mov	r0, r4
 8007446:	f000 f817 	bl	8007478 <__sfp>
 800744a:	2200      	movs	r2, #0
 800744c:	2104      	movs	r1, #4
 800744e:	60e0      	str	r0, [r4, #12]
 8007450:	6860      	ldr	r0, [r4, #4]
 8007452:	f7ff ff81 	bl	8007358 <std>
 8007456:	2201      	movs	r2, #1
 8007458:	2109      	movs	r1, #9
 800745a:	68a0      	ldr	r0, [r4, #8]
 800745c:	f7ff ff7c 	bl	8007358 <std>
 8007460:	2202      	movs	r2, #2
 8007462:	2112      	movs	r1, #18
 8007464:	68e0      	ldr	r0, [r4, #12]
 8007466:	f7ff ff77 	bl	8007358 <std>
 800746a:	2301      	movs	r3, #1
 800746c:	61a3      	str	r3, [r4, #24]
 800746e:	e7d1      	b.n	8007414 <__sinit+0xc>
 8007470:	08007ebc 	.word	0x08007ebc
 8007474:	080073a1 	.word	0x080073a1

08007478 <__sfp>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	4607      	mov	r7, r0
 800747c:	f7ff ffac 	bl	80073d8 <__sfp_lock_acquire>
 8007480:	4b1e      	ldr	r3, [pc, #120]	; (80074fc <__sfp+0x84>)
 8007482:	681e      	ldr	r6, [r3, #0]
 8007484:	69b3      	ldr	r3, [r6, #24]
 8007486:	b913      	cbnz	r3, 800748e <__sfp+0x16>
 8007488:	4630      	mov	r0, r6
 800748a:	f7ff ffbd 	bl	8007408 <__sinit>
 800748e:	3648      	adds	r6, #72	; 0x48
 8007490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007494:	3b01      	subs	r3, #1
 8007496:	d503      	bpl.n	80074a0 <__sfp+0x28>
 8007498:	6833      	ldr	r3, [r6, #0]
 800749a:	b30b      	cbz	r3, 80074e0 <__sfp+0x68>
 800749c:	6836      	ldr	r6, [r6, #0]
 800749e:	e7f7      	b.n	8007490 <__sfp+0x18>
 80074a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074a4:	b9d5      	cbnz	r5, 80074dc <__sfp+0x64>
 80074a6:	4b16      	ldr	r3, [pc, #88]	; (8007500 <__sfp+0x88>)
 80074a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074ac:	60e3      	str	r3, [r4, #12]
 80074ae:	6665      	str	r5, [r4, #100]	; 0x64
 80074b0:	f000 f847 	bl	8007542 <__retarget_lock_init_recursive>
 80074b4:	f7ff ff96 	bl	80073e4 <__sfp_lock_release>
 80074b8:	2208      	movs	r2, #8
 80074ba:	4629      	mov	r1, r5
 80074bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074c4:	6025      	str	r5, [r4, #0]
 80074c6:	61a5      	str	r5, [r4, #24]
 80074c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074cc:	f7ff f8ba 	bl	8006644 <memset>
 80074d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074d8:	4620      	mov	r0, r4
 80074da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074dc:	3468      	adds	r4, #104	; 0x68
 80074de:	e7d9      	b.n	8007494 <__sfp+0x1c>
 80074e0:	2104      	movs	r1, #4
 80074e2:	4638      	mov	r0, r7
 80074e4:	f7ff ff62 	bl	80073ac <__sfmoreglue>
 80074e8:	4604      	mov	r4, r0
 80074ea:	6030      	str	r0, [r6, #0]
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d1d5      	bne.n	800749c <__sfp+0x24>
 80074f0:	f7ff ff78 	bl	80073e4 <__sfp_lock_release>
 80074f4:	230c      	movs	r3, #12
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	e7ee      	b.n	80074d8 <__sfp+0x60>
 80074fa:	bf00      	nop
 80074fc:	08007ebc 	.word	0x08007ebc
 8007500:	ffff0001 	.word	0xffff0001

08007504 <_fwalk_reent>:
 8007504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007508:	4606      	mov	r6, r0
 800750a:	4688      	mov	r8, r1
 800750c:	2700      	movs	r7, #0
 800750e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007516:	f1b9 0901 	subs.w	r9, r9, #1
 800751a:	d505      	bpl.n	8007528 <_fwalk_reent+0x24>
 800751c:	6824      	ldr	r4, [r4, #0]
 800751e:	2c00      	cmp	r4, #0
 8007520:	d1f7      	bne.n	8007512 <_fwalk_reent+0xe>
 8007522:	4638      	mov	r0, r7
 8007524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007528:	89ab      	ldrh	r3, [r5, #12]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d907      	bls.n	800753e <_fwalk_reent+0x3a>
 800752e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007532:	3301      	adds	r3, #1
 8007534:	d003      	beq.n	800753e <_fwalk_reent+0x3a>
 8007536:	4629      	mov	r1, r5
 8007538:	4630      	mov	r0, r6
 800753a:	47c0      	blx	r8
 800753c:	4307      	orrs	r7, r0
 800753e:	3568      	adds	r5, #104	; 0x68
 8007540:	e7e9      	b.n	8007516 <_fwalk_reent+0x12>

08007542 <__retarget_lock_init_recursive>:
 8007542:	4770      	bx	lr

08007544 <__retarget_lock_acquire_recursive>:
 8007544:	4770      	bx	lr

08007546 <__retarget_lock_release_recursive>:
 8007546:	4770      	bx	lr

08007548 <__swhatbuf_r>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	460e      	mov	r6, r1
 800754c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007550:	4614      	mov	r4, r2
 8007552:	2900      	cmp	r1, #0
 8007554:	461d      	mov	r5, r3
 8007556:	b096      	sub	sp, #88	; 0x58
 8007558:	da08      	bge.n	800756c <__swhatbuf_r+0x24>
 800755a:	2200      	movs	r2, #0
 800755c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007560:	602a      	str	r2, [r5, #0]
 8007562:	061a      	lsls	r2, r3, #24
 8007564:	d410      	bmi.n	8007588 <__swhatbuf_r+0x40>
 8007566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800756a:	e00e      	b.n	800758a <__swhatbuf_r+0x42>
 800756c:	466a      	mov	r2, sp
 800756e:	f000 f915 	bl	800779c <_fstat_r>
 8007572:	2800      	cmp	r0, #0
 8007574:	dbf1      	blt.n	800755a <__swhatbuf_r+0x12>
 8007576:	9a01      	ldr	r2, [sp, #4]
 8007578:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800757c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007580:	425a      	negs	r2, r3
 8007582:	415a      	adcs	r2, r3
 8007584:	602a      	str	r2, [r5, #0]
 8007586:	e7ee      	b.n	8007566 <__swhatbuf_r+0x1e>
 8007588:	2340      	movs	r3, #64	; 0x40
 800758a:	2000      	movs	r0, #0
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	b016      	add	sp, #88	; 0x58
 8007590:	bd70      	pop	{r4, r5, r6, pc}
	...

08007594 <__smakebuf_r>:
 8007594:	898b      	ldrh	r3, [r1, #12]
 8007596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007598:	079d      	lsls	r5, r3, #30
 800759a:	4606      	mov	r6, r0
 800759c:	460c      	mov	r4, r1
 800759e:	d507      	bpl.n	80075b0 <__smakebuf_r+0x1c>
 80075a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	2301      	movs	r3, #1
 80075aa:	6163      	str	r3, [r4, #20]
 80075ac:	b002      	add	sp, #8
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	466a      	mov	r2, sp
 80075b2:	ab01      	add	r3, sp, #4
 80075b4:	f7ff ffc8 	bl	8007548 <__swhatbuf_r>
 80075b8:	9900      	ldr	r1, [sp, #0]
 80075ba:	4605      	mov	r5, r0
 80075bc:	4630      	mov	r0, r6
 80075be:	f7ff f9d3 	bl	8006968 <_malloc_r>
 80075c2:	b948      	cbnz	r0, 80075d8 <__smakebuf_r+0x44>
 80075c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c8:	059a      	lsls	r2, r3, #22
 80075ca:	d4ef      	bmi.n	80075ac <__smakebuf_r+0x18>
 80075cc:	f023 0303 	bic.w	r3, r3, #3
 80075d0:	f043 0302 	orr.w	r3, r3, #2
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	e7e3      	b.n	80075a0 <__smakebuf_r+0xc>
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <__smakebuf_r+0x7c>)
 80075da:	62b3      	str	r3, [r6, #40]	; 0x28
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	6020      	str	r0, [r4, #0]
 80075e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e4:	81a3      	strh	r3, [r4, #12]
 80075e6:	9b00      	ldr	r3, [sp, #0]
 80075e8:	6120      	str	r0, [r4, #16]
 80075ea:	6163      	str	r3, [r4, #20]
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	b15b      	cbz	r3, 8007608 <__smakebuf_r+0x74>
 80075f0:	4630      	mov	r0, r6
 80075f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f6:	f000 f8e3 	bl	80077c0 <_isatty_r>
 80075fa:	b128      	cbz	r0, 8007608 <__smakebuf_r+0x74>
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	f023 0303 	bic.w	r3, r3, #3
 8007602:	f043 0301 	orr.w	r3, r3, #1
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	89a0      	ldrh	r0, [r4, #12]
 800760a:	4305      	orrs	r5, r0
 800760c:	81a5      	strh	r5, [r4, #12]
 800760e:	e7cd      	b.n	80075ac <__smakebuf_r+0x18>
 8007610:	080073a1 	.word	0x080073a1

08007614 <memchr>:
 8007614:	4603      	mov	r3, r0
 8007616:	b510      	push	{r4, lr}
 8007618:	b2c9      	uxtb	r1, r1
 800761a:	4402      	add	r2, r0
 800761c:	4293      	cmp	r3, r2
 800761e:	4618      	mov	r0, r3
 8007620:	d101      	bne.n	8007626 <memchr+0x12>
 8007622:	2000      	movs	r0, #0
 8007624:	e003      	b.n	800762e <memchr+0x1a>
 8007626:	7804      	ldrb	r4, [r0, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	428c      	cmp	r4, r1
 800762c:	d1f6      	bne.n	800761c <memchr+0x8>
 800762e:	bd10      	pop	{r4, pc}

08007630 <__malloc_lock>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__malloc_lock+0x8>)
 8007632:	f7ff bf87 	b.w	8007544 <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	20001b40 	.word	0x20001b40

0800763c <__malloc_unlock>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__malloc_unlock+0x8>)
 800763e:	f7ff bf82 	b.w	8007546 <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	20001b40 	.word	0x20001b40

08007648 <_raise_r>:
 8007648:	291f      	cmp	r1, #31
 800764a:	b538      	push	{r3, r4, r5, lr}
 800764c:	4604      	mov	r4, r0
 800764e:	460d      	mov	r5, r1
 8007650:	d904      	bls.n	800765c <_raise_r+0x14>
 8007652:	2316      	movs	r3, #22
 8007654:	6003      	str	r3, [r0, #0]
 8007656:	f04f 30ff 	mov.w	r0, #4294967295
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800765e:	b112      	cbz	r2, 8007666 <_raise_r+0x1e>
 8007660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007664:	b94b      	cbnz	r3, 800767a <_raise_r+0x32>
 8007666:	4620      	mov	r0, r4
 8007668:	f000 f830 	bl	80076cc <_getpid_r>
 800766c:	462a      	mov	r2, r5
 800766e:	4601      	mov	r1, r0
 8007670:	4620      	mov	r0, r4
 8007672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007676:	f000 b817 	b.w	80076a8 <_kill_r>
 800767a:	2b01      	cmp	r3, #1
 800767c:	d00a      	beq.n	8007694 <_raise_r+0x4c>
 800767e:	1c59      	adds	r1, r3, #1
 8007680:	d103      	bne.n	800768a <_raise_r+0x42>
 8007682:	2316      	movs	r3, #22
 8007684:	6003      	str	r3, [r0, #0]
 8007686:	2001      	movs	r0, #1
 8007688:	e7e7      	b.n	800765a <_raise_r+0x12>
 800768a:	2400      	movs	r4, #0
 800768c:	4628      	mov	r0, r5
 800768e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007692:	4798      	blx	r3
 8007694:	2000      	movs	r0, #0
 8007696:	e7e0      	b.n	800765a <_raise_r+0x12>

08007698 <raise>:
 8007698:	4b02      	ldr	r3, [pc, #8]	; (80076a4 <raise+0xc>)
 800769a:	4601      	mov	r1, r0
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	f7ff bfd3 	b.w	8007648 <_raise_r>
 80076a2:	bf00      	nop
 80076a4:	20000014 	.word	0x20000014

080076a8 <_kill_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	2300      	movs	r3, #0
 80076ac:	4d06      	ldr	r5, [pc, #24]	; (80076c8 <_kill_r+0x20>)
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	4611      	mov	r1, r2
 80076b4:	602b      	str	r3, [r5, #0]
 80076b6:	f7f9 fffa 	bl	80016ae <_kill>
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	d102      	bne.n	80076c4 <_kill_r+0x1c>
 80076be:	682b      	ldr	r3, [r5, #0]
 80076c0:	b103      	cbz	r3, 80076c4 <_kill_r+0x1c>
 80076c2:	6023      	str	r3, [r4, #0]
 80076c4:	bd38      	pop	{r3, r4, r5, pc}
 80076c6:	bf00      	nop
 80076c8:	20001b44 	.word	0x20001b44

080076cc <_getpid_r>:
 80076cc:	f7f9 bfe8 	b.w	80016a0 <_getpid>

080076d0 <__sread>:
 80076d0:	b510      	push	{r4, lr}
 80076d2:	460c      	mov	r4, r1
 80076d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d8:	f000 f894 	bl	8007804 <_read_r>
 80076dc:	2800      	cmp	r0, #0
 80076de:	bfab      	itete	ge
 80076e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076e2:	89a3      	ldrhlt	r3, [r4, #12]
 80076e4:	181b      	addge	r3, r3, r0
 80076e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076ea:	bfac      	ite	ge
 80076ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80076ee:	81a3      	strhlt	r3, [r4, #12]
 80076f0:	bd10      	pop	{r4, pc}

080076f2 <__swrite>:
 80076f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f6:	461f      	mov	r7, r3
 80076f8:	898b      	ldrh	r3, [r1, #12]
 80076fa:	4605      	mov	r5, r0
 80076fc:	05db      	lsls	r3, r3, #23
 80076fe:	460c      	mov	r4, r1
 8007700:	4616      	mov	r6, r2
 8007702:	d505      	bpl.n	8007710 <__swrite+0x1e>
 8007704:	2302      	movs	r3, #2
 8007706:	2200      	movs	r2, #0
 8007708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770c:	f000 f868 	bl	80077e0 <_lseek_r>
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	4632      	mov	r2, r6
 8007714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007718:	81a3      	strh	r3, [r4, #12]
 800771a:	4628      	mov	r0, r5
 800771c:	463b      	mov	r3, r7
 800771e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007726:	f000 b817 	b.w	8007758 <_write_r>

0800772a <__sseek>:
 800772a:	b510      	push	{r4, lr}
 800772c:	460c      	mov	r4, r1
 800772e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007732:	f000 f855 	bl	80077e0 <_lseek_r>
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	bf15      	itete	ne
 800773c:	6560      	strne	r0, [r4, #84]	; 0x54
 800773e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007746:	81a3      	strheq	r3, [r4, #12]
 8007748:	bf18      	it	ne
 800774a:	81a3      	strhne	r3, [r4, #12]
 800774c:	bd10      	pop	{r4, pc}

0800774e <__sclose>:
 800774e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007752:	f000 b813 	b.w	800777c <_close_r>
	...

08007758 <_write_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	2200      	movs	r2, #0
 8007762:	4d05      	ldr	r5, [pc, #20]	; (8007778 <_write_r+0x20>)
 8007764:	602a      	str	r2, [r5, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	f7f9 ffd8 	bl	800171c <_write>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	d102      	bne.n	8007776 <_write_r+0x1e>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b103      	cbz	r3, 8007776 <_write_r+0x1e>
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	20001b44 	.word	0x20001b44

0800777c <_close_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	2300      	movs	r3, #0
 8007780:	4d05      	ldr	r5, [pc, #20]	; (8007798 <_close_r+0x1c>)
 8007782:	4604      	mov	r4, r0
 8007784:	4608      	mov	r0, r1
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	f7f9 ffe4 	bl	8001754 <_close>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_close_r+0x1a>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	b103      	cbz	r3, 8007796 <_close_r+0x1a>
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	20001b44 	.word	0x20001b44

0800779c <_fstat_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	2300      	movs	r3, #0
 80077a0:	4d06      	ldr	r5, [pc, #24]	; (80077bc <_fstat_r+0x20>)
 80077a2:	4604      	mov	r4, r0
 80077a4:	4608      	mov	r0, r1
 80077a6:	4611      	mov	r1, r2
 80077a8:	602b      	str	r3, [r5, #0]
 80077aa:	f7f9 ffde 	bl	800176a <_fstat>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	d102      	bne.n	80077b8 <_fstat_r+0x1c>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	b103      	cbz	r3, 80077b8 <_fstat_r+0x1c>
 80077b6:	6023      	str	r3, [r4, #0]
 80077b8:	bd38      	pop	{r3, r4, r5, pc}
 80077ba:	bf00      	nop
 80077bc:	20001b44 	.word	0x20001b44

080077c0 <_isatty_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	2300      	movs	r3, #0
 80077c4:	4d05      	ldr	r5, [pc, #20]	; (80077dc <_isatty_r+0x1c>)
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	602b      	str	r3, [r5, #0]
 80077cc:	f7f9 ffdc 	bl	8001788 <_isatty>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_isatty_r+0x1a>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_isatty_r+0x1a>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	20001b44 	.word	0x20001b44

080077e0 <_lseek_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	4611      	mov	r1, r2
 80077e8:	2200      	movs	r2, #0
 80077ea:	4d05      	ldr	r5, [pc, #20]	; (8007800 <_lseek_r+0x20>)
 80077ec:	602a      	str	r2, [r5, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	f7f9 ffd4 	bl	800179c <_lseek>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d102      	bne.n	80077fe <_lseek_r+0x1e>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	b103      	cbz	r3, 80077fe <_lseek_r+0x1e>
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	20001b44 	.word	0x20001b44

08007804 <_read_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	4611      	mov	r1, r2
 800780c:	2200      	movs	r2, #0
 800780e:	4d05      	ldr	r5, [pc, #20]	; (8007824 <_read_r+0x20>)
 8007810:	602a      	str	r2, [r5, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	f7f9 ff65 	bl	80016e2 <_read>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_read_r+0x1e>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_read_r+0x1e>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20001b44 	.word	0x20001b44

08007828 <_init>:
 8007828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782a:	bf00      	nop
 800782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782e:	bc08      	pop	{r3}
 8007830:	469e      	mov	lr, r3
 8007832:	4770      	bx	lr

08007834 <_fini>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	bf00      	nop
 8007838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783a:	bc08      	pop	{r3}
 800783c:	469e      	mov	lr, r3
 800783e:	4770      	bx	lr

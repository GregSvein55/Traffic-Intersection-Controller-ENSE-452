
452Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  080073d0  080073d0  000173d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b14  08007b14  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b1c  08007b1c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b20  08007b20  00017b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001e0  08007d00  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08007d00  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b95e  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f32  00000000  00000000  0002bb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0002da98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0002e7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187ea  00000000  00000000  0002f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d683  00000000  00000000  00047bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc05  00000000  00000000  0005526d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0e72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  000e0ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080073b8 	.word	0x080073b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080073b8 	.word	0x080073b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b976 	b.w	8000d8c <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14d      	bne.n	8000b64 <__udivmoddi4+0xac>
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	4694      	mov	ip, r2
 8000acc:	d968      	bls.n	8000ba0 <__udivmoddi4+0xe8>
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	b152      	cbz	r2, 8000aea <__udivmoddi4+0x32>
 8000ad4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad8:	f1c2 0120 	rsb	r1, r2, #32
 8000adc:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	ea41 0803 	orr.w	r8, r1, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000aee:	fbb8 f7f1 	udiv	r7, r8, r1
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	fb01 8817 	mls	r8, r1, r7, r8
 8000afa:	fb07 f00e 	mul.w	r0, r7, lr
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b04:	4298      	cmp	r0, r3
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000b10:	f080 811e 	bcs.w	8000d50 <__udivmoddi4+0x298>
 8000b14:	4298      	cmp	r0, r3
 8000b16:	f240 811b 	bls.w	8000d50 <__udivmoddi4+0x298>
 8000b1a:	3f02      	subs	r7, #2
 8000b1c:	4463      	add	r3, ip
 8000b1e:	1a1b      	subs	r3, r3, r0
 8000b20:	fbb3 f0f1 	udiv	r0, r3, r1
 8000b24:	fb01 3310 	mls	r3, r1, r0, r3
 8000b28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	f080 8109 	bcs.w	8000d54 <__udivmoddi4+0x29c>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f240 8106 	bls.w	8000d54 <__udivmoddi4+0x29c>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	eba4 040e 	sub.w	r4, r4, lr
 8000b52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b56:	b11e      	cbz	r6, 8000b60 <__udivmoddi4+0xa8>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	40d4      	lsrs	r4, r2
 8000b5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b64:	428b      	cmp	r3, r1
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0xc2>
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	f000 80ee 	beq.w	8000d4a <__udivmoddi4+0x292>
 8000b6e:	2100      	movs	r1, #0
 8000b70:	e9c6 0500 	strd	r0, r5, [r6]
 8000b74:	4608      	mov	r0, r1
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d14a      	bne.n	8000c18 <__udivmoddi4+0x160>
 8000b82:	42ab      	cmp	r3, r5
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd4>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fc 	bhi.w	8000d84 <__udivmoddi4+0x2cc>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb65 0303 	sbc.w	r3, r5, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e2      	beq.n	8000b60 <__udivmoddi4+0xa8>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7df      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xec>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 8091 	bne.w	8000cd0 <__udivmoddi4+0x218>
 8000bae:	eba1 000c 	sub.w	r0, r1, ip
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb8:	fa1f fe8c 	uxth.w	lr, ip
 8000bbc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000bc0:	fb07 0013 	mls	r0, r7, r3, r0
 8000bc4:	0c25      	lsrs	r5, r4, #16
 8000bc6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bca:	fb0e f003 	mul.w	r0, lr, r3
 8000bce:	42a8      	cmp	r0, r5
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x12c>
 8000bd2:	eb1c 0505 	adds.w	r5, ip, r5
 8000bd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x12a>
 8000bdc:	42a8      	cmp	r0, r5
 8000bde:	f200 80ce 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000be2:	4643      	mov	r3, r8
 8000be4:	1a2d      	subs	r5, r5, r0
 8000be6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000bea:	fb07 5510 	mls	r5, r7, r0, r5
 8000bee:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x156>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c04:	d202      	bcs.n	8000c0c <__udivmoddi4+0x154>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	f200 80b6 	bhi.w	8000d78 <__udivmoddi4+0x2c0>
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	eba4 040e 	sub.w	r4, r4, lr
 8000c12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c16:	e79e      	b.n	8000b56 <__udivmoddi4+0x9e>
 8000c18:	f1c1 0720 	rsb	r7, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c26:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2e:	fbba f8f9 	udiv	r8, sl, r9
 8000c32:	fa20 f307 	lsr.w	r3, r0, r7
 8000c36:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c3a:	408d      	lsls	r5, r1
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	431d      	orrs	r5, r3
 8000c42:	fa00 f301 	lsl.w	r3, r0, r1
 8000c46:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4a:	0c2c      	lsrs	r4, r5, #16
 8000c4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c50:	42a0      	cmp	r0, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d90b      	bls.n	8000c70 <__udivmoddi4+0x1b8>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c60:	f080 8088 	bcs.w	8000d74 <__udivmoddi4+0x2bc>
 8000c64:	42a0      	cmp	r0, r4
 8000c66:	f240 8085 	bls.w	8000d74 <__udivmoddi4+0x2bc>
 8000c6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6e:	4464      	add	r4, ip
 8000c70:	1a24      	subs	r4, r4, r0
 8000c72:	fbb4 f0f9 	udiv	r0, r4, r9
 8000c76:	fb09 4410 	mls	r4, r9, r0, r4
 8000c7a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x1e2>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c90:	d26c      	bcs.n	8000d6c <__udivmoddi4+0x2b4>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	d96a      	bls.n	8000d6c <__udivmoddi4+0x2b4>
 8000c96:	3802      	subs	r0, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9e:	fba0 9502 	umull	r9, r5, r0, r2
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	42ac      	cmp	r4, r5
 8000ca8:	46c8      	mov	r8, r9
 8000caa:	46ae      	mov	lr, r5
 8000cac:	d356      	bcc.n	8000d5c <__udivmoddi4+0x2a4>
 8000cae:	d053      	beq.n	8000d58 <__udivmoddi4+0x2a0>
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d069      	beq.n	8000d88 <__udivmoddi4+0x2d0>
 8000cb4:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb8:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbc:	fa22 f301 	lsr.w	r3, r2, r1
 8000cc0:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc4:	431f      	orrs	r7, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e747      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	f1c2 0120 	rsb	r1, r2, #32
 8000cd8:	fa25 f301 	lsr.w	r3, r5, r1
 8000cdc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce0:	fa20 f101 	lsr.w	r1, r0, r1
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	430d      	orrs	r5, r1
 8000ce8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000cec:	fb07 3311 	mls	r3, r7, r1, r3
 8000cf0:	fa1f fe8c 	uxth.w	lr, ip
 8000cf4:	0c28      	lsrs	r0, r5, #16
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	fb01 f30e 	mul.w	r3, r1, lr
 8000cfe:	4283      	cmp	r3, r0
 8000d00:	fa04 f402 	lsl.w	r4, r4, r2
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x260>
 8000d06:	eb1c 0000 	adds.w	r0, ip, r0
 8000d0a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d0e:	d22f      	bcs.n	8000d70 <__udivmoddi4+0x2b8>
 8000d10:	4283      	cmp	r3, r0
 8000d12:	d92d      	bls.n	8000d70 <__udivmoddi4+0x2b8>
 8000d14:	3902      	subs	r1, #2
 8000d16:	4460      	add	r0, ip
 8000d18:	1ac0      	subs	r0, r0, r3
 8000d1a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d1e:	fb07 0013 	mls	r0, r7, r3, r0
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d28:	fb03 f00e 	mul.w	r0, r3, lr
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x28a>
 8000d30:	eb1c 0505 	adds.w	r5, ip, r5
 8000d34:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d38:	d216      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	d914      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	4465      	add	r5, ip
 8000d42:	1a28      	subs	r0, r5, r0
 8000d44:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d48:	e738      	b.n	8000bbc <__udivmoddi4+0x104>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e707      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000d50:	462f      	mov	r7, r5
 8000d52:	e6e4      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d54:	4618      	mov	r0, r3
 8000d56:	e6f9      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d58:	454b      	cmp	r3, r9
 8000d5a:	d2a9      	bcs.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d64:	3801      	subs	r0, #1
 8000d66:	e7a3      	b.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	e7ea      	b.n	8000d42 <__udivmoddi4+0x28a>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	e794      	b.n	8000c9a <__udivmoddi4+0x1e2>
 8000d70:	4641      	mov	r1, r8
 8000d72:	e7d1      	b.n	8000d18 <__udivmoddi4+0x260>
 8000d74:	46d0      	mov	r8, sl
 8000d76:	e77b      	b.n	8000c70 <__udivmoddi4+0x1b8>
 8000d78:	4464      	add	r4, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	e747      	b.n	8000c0e <__udivmoddi4+0x156>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4465      	add	r5, ip
 8000d82:	e72f      	b.n	8000be4 <__udivmoddi4+0x12c>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e706      	b.n	8000b96 <__udivmoddi4+0xde>
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e6e9      	b.n	8000b60 <__udivmoddi4+0xa8>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <resetBuff>:
/* USER CODE BEGIN 0 */
/*
 * Purpose: resets the buffer for RX and TX
 */
void resetBuff()//resets tx and rx buffer
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  for (int i = 0; i < 50; ++i) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	e00c      	b.n	8000db6 <resetBuff+0x26>
	  cliBufferTX[i] = 0;
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <resetBuff+0x38>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
	  cliBufferRX[i] = 0;
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <resetBuff+0x3c>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 50; ++i) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3301      	adds	r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b31      	cmp	r3, #49	; 0x31
 8000dba:	ddef      	ble.n	8000d9c <resetBuff+0xc>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	200001fc 	.word	0x200001fc
 8000dcc:	20000230 	.word	0x20000230

08000dd0 <resetInput>:


void resetInput()//resets input buffer
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
  for (int i = 0; i < 50; ++i) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	e007      	b.n	8000dec <resetInput+0x1c>
	  inputTXBuffer[i] = 0;
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <resetInput+0x30>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 50; ++i) {
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3301      	adds	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b31      	cmp	r3, #49	; 0x31
 8000df0:	ddf4      	ble.n	8000ddc <resetInput+0xc>
  }
}
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000264 	.word	0x20000264

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b5b0      	push	{r4, r5, r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f001 fb23 	bl	8002454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 fa73 	bl	80012f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e12:	f000 fb6d 	bl	80014f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e16:	f000 fb17 	bl	8001448 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e1a:	f000 fb3f 	bl	800149c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000e1e:	f000 faad 	bl	800137c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, "\x1b[0J", 5, 1000); //clearing screen
 8000e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e26:	2205      	movs	r2, #5
 8000e28:	49a3      	ldr	r1, [pc, #652]	; (80010b8 <main+0x2b4>)
 8000e2a:	48a4      	ldr	r0, [pc, #656]	; (80010bc <main+0x2b8>)
 8000e2c:	f002 fe47 	bl	8003abe <HAL_UART_Transmit>

  strcpy((char *) inputTXBuffer, " ENSE 452 Lab 4: Timing Tests\r\n\r\n");
 8000e30:	4aa3      	ldr	r2, [pc, #652]	; (80010c0 <main+0x2bc>)
 8000e32:	4ba4      	ldr	r3, [pc, #656]	; (80010c4 <main+0x2c0>)
 8000e34:	4614      	mov	r4, r2
 8000e36:	461d      	mov	r5, r3
 8000e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e40:	682b      	ldr	r3, [r5, #0]
 8000e42:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, inputTXBuffer, strlen((char *) inputTXBuffer), 1000);
 8000e44:	489e      	ldr	r0, [pc, #632]	; (80010c0 <main+0x2bc>)
 8000e46:	f7ff f983 	bl	8000150 <strlen>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	499b      	ldr	r1, [pc, #620]	; (80010c0 <main+0x2bc>)
 8000e54:	4899      	ldr	r0, [pc, #612]	; (80010bc <main+0x2b8>)
 8000e56:	f002 fe32 	bl	8003abe <HAL_UART_Transmit>


  uint8_t commands = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	77fb      	strb	r3, [r7, #31]
  int x = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]


  //making scrollable cmd window
  HAL_UART_Transmit(&huart2, "\x1b[8;r", 5, 1000);
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	2205      	movs	r2, #5
 8000e68:	4997      	ldr	r1, [pc, #604]	; (80010c8 <main+0x2c4>)
 8000e6a:	4894      	ldr	r0, [pc, #592]	; (80010bc <main+0x2b8>)
 8000e6c:	f002 fe27 	bl	8003abe <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, "\x1b[8;0H", 6, 1000);
 8000e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e74:	2206      	movs	r2, #6
 8000e76:	4995      	ldr	r1, [pc, #596]	; (80010cc <main+0x2c8>)
 8000e78:	4890      	ldr	r0, [pc, #576]	; (80010bc <main+0x2b8>)
 8000e7a:	f002 fe20 	bl	8003abe <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, "\x1b[1K", 4, 1000);
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	2204      	movs	r2, #4
 8000e84:	4992      	ldr	r1, [pc, #584]	; (80010d0 <main+0x2cc>)
 8000e86:	488d      	ldr	r0, [pc, #564]	; (80010bc <main+0x2b8>)
 8000e88:	f002 fe19 	bl	8003abe <HAL_UART_Transmit>


  HAL_UART_Receive(&huart2, cliBufferRX, 1, 300);
 8000e8c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000e90:	2201      	movs	r2, #1
 8000e92:	4990      	ldr	r1, [pc, #576]	; (80010d4 <main+0x2d0>)
 8000e94:	4889      	ldr	r0, [pc, #548]	; (80010bc <main+0x2b8>)
 8000e96:	f002 fea4 	bl	8003be2 <HAL_UART_Receive>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  resetInput();
 8000e9a:	f7ff ff99 	bl	8000dd0 <resetInput>
  resetBuff();
 8000e9e:	f7ff ff77 	bl	8000d90 <resetBuff>

  while (1)
  {
    /* USER CODE END WHILE */
	  //adding and updating info at top
	  	  HAL_UART_Transmit(&huart2, "\x1b[s", 3, 1000);
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	498b      	ldr	r1, [pc, #556]	; (80010d8 <main+0x2d4>)
 8000eaa:	4884      	ldr	r0, [pc, #528]	; (80010bc <main+0x2b8>)
 8000eac:	f002 fe07 	bl	8003abe <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, "\x1b[3;0f", 7, 1000);
 8000eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	4989      	ldr	r1, [pc, #548]	; (80010dc <main+0x2d8>)
 8000eb8:	4880      	ldr	r0, [pc, #512]	; (80010bc <main+0x2b8>)
 8000eba:	f002 fe00 	bl	8003abe <HAL_UART_Transmit>
	  	  resetInput();
 8000ebe:	f7ff ff87 	bl	8000dd0 <resetInput>
	  	  strcpy((char *) inputTXBuffer, "Number of commands: ");
 8000ec2:	4a7f      	ldr	r2, [pc, #508]	; (80010c0 <main+0x2bc>)
 8000ec4:	4b86      	ldr	r3, [pc, #536]	; (80010e0 <main+0x2dc>)
 8000ec6:	4614      	mov	r4, r2
 8000ec8:	461d      	mov	r5, r3
 8000eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ece:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ed2:	6020      	str	r0, [r4, #0]
 8000ed4:	3404      	adds	r4, #4
 8000ed6:	7021      	strb	r1, [r4, #0]
	  	  HAL_UART_Transmit(&huart2, inputTXBuffer, strlen((char *) inputTXBuffer), 1000);
 8000ed8:	4879      	ldr	r0, [pc, #484]	; (80010c0 <main+0x2bc>)
 8000eda:	f7ff f939 	bl	8000150 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	4976      	ldr	r1, [pc, #472]	; (80010c0 <main+0x2bc>)
 8000ee8:	4874      	ldr	r0, [pc, #464]	; (80010bc <main+0x2b8>)
 8000eea:	f002 fde8 	bl	8003abe <HAL_UART_Transmit>
	  	  sprintf(input, "%d", commands);
 8000eee:	7ffa      	ldrb	r2, [r7, #31]
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	497c      	ldr	r1, [pc, #496]	; (80010e4 <main+0x2e0>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 ffed 	bl	8004ed4 <siprintf>
	  	  HAL_UART_Transmit(&huart2, input, strlen((char *) input), 1000);
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f927 	bl	8000150 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	1d39      	adds	r1, r7, #4
 8000f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0c:	486b      	ldr	r0, [pc, #428]	; (80010bc <main+0x2b8>)
 8000f0e:	f002 fdd6 	bl	8003abe <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, "\x1b[u", 3, 1000);
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	2203      	movs	r2, #3
 8000f18:	4973      	ldr	r1, [pc, #460]	; (80010e8 <main+0x2e4>)
 8000f1a:	4868      	ldr	r0, [pc, #416]	; (80010bc <main+0x2b8>)
 8000f1c:	f002 fdcf 	bl	8003abe <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8000f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f24:	f001 faf8 	bl	8002518 <HAL_Delay>
	  	  commands += 1;
 8000f28:	7ffb      	ldrb	r3, [r7, #31]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	77fb      	strb	r3, [r7, #31]


	  	  //tasks from Lab 2, takes user inputs and completes the commands

	  	  x = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]

	  		  strcpy((char *)cliBufferTX, "\nEnter a command for the LED:\r\n");
 8000f32:	4a6e      	ldr	r2, [pc, #440]	; (80010ec <main+0x2e8>)
 8000f34:	4b6e      	ldr	r3, [pc, #440]	; (80010f0 <main+0x2ec>)
 8000f36:	4614      	mov	r4, r2
 8000f38:	461d      	mov	r5, r3
 8000f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8000f46:	4869      	ldr	r0, [pc, #420]	; (80010ec <main+0x2e8>)
 8000f48:	f7ff f902 	bl	8000150 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	4965      	ldr	r1, [pc, #404]	; (80010ec <main+0x2e8>)
 8000f56:	4859      	ldr	r0, [pc, #356]	; (80010bc <main+0x2b8>)
 8000f58:	f002 fdb1 	bl	8003abe <HAL_UART_Transmit>

	  		  while(cliBufferTX[0] != '\r')
 8000f5c:	e037      	b.n	8000fce <main+0x1ca>
	  		  {
	  			  if(HAL_UART_Receive(&huart2, cliBufferRX, 1, 300) == HAL_OK)
 8000f5e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f62:	2201      	movs	r2, #1
 8000f64:	495b      	ldr	r1, [pc, #364]	; (80010d4 <main+0x2d0>)
 8000f66:	4855      	ldr	r0, [pc, #340]	; (80010bc <main+0x2b8>)
 8000f68:	f002 fe3b 	bl	8003be2 <HAL_UART_Receive>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d12d      	bne.n	8000fce <main+0x1ca>
	  			  {
	  				  if(cliBufferRX[0] == '\b')
 8000f72:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <main+0x2d0>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d114      	bne.n	8000fa4 <main+0x1a0>
	  				  {
	  					  cliBufferTX[0] = cliBufferRX[0];
 8000f7a:	4b56      	ldr	r3, [pc, #344]	; (80010d4 <main+0x2d0>)
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	4b5b      	ldr	r3, [pc, #364]	; (80010ec <main+0x2e8>)
 8000f80:	701a      	strb	r2, [r3, #0]
	  					  cliBufferTX[1] = ' ';
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <main+0x2e8>)
 8000f84:	2220      	movs	r2, #32
 8000f86:	705a      	strb	r2, [r3, #1]
	  					  cliBufferTX[2] = '\b';
 8000f88:	4b58      	ldr	r3, [pc, #352]	; (80010ec <main+0x2e8>)
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	709a      	strb	r2, [r3, #2]
	  					  HAL_UART_Transmit(&huart2, cliBufferTX, 3, 1000);
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	2203      	movs	r2, #3
 8000f94:	4955      	ldr	r1, [pc, #340]	; (80010ec <main+0x2e8>)
 8000f96:	4849      	ldr	r0, [pc, #292]	; (80010bc <main+0x2b8>)
 8000f98:	f002 fd91 	bl	8003abe <HAL_UART_Transmit>
	  					  x--;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	e014      	b.n	8000fce <main+0x1ca>
	  				  }
	  				  else
	  				  {
	  					  cliBufferTX[0] = cliBufferRX[0];
 8000fa4:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <main+0x2d0>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b50      	ldr	r3, [pc, #320]	; (80010ec <main+0x2e8>)
 8000faa:	701a      	strb	r2, [r3, #0]
	  					  input[x] = cliBufferRX[0];
 8000fac:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <main+0x2d0>)
 8000fae:	7819      	ldrb	r1, [r3, #0]
 8000fb0:	1d3a      	adds	r2, r7, #4
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
	  					  HAL_UART_Transmit(&huart2, cliBufferTX, 1, 1000);
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	494a      	ldr	r1, [pc, #296]	; (80010ec <main+0x2e8>)
 8000fc2:	483e      	ldr	r0, [pc, #248]	; (80010bc <main+0x2b8>)
 8000fc4:	f002 fd7b 	bl	8003abe <HAL_UART_Transmit>
	  					  x++;
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
	  		  while(cliBufferTX[0] != '\r')
 8000fce:	4b47      	ldr	r3, [pc, #284]	; (80010ec <main+0x2e8>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b0d      	cmp	r3, #13
 8000fd4:	d1c3      	bne.n	8000f5e <main+0x15a>
	  				  }
	  			  }
	  		  }

	  		  if(input[0] == 'h' && input[1] == 'e' && input[2] == 'l' && input[3] == 'p' && input[4] == '\r')
 8000fd6:	793b      	ldrb	r3, [r7, #4]
 8000fd8:	2b68      	cmp	r3, #104	; 0x68
 8000fda:	f040 8093 	bne.w	8001104 <main+0x300>
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	2b65      	cmp	r3, #101	; 0x65
 8000fe2:	f040 808f 	bne.w	8001104 <main+0x300>
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	2b6c      	cmp	r3, #108	; 0x6c
 8000fea:	f040 808b 	bne.w	8001104 <main+0x300>
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b70      	cmp	r3, #112	; 0x70
 8000ff2:	f040 8087 	bne.w	8001104 <main+0x300>
 8000ff6:	7a3b      	ldrb	r3, [r7, #8]
 8000ff8:	2b0d      	cmp	r3, #13
 8000ffa:	f040 8083 	bne.w	8001104 <main+0x300>
	  		  {
	  			  strcpy((char *)cliBufferTX, "\non -> turns the green LED on\r\n");
 8000ffe:	4a3b      	ldr	r2, [pc, #236]	; (80010ec <main+0x2e8>)
 8001000:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <main+0x2f0>)
 8001002:	4614      	mov	r4, r2
 8001004:	461d      	mov	r5, r3
 8001006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800100e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001012:	4836      	ldr	r0, [pc, #216]	; (80010ec <main+0x2e8>)
 8001014:	f7ff f89c 	bl	8000150 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001020:	4932      	ldr	r1, [pc, #200]	; (80010ec <main+0x2e8>)
 8001022:	4826      	ldr	r0, [pc, #152]	; (80010bc <main+0x2b8>)
 8001024:	f002 fd4b 	bl	8003abe <HAL_UART_Transmit>
	  			  strcpy((char *)cliBufferTX, "\noff -> turns the green LED off\r\n");
 8001028:	4a30      	ldr	r2, [pc, #192]	; (80010ec <main+0x2e8>)
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <main+0x2f4>)
 800102c:	4614      	mov	r4, r2
 800102e:	461d      	mov	r5, r3
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	8023      	strh	r3, [r4, #0]
	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 800103c:	482b      	ldr	r0, [pc, #172]	; (80010ec <main+0x2e8>)
 800103e:	f7ff f887 	bl	8000150 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	4928      	ldr	r1, [pc, #160]	; (80010ec <main+0x2e8>)
 800104c:	481b      	ldr	r0, [pc, #108]	; (80010bc <main+0x2b8>)
 800104e:	f002 fd36 	bl	8003abe <HAL_UART_Transmit>
	  			  strcpy((char *)cliBufferTX, "\nquery -> returns the state of the green LED\r\n");
 8001052:	4a26      	ldr	r2, [pc, #152]	; (80010ec <main+0x2e8>)
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <main+0x2f8>)
 8001056:	4614      	mov	r4, r2
 8001058:	461d      	mov	r5, r3
 800105a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001066:	c407      	stmia	r4!, {r0, r1, r2}
 8001068:	8023      	strh	r3, [r4, #0]
 800106a:	3402      	adds	r4, #2
 800106c:	0c1b      	lsrs	r3, r3, #16
 800106e:	7023      	strb	r3, [r4, #0]
	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001070:	481e      	ldr	r0, [pc, #120]	; (80010ec <main+0x2e8>)
 8001072:	f7ff f86d 	bl	8000150 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	491b      	ldr	r1, [pc, #108]	; (80010ec <main+0x2e8>)
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <main+0x2b8>)
 8001082:	f002 fd1c 	bl	8003abe <HAL_UART_Transmit>
	  			  strcpy((char *)cliBufferTX, "\ntest -> shows the Lab 4 time tests\r\n");
 8001086:	4a19      	ldr	r2, [pc, #100]	; (80010ec <main+0x2e8>)
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <main+0x2fc>)
 800108a:	4614      	mov	r4, r2
 800108c:	461d      	mov	r5, r3
 800108e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001096:	e895 0003 	ldmia.w	r5, {r0, r1}
 800109a:	6020      	str	r0, [r4, #0]
 800109c:	3404      	adds	r4, #4
 800109e:	8021      	strh	r1, [r4, #0]
	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80010a0:	4812      	ldr	r0, [pc, #72]	; (80010ec <main+0x2e8>)
 80010a2:	f7ff f855 	bl	8000150 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	490f      	ldr	r1, [pc, #60]	; (80010ec <main+0x2e8>)
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <main+0x2b8>)
 80010b2:	f002 fd04 	bl	8003abe <HAL_UART_Transmit>
 80010b6:	e109      	b.n	80012cc <main+0x4c8>
 80010b8:	080073d0 	.word	0x080073d0
 80010bc:	200002e4 	.word	0x200002e4
 80010c0:	20000264 	.word	0x20000264
 80010c4:	080073d8 	.word	0x080073d8
 80010c8:	080073fc 	.word	0x080073fc
 80010cc:	08007404 	.word	0x08007404
 80010d0:	0800740c 	.word	0x0800740c
 80010d4:	20000230 	.word	0x20000230
 80010d8:	08007414 	.word	0x08007414
 80010dc:	08007418 	.word	0x08007418
 80010e0:	08007420 	.word	0x08007420
 80010e4:	08007438 	.word	0x08007438
 80010e8:	0800743c 	.word	0x0800743c
 80010ec:	200001fc 	.word	0x200001fc
 80010f0:	08007440 	.word	0x08007440
 80010f4:	08007460 	.word	0x08007460
 80010f8:	08007480 	.word	0x08007480
 80010fc:	080074a4 	.word	0x080074a4
 8001100:	080074d4 	.word	0x080074d4

	  		  }
	  		  else if(input[0] == 'o' && input[1] == 'n' && input[2] == '\r')
 8001104:	793b      	ldrb	r3, [r7, #4]
 8001106:	2b6f      	cmp	r3, #111	; 0x6f
 8001108:	d12d      	bne.n	8001166 <main+0x362>
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	2b6e      	cmp	r3, #110	; 0x6e
 800110e:	d12a      	bne.n	8001166 <main+0x362>
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	2b0d      	cmp	r3, #13
 8001114:	d127      	bne.n	8001166 <main+0x362>
	  		  {
	  			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1)
 8001116:	2120      	movs	r1, #32
 8001118:	486d      	ldr	r0, [pc, #436]	; (80012d0 <main+0x4cc>)
 800111a:	f001 fd63 	bl	8002be4 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d10a      	bne.n	800113a <main+0x336>
	  			  {
	  				  strcpy((char *)cliBufferTX, "\nThe LED is already on!\r\n");
 8001124:	4a6b      	ldr	r2, [pc, #428]	; (80012d4 <main+0x4d0>)
 8001126:	4b6c      	ldr	r3, [pc, #432]	; (80012d8 <main+0x4d4>)
 8001128:	4614      	mov	r4, r2
 800112a:	461d      	mov	r5, r3
 800112c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001130:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001134:	c403      	stmia	r4!, {r0, r1}
 8001136:	8022      	strh	r2, [r4, #0]
 8001138:	e004      	b.n	8001144 <main+0x340>
	  			  }
	  			  else
	  			  {
	  				  strcpy((char *)cliBufferTX, "\nDone!\r\n");
 800113a:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <main+0x4d0>)
 800113c:	4a67      	ldr	r2, [pc, #412]	; (80012dc <main+0x4d8>)
 800113e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001140:	c303      	stmia	r3!, {r0, r1}
 8001142:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001144:	4863      	ldr	r0, [pc, #396]	; (80012d4 <main+0x4d0>)
 8001146:	f7ff f803 	bl	8000150 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	4960      	ldr	r1, [pc, #384]	; (80012d4 <main+0x4d0>)
 8001154:	4862      	ldr	r0, [pc, #392]	; (80012e0 <main+0x4dc>)
 8001156:	f002 fcb2 	bl	8003abe <HAL_UART_Transmit>
	  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2120      	movs	r1, #32
 800115e:	485c      	ldr	r0, [pc, #368]	; (80012d0 <main+0x4cc>)
 8001160:	f001 fd57 	bl	8002c12 <HAL_GPIO_WritePin>
 8001164:	e0b2      	b.n	80012cc <main+0x4c8>


	  		  }
	  		  else if(input[0] == 'o' && input[1] == 'f' && input[2] == 'f' && input[3] == '\r')
 8001166:	793b      	ldrb	r3, [r7, #4]
 8001168:	2b6f      	cmp	r3, #111	; 0x6f
 800116a:	d133      	bne.n	80011d4 <main+0x3d0>
 800116c:	797b      	ldrb	r3, [r7, #5]
 800116e:	2b66      	cmp	r3, #102	; 0x66
 8001170:	d130      	bne.n	80011d4 <main+0x3d0>
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b66      	cmp	r3, #102	; 0x66
 8001176:	d12d      	bne.n	80011d4 <main+0x3d0>
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b0d      	cmp	r3, #13
 800117c:	d12a      	bne.n	80011d4 <main+0x3d0>
	  		  {
	  			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1)
 800117e:	2120      	movs	r1, #32
 8001180:	4853      	ldr	r0, [pc, #332]	; (80012d0 <main+0x4cc>)
 8001182:	f001 fd2f 	bl	8002be4 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b01      	cmp	r3, #1
 800118a:	d105      	bne.n	8001198 <main+0x394>
	  			  {
	  				  strcpy((char *)cliBufferTX, "\nDone!\r\n");
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <main+0x4d0>)
 800118e:	4a53      	ldr	r2, [pc, #332]	; (80012dc <main+0x4d8>)
 8001190:	ca07      	ldmia	r2, {r0, r1, r2}
 8001192:	c303      	stmia	r3!, {r0, r1}
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e00c      	b.n	80011b2 <main+0x3ae>
	  			  }
	  			  else
	  			  {
	  				  strcpy((char *)cliBufferTX, "\nThe LED is already off!\r\n");
 8001198:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <main+0x4d0>)
 800119a:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <main+0x4e0>)
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a8:	c403      	stmia	r4!, {r0, r1}
 80011aa:	8022      	strh	r2, [r4, #0]
 80011ac:	3402      	adds	r4, #2
 80011ae:	0c13      	lsrs	r3, r2, #16
 80011b0:	7023      	strb	r3, [r4, #0]
	  			  }
	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80011b2:	4848      	ldr	r0, [pc, #288]	; (80012d4 <main+0x4d0>)
 80011b4:	f7fe ffcc 	bl	8000150 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c0:	4944      	ldr	r1, [pc, #272]	; (80012d4 <main+0x4d0>)
 80011c2:	4847      	ldr	r0, [pc, #284]	; (80012e0 <main+0x4dc>)
 80011c4:	f002 fc7b 	bl	8003abe <HAL_UART_Transmit>
	  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2120      	movs	r1, #32
 80011cc:	4840      	ldr	r0, [pc, #256]	; (80012d0 <main+0x4cc>)
 80011ce:	f001 fd20 	bl	8002c12 <HAL_GPIO_WritePin>
 80011d2:	e07b      	b.n	80012cc <main+0x4c8>
	  		  }
	  		  else if(input[0] == 'q' && input[1] == 'u' && input[2] == 'e' && input[3] == 'r' && input[4] == 'y' && input[5] == '\r')
 80011d4:	793b      	ldrb	r3, [r7, #4]
 80011d6:	2b71      	cmp	r3, #113	; 0x71
 80011d8:	d136      	bne.n	8001248 <main+0x444>
 80011da:	797b      	ldrb	r3, [r7, #5]
 80011dc:	2b75      	cmp	r3, #117	; 0x75
 80011de:	d133      	bne.n	8001248 <main+0x444>
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	2b65      	cmp	r3, #101	; 0x65
 80011e4:	d130      	bne.n	8001248 <main+0x444>
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b72      	cmp	r3, #114	; 0x72
 80011ea:	d12d      	bne.n	8001248 <main+0x444>
 80011ec:	7a3b      	ldrb	r3, [r7, #8]
 80011ee:	2b79      	cmp	r3, #121	; 0x79
 80011f0:	d12a      	bne.n	8001248 <main+0x444>
 80011f2:	7a7b      	ldrb	r3, [r7, #9]
 80011f4:	2b0d      	cmp	r3, #13
 80011f6:	d127      	bne.n	8001248 <main+0x444>
	  		  {
	  			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1)
 80011f8:	2120      	movs	r1, #32
 80011fa:	4835      	ldr	r0, [pc, #212]	; (80012d0 <main+0x4cc>)
 80011fc:	f001 fcf2 	bl	8002be4 <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <main+0x414>
	  			  {
	  				  strcpy((char *)cliBufferTX, "\nThe LED is on!\r\n");
 8001206:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <main+0x4d0>)
 8001208:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <main+0x4e4>)
 800120a:	4614      	mov	r4, r2
 800120c:	461d      	mov	r5, r3
 800120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001212:	682b      	ldr	r3, [r5, #0]
 8001214:	8023      	strh	r3, [r4, #0]
 8001216:	e00b      	b.n	8001230 <main+0x42c>
	  			  }
	  			  else
	  			  {
	  				  strcpy((char *)cliBufferTX, "\nThe LED is off!\r\n");
 8001218:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <main+0x4d0>)
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <main+0x4e8>)
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	8022      	strh	r2, [r4, #0]
 800122a:	3402      	adds	r4, #2
 800122c:	0c1b      	lsrs	r3, r3, #16
 800122e:	7023      	strb	r3, [r4, #0]
	  			  }
	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001230:	4828      	ldr	r0, [pc, #160]	; (80012d4 <main+0x4d0>)
 8001232:	f7fe ff8d 	bl	8000150 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	4925      	ldr	r1, [pc, #148]	; (80012d4 <main+0x4d0>)
 8001240:	4827      	ldr	r0, [pc, #156]	; (80012e0 <main+0x4dc>)
 8001242:	f002 fc3c 	bl	8003abe <HAL_UART_Transmit>
 8001246:	e041      	b.n	80012cc <main+0x4c8>
	  		  }
	  		  else if(input[0] == 't' && input[1] == 'e' && input[2] == 's' && input[3] == 't' && input[4] == '\r')
 8001248:	793b      	ldrb	r3, [r7, #4]
 800124a:	2b74      	cmp	r3, #116	; 0x74
 800124c:	d123      	bne.n	8001296 <main+0x492>
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	2b65      	cmp	r3, #101	; 0x65
 8001252:	d120      	bne.n	8001296 <main+0x492>
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b73      	cmp	r3, #115	; 0x73
 8001258:	d11d      	bne.n	8001296 <main+0x492>
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b74      	cmp	r3, #116	; 0x74
 800125e:	d11a      	bne.n	8001296 <main+0x492>
 8001260:	7a3b      	ldrb	r3, [r7, #8]
 8001262:	2b0d      	cmp	r3, #13
 8001264:	d117      	bne.n	8001296 <main+0x492>
	  		  {

	  			  strcpy((char *)cliBufferTX, "\nTesting Average Operation Times:\r\n");
 8001266:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <main+0x4d0>)
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <main+0x4ec>)
 800126a:	4614      	mov	r4, r2
 800126c:	461d      	mov	r5, r3
 800126e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	6023      	str	r3, [r4, #0]
	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 800127a:	4816      	ldr	r0, [pc, #88]	; (80012d4 <main+0x4d0>)
 800127c:	f7fe ff68 	bl	8000150 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	4912      	ldr	r1, [pc, #72]	; (80012d4 <main+0x4d0>)
 800128a:	4815      	ldr	r0, [pc, #84]	; (80012e0 <main+0x4dc>)
 800128c:	f002 fc17 	bl	8003abe <HAL_UART_Transmit>
	  			  runTests();
 8001290:	f000 faf6 	bl	8001880 <runTests>
 8001294:	e01a      	b.n	80012cc <main+0x4c8>

	  		  }
	  		  else if(input[0] == '\r')
 8001296:	793b      	ldrb	r3, [r7, #4]
 8001298:	2b0d      	cmp	r3, #13
 800129a:	d016      	beq.n	80012ca <main+0x4c6>
	  		  {
	  			  continue;
	  		  }
	  		  else
	  		  {
	  			  strcpy((char *)cliBufferTX, "\nError. Try again.\r\n");
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <main+0x4d0>)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <main+0x4f0>)
 80012a0:	4614      	mov	r4, r2
 80012a2:	461d      	mov	r5, r3
 80012a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012ac:	6020      	str	r0, [r4, #0]
 80012ae:	3404      	adds	r4, #4
 80012b0:	7021      	strb	r1, [r4, #0]
	  			  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <main+0x4d0>)
 80012b4:	f7fe ff4c 	bl	8000150 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c0:	4904      	ldr	r1, [pc, #16]	; (80012d4 <main+0x4d0>)
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <main+0x4dc>)
 80012c4:	f002 fbfb 	bl	8003abe <HAL_UART_Transmit>
 80012c8:	e5eb      	b.n	8000ea2 <main+0x9e>
	  			  continue;
 80012ca:	bf00      	nop
	  	  HAL_UART_Transmit(&huart2, "\x1b[s", 3, 1000);
 80012cc:	e5e9      	b.n	8000ea2 <main+0x9e>
 80012ce:	bf00      	nop
 80012d0:	40010800 	.word	0x40010800
 80012d4:	200001fc 	.word	0x200001fc
 80012d8:	080074fc 	.word	0x080074fc
 80012dc:	08007518 	.word	0x08007518
 80012e0:	200002e4 	.word	0x200002e4
 80012e4:	08007524 	.word	0x08007524
 80012e8:	08007540 	.word	0x08007540
 80012ec:	08007554 	.word	0x08007554
 80012f0:	08007568 	.word	0x08007568
 80012f4:	0800758c 	.word	0x0800758c

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b090      	sub	sp, #64	; 0x40
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	2228      	movs	r2, #40	; 0x28
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f003 f93e 	bl	8004588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131e:	2301      	movs	r3, #1
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001322:	2310      	movs	r3, #16
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800132a:	2300      	movs	r3, #0
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800132e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	4618      	mov	r0, r3
 800133a:	f001 fca5 	bl	8002c88 <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001344:	f000 fe5c 	bl	8002000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	230f      	movs	r3, #15
 800134a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2302      	movs	r3, #2
 800134e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2102      	movs	r1, #2
 8001362:	4618      	mov	r0, r3
 8001364:	f001 ff12 	bl	800318c <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800136e:	f000 fe47 	bl	8002000 <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	3740      	adds	r7, #64	; 0x40
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  __HAL_RCC_TIM4_CLK_ENABLE();//enabling the clock
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <MX_TIM4_Init+0xc0>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a27      	ldr	r2, [pc, #156]	; (800143c <MX_TIM4_Init+0xc0>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <MX_TIM4_Init+0xc0>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <MX_TIM4_Init+0xc4>)
 80013b4:	4a23      	ldr	r2, [pc, #140]	; (8001444 <MX_TIM4_Init+0xc8>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_TIM4_Init+0xc4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_TIM4_Init+0xc4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_TIM4_Init+0xc4>)
 80013c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_TIM4_Init+0xc4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_TIM4_Init+0xc4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <MX_TIM4_Init+0xc4>)
 80013da:	f002 f86f 	bl	80034bc <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80013e4:	f000 fe0c 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <MX_TIM4_Init+0xc4>)
 80013f6:	f002 f8fb 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001400:	f000 fdfe 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4619      	mov	r1, r3
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <MX_TIM4_Init+0xc4>)
 8001414:	f002 faa8 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 800141e:	f000 fdef 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  HAL_TIM_Base_MspInit(&htim4);//starting the clock
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <MX_TIM4_Init+0xc4>)
 8001424:	f000 fe24 	bl	8002070 <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Init(&htim4);
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_TIM4_Init+0xc4>)
 800142a:	f002 f847 	bl	80034bc <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim4);
 800142e:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_TIM4_Init+0xc4>)
 8001430:	f002 f894 	bl	800355c <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	2000029c 	.word	0x2000029c
 8001444:	40000800 	.word	0x40000800

08001448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <MX_USART2_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001480:	f002 fad0 	bl	8003a24 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 fdb9 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200002e4 	.word	0x200002e4
 8001498:	40004400 	.word	0x40004400

0800149c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_USART3_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART3_UART_Init+0x4c>)
 80014d4:	f002 faa6 	bl	8003a24 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 fd8f 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000328 	.word	0x20000328
 80014ec:	40004800 	.word	0x40004800

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <MX_GPIO_Init+0xcc>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a2c      	ldr	r2, [pc, #176]	; (80015bc <MX_GPIO_Init+0xcc>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <MX_GPIO_Init+0xcc>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <MX_GPIO_Init+0xcc>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a26      	ldr	r2, [pc, #152]	; (80015bc <MX_GPIO_Init+0xcc>)
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <MX_GPIO_Init+0xcc>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <MX_GPIO_Init+0xcc>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a20      	ldr	r2, [pc, #128]	; (80015bc <MX_GPIO_Init+0xcc>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_GPIO_Init+0xcc>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_GPIO_Init+0xcc>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <MX_GPIO_Init+0xcc>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_GPIO_Init+0xcc>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2120      	movs	r1, #32
 8001568:	4815      	ldr	r0, [pc, #84]	; (80015c0 <MX_GPIO_Init+0xd0>)
 800156a:	f001 fb52 	bl	8002c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800156e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_GPIO_Init+0xd4>)
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4619      	mov	r1, r3
 8001582:	4811      	ldr	r0, [pc, #68]	; (80015c8 <MX_GPIO_Init+0xd8>)
 8001584:	f001 f9aa 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001588:	2320      	movs	r3, #32
 800158a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	4808      	ldr	r0, [pc, #32]	; (80015c0 <MX_GPIO_Init+0xd0>)
 80015a0:	f001 f99c 	bl	80028dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2028      	movs	r0, #40	; 0x28
 80015aa:	f001 f8b0 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ae:	2028      	movs	r0, #40	; 0x28
 80015b0:	f001 f8c9 	bl	8002746 <HAL_NVIC_EnableIRQ>

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800
 80015c4:	10110000 	.word	0x10110000
 80015c8:	40011000 	.word	0x40011000

080015cc <rnd32>:
volatile double Copy128Bit = 0;
volatile double Copy1024Bit = 0;


uint32_t rnd32()
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
	uint32_t x;
	x = rand() & 0xff;
 80015d2:	f003 fc41 	bl	8004e58 <rand>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	607b      	str	r3, [r7, #4]
	x |= (rand() & 0xff) << 8;
 80015dc:	f003 fc3c 	bl	8004e58 <rand>
 80015e0:	4603      	mov	r3, r0
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	607b      	str	r3, [r7, #4]
	x |= (rand() & 0xff) << 16;
 80015f0:	f003 fc32 	bl	8004e58 <rand>
 80015f4:	4603      	mov	r3, r0
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4313      	orrs	r3, r2
 8001602:	607b      	str	r3, [r7, #4]
	x |= (rand() & 0xff) << 24;
 8001604:	f003 fc28 	bl	8004e58 <rand>
 8001608:	4603      	mov	r3, r0
 800160a:	061b      	lsls	r3, r3, #24
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4313      	orrs	r3, r2
 8001612:	607b      	str	r3, [r7, #4]

	return x;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <rnd64>:

uint64_t rnd64()
{
 8001620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001624:	b09e      	sub	sp, #120	; 0x78
 8001626:	af00      	add	r7, sp, #0


	uint64_t x64;
	x64 = rand() & 0xff;
 8001628:	f003 fc16 	bl	8004e58 <rand>
 800162c:	4603      	mov	r3, r0
 800162e:	17da      	asrs	r2, r3, #31
 8001630:	4698      	mov	r8, r3
 8001632:	4691      	mov	r9, r2
 8001634:	f008 04ff 	and.w	r4, r8, #255	; 0xff
 8001638:	2500      	movs	r5, #0
 800163a:	e9c7 451c 	strd	r4, r5, [r7, #112]	; 0x70
	x64 |= (rand() & 0xff) << 8;
 800163e:	f003 fc0b 	bl	8004e58 <rand>
 8001642:	4603      	mov	r3, r0
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800164a:	17da      	asrs	r2, r3, #31
 800164c:	469a      	mov	sl, r3
 800164e:	4693      	mov	fp, r2
 8001650:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001654:	ea42 010a 	orr.w	r1, r2, sl
 8001658:	6339      	str	r1, [r7, #48]	; 0x30
 800165a:	ea43 030b 	orr.w	r3, r3, fp
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
 8001660:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001664:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x64 |= (rand() & 0xff) << 16;
 8001668:	f003 fbf6 	bl	8004e58 <rand>
 800166c:	4603      	mov	r3, r0
 800166e:	041b      	lsls	r3, r3, #16
 8001670:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001674:	17da      	asrs	r2, r3, #31
 8001676:	66bb      	str	r3, [r7, #104]	; 0x68
 8001678:	66fa      	str	r2, [r7, #108]	; 0x6c
 800167a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800167e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001682:	4604      	mov	r4, r0
 8001684:	4314      	orrs	r4, r2
 8001686:	62bc      	str	r4, [r7, #40]	; 0x28
 8001688:	4319      	orrs	r1, r3
 800168a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800168c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001690:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x64 |= (rand() & 0xff) << 24;
 8001694:	f003 fbe0 	bl	8004e58 <rand>
 8001698:	4603      	mov	r3, r0
 800169a:	061b      	lsls	r3, r3, #24
 800169c:	17da      	asrs	r2, r3, #31
 800169e:	663b      	str	r3, [r7, #96]	; 0x60
 80016a0:	667a      	str	r2, [r7, #100]	; 0x64
 80016a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016aa:	4604      	mov	r4, r0
 80016ac:	4314      	orrs	r4, r2
 80016ae:	623c      	str	r4, [r7, #32]
 80016b0:	4319      	orrs	r1, r3
 80016b2:	6279      	str	r1, [r7, #36]	; 0x24
 80016b4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016b8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x64 |= (rand() & 0xff) << 32;
 80016bc:	f003 fbcc 	bl	8004e58 <rand>
 80016c0:	2300      	movs	r3, #0
 80016c2:	17da      	asrs	r2, r3, #31
 80016c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80016c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016c8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016cc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80016d0:	4604      	mov	r4, r0
 80016d2:	4314      	orrs	r4, r2
 80016d4:	61bc      	str	r4, [r7, #24]
 80016d6:	4319      	orrs	r1, r3
 80016d8:	61f9      	str	r1, [r7, #28]
 80016da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80016de:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x64 |= (rand() & 0xff) << 40;
 80016e2:	f003 fbb9 	bl	8004e58 <rand>
 80016e6:	2300      	movs	r3, #0
 80016e8:	17da      	asrs	r2, r3, #31
 80016ea:	653b      	str	r3, [r7, #80]	; 0x50
 80016ec:	657a      	str	r2, [r7, #84]	; 0x54
 80016ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016f6:	4604      	mov	r4, r0
 80016f8:	4314      	orrs	r4, r2
 80016fa:	613c      	str	r4, [r7, #16]
 80016fc:	4319      	orrs	r1, r3
 80016fe:	6179      	str	r1, [r7, #20]
 8001700:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001704:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x64 |= (rand() & 0xff) << 48;
 8001708:	f003 fba6 	bl	8004e58 <rand>
 800170c:	2300      	movs	r3, #0
 800170e:	17da      	asrs	r2, r3, #31
 8001710:	64bb      	str	r3, [r7, #72]	; 0x48
 8001712:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001714:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001718:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800171c:	4604      	mov	r4, r0
 800171e:	4314      	orrs	r4, r2
 8001720:	60bc      	str	r4, [r7, #8]
 8001722:	4319      	orrs	r1, r3
 8001724:	60f9      	str	r1, [r7, #12]
 8001726:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800172a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	x64 |= (rand() & 0xff) << 56;
 800172e:	f003 fb93 	bl	8004e58 <rand>
 8001732:	2300      	movs	r3, #0
 8001734:	17da      	asrs	r2, r3, #31
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
 8001738:	647a      	str	r2, [r7, #68]	; 0x44
 800173a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800173e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001742:	4604      	mov	r4, r0
 8001744:	4314      	orrs	r4, r2
 8001746:	603c      	str	r4, [r7, #0]
 8001748:	4319      	orrs	r1, r3
 800174a:	6079      	str	r1, [r7, #4]
 800174c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001750:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	return x;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <rnd64+0x150>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	17da      	asrs	r2, r3, #31
 800175a:	63bb      	str	r3, [r7, #56]	; 0x38
 800175c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800175e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38

}
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	3778      	adds	r7, #120	; 0x78
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800176e:	bf00      	nop
 8001770:	20000298 	.word	0x20000298

08001774 <add32>:

uint32_t add32(uint32_t a, uint32_t b)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	return a + b;
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4413      	add	r3, r2
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <add64>:

uint64_t add64(uint64_t a, uint64_t b)
{
 800178e:	b4b0      	push	{r4, r5, r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001798:	e9c7 2300 	strd	r2, r3, [r7]
	return a + b;
 800179c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017a4:	1884      	adds	r4, r0, r2
 80017a6:	eb41 0503 	adc.w	r5, r1, r3
 80017aa:	4622      	mov	r2, r4
 80017ac:	462b      	mov	r3, r5
}
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bcb0      	pop	{r4, r5, r7}
 80017b8:	4770      	bx	lr

080017ba <mult32>:

uint64_t mult32(uint32_t a, uint32_t b)
{
 80017ba:	b4b0      	push	{r4, r5, r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]
	return a * b;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	2200      	movs	r2, #0
 80017ce:	461c      	mov	r4, r3
 80017d0:	4615      	mov	r5, r2
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
}
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bcb0      	pop	{r4, r5, r7}
 80017e0:	4770      	bx	lr

080017e2 <mult64>:

uint64_t mult64(uint64_t a, uint64_t b)
{
 80017e2:	b4b0      	push	{r4, r5, r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017ec:	e9c7 2300 	strd	r2, r3, [r7]
	return a * b;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	fb03 f202 	mul.w	r2, r3, r2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	fba1 4502 	umull	r4, r5, r1, r2
 800180a:	442b      	add	r3, r5
 800180c:	461d      	mov	r5, r3
 800180e:	4622      	mov	r2, r4
 8001810:	462b      	mov	r3, r5
}
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bcb0      	pop	{r4, r5, r7}
 800181c:	4770      	bx	lr

0800181e <div32>:

uint32_t div32(uint32_t a, uint32_t b)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
	if(b == 0)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <div32+0x14>
	{
		return 0x00000000;
 800182e:	2300      	movs	r3, #0
 8001830:	e003      	b.n	800183a <div32+0x1c>
	}
	return a / b;
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <div64>:

uint64_t div64(uint64_t a, uint64_t b)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800184e:	e9c7 2300 	strd	r2, r3, [r7]
	if(b == 0)
 8001852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001856:	4313      	orrs	r3, r2
 8001858:	d104      	bne.n	8001864 <div64+0x20>
	{
		return 0x0000000000000000;
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e007      	b.n	8001874 <div64+0x30>
	}
    return a / b;
 8001864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001868:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800186c:	f7ff f90c 	bl	8000a88 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
}
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <runTests>:

void runTests()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	f6ad 1d88 	subw	sp, sp, #2440	; 0x988
 8001886:	af00      	add	r7, sp, #0

	volatile struct strc8 struct8, struct8copy;
	volatile struct strc128 struct128, struct128copy;
	volatile struct strc1024 struct1024, struct1024copy;

	for(int i = 0; i < 2; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 800188e:	e00d      	b.n	80018ac <runTests+0x2c>
	{
		struct8copy.dat[i] = 0;
 8001890:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	f603 1388 	addw	r3, r3, #2440	; 0x988
 800189a:	443b      	add	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	f843 2c4c 	str.w	r2, [r3, #-76]
	for(int i = 0; i < 2; i++)
 80018a2:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 80018a6:	3301      	adds	r3, #1
 80018a8:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 80018ac:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	dded      	ble.n	8001890 <runTests+0x10>
	}
	for(int i = 0; i < 32; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 80018ba:	e00d      	b.n	80018d8 <runTests+0x58>
	{
		struct128copy.dat[i] = 0;
 80018bc:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80018c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018c4:	f8d7 2980 	ldr.w	r2, [r7, #2432]	; 0x980
 80018c8:	2100      	movs	r1, #0
 80018ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < 32; i++)
 80018ce:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80018d2:	3301      	adds	r3, #1
 80018d4:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 80018d8:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80018dc:	2b1f      	cmp	r3, #31
 80018de:	dded      	ble.n	80018bc <runTests+0x3c>
	}
	for(int i = 0; i < 256; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 80018e6:	e00d      	b.n	8001904 <runTests+0x84>
	{
		struct1024copy.dat[i] = 0;
 80018e8:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80018ec:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 80018f0:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 80018f4:	2100      	movs	r1, #0
 80018f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < 256; i++)
 80018fa:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 80018fe:	3301      	adds	r3, #1
 8001900:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 8001904:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8001908:	2bff      	cmp	r3, #255	; 0xff
 800190a:	dded      	ble.n	80018e8 <runTests+0x68>
	}


	uint8_t outputTXBuffer[56];
	int count = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
	while (count < 100)
 8001912:	e193      	b.n	8001c3c <runTests+0x3bc>
	{
		r1 = rnd32();
 8001914:	f7ff fe5a 	bl	80015cc <rnd32>
 8001918:	f8c7 0968 	str.w	r0, [r7, #2408]	; 0x968
		r2 = rnd32();
 800191c:	f7ff fe56 	bl	80015cc <rnd32>
 8001920:	f8c7 0964 	str.w	r0, [r7, #2404]	; 0x964
		r3 = rnd64();
 8001924:	f7ff fe7c 	bl	8001620 <rnd64>
 8001928:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800192c:	e9c3 0100 	strd	r0, r1, [r3]
		r4 = rnd64();
 8001930:	f7ff fe76 	bl	8001620 <rnd64>
 8001934:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8001938:	e9c3 0100 	strd	r0, r1, [r3]

		//populating the structs
		for(int i = 0; i < 2; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8001942:	e00f      	b.n	8001964 <runTests+0xe4>
		{
			struct8.dat[i] = rand();
 8001944:	f003 fa88 	bl	8004e58 <rand>
 8001948:	4602      	mov	r2, r0
 800194a:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8001954:	443b      	add	r3, r7
 8001956:	f843 2c44 	str.w	r2, [r3, #-68]
		for(int i = 0; i < 2; i++)
 800195a:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 800195e:	3301      	adds	r3, #1
 8001960:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8001964:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8001968:	2b01      	cmp	r3, #1
 800196a:	ddeb      	ble.n	8001944 <runTests+0xc4>
		}
		for(int i = 0; i < 32; i++)
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
 8001972:	e00f      	b.n	8001994 <runTests+0x114>
		{
			struct128.dat[i] = rand();
 8001974:	f003 fa70 	bl	8004e58 <rand>
 8001978:	4602      	mov	r2, r0
 800197a:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8001984:	443b      	add	r3, r7
 8001986:	f843 2ccc 	str.w	r2, [r3, #-204]
		for(int i = 0; i < 32; i++)
 800198a:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 800198e:	3301      	adds	r3, #1
 8001990:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
 8001994:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8001998:	2b1f      	cmp	r3, #31
 800199a:	ddeb      	ble.n	8001974 <runTests+0xf4>
		}
		for(int i = 0; i < 256; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80019a2:	e00f      	b.n	80019c4 <runTests+0x144>
		{
			struct1024.dat[i] = rand();
 80019a4:	f003 fa58 	bl	8004e58 <rand>
 80019a8:	4601      	mov	r1, r0
 80019aa:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80019ae:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 80019b2:	f8d7 296c 	ldr.w	r2, [r7, #2412]	; 0x96c
 80019b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i = 0; i < 256; i++)
 80019ba:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80019be:	3301      	adds	r3, #1
 80019c0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80019c4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80019c8:	2bff      	cmp	r3, #255	; 0xff
 80019ca:	ddeb      	ble.n	80019a4 <runTests+0x124>
		}

		//timing the operations
		testTime = startTimer();
 80019cc:	f000 fcf0 	bl	80023b0 <startTimer>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		add32(r1, r2);
 80019d6:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 80019da:	f8d7 0968 	ldr.w	r0, [r7, #2408]	; 0x968
 80019de:	f7ff fec9 	bl	8001774 <add32>
		Add32Bit += (double)stopTimer(testTime);
 80019e2:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fced 	bl	80023c8 <stopTimer>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fcf7 	bl	80003e4 <__aeabi_ui2d>
 80019f6:	4bc6      	ldr	r3, [pc, #792]	; (8001d10 <runTests+0x490>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe fbb6 	bl	800016c <__adddf3>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	49c2      	ldr	r1, [pc, #776]	; (8001d10 <runTests+0x490>)
 8001a06:	e9c1 2300 	strd	r2, r3, [r1]

		testTime = startTimer();
 8001a0a:	f000 fcd1 	bl	80023b0 <startTimer>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		add64(r3, r4);
 8001a14:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8001a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a24:	f7ff feb3 	bl	800178e <add64>
		Add64Bit += (double)stopTimer(testTime);
 8001a28:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fcca 	bl	80023c8 <stopTimer>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fcd4 	bl	80003e4 <__aeabi_ui2d>
 8001a3c:	4bb5      	ldr	r3, [pc, #724]	; (8001d14 <runTests+0x494>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fb93 	bl	800016c <__adddf3>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	49b2      	ldr	r1, [pc, #712]	; (8001d14 <runTests+0x494>)
 8001a4c:	e9c1 2300 	strd	r2, r3, [r1]

		testTime = startTimer();
 8001a50:	f000 fcae 	bl	80023b0 <startTimer>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		mult32(r1, r2);
 8001a5a:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 8001a5e:	f8d7 0968 	ldr.w	r0, [r7, #2408]	; 0x968
 8001a62:	f7ff feaa 	bl	80017ba <mult32>
		Mult32Bit += (double)stopTimer(testTime);
 8001a66:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fcab 	bl	80023c8 <stopTimer>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fcb5 	bl	80003e4 <__aeabi_ui2d>
 8001a7a:	4ba7      	ldr	r3, [pc, #668]	; (8001d18 <runTests+0x498>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fb74 	bl	800016c <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	49a3      	ldr	r1, [pc, #652]	; (8001d18 <runTests+0x498>)
 8001a8a:	e9c1 2300 	strd	r2, r3, [r1]

		testTime = startTimer();
 8001a8e:	f000 fc8f 	bl	80023b0 <startTimer>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		mult64(r3, r4);
 8001a98:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8001aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aa8:	f7ff fe9b 	bl	80017e2 <mult64>
		Mult64Bit += (double)stopTimer(testTime);
 8001aac:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fc88 	bl	80023c8 <stopTimer>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fc92 	bl	80003e4 <__aeabi_ui2d>
 8001ac0:	4b96      	ldr	r3, [pc, #600]	; (8001d1c <runTests+0x49c>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fb51 	bl	800016c <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4993      	ldr	r1, [pc, #588]	; (8001d1c <runTests+0x49c>)
 8001ad0:	e9c1 2300 	strd	r2, r3, [r1]

		testTime = startTimer();
 8001ad4:	f000 fc6c 	bl	80023b0 <startTimer>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		div32(r1, r2);
 8001ade:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 8001ae2:	f8d7 0968 	ldr.w	r0, [r7, #2408]	; 0x968
 8001ae6:	f7ff fe9a 	bl	800181e <div32>
		Div32Bit += (double)stopTimer(testTime);
 8001aea:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fc69 	bl	80023c8 <stopTimer>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fc73 	bl	80003e4 <__aeabi_ui2d>
 8001afe:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <runTests+0x4a0>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fb32 	bl	800016c <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4984      	ldr	r1, [pc, #528]	; (8001d20 <runTests+0x4a0>)
 8001b0e:	e9c1 2300 	strd	r2, r3, [r1]

		testTime = startTimer();
 8001b12:	f000 fc4d 	bl	80023b0 <startTimer>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		div64(r3, r4);
 8001b1c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8001b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b2c:	f7ff fe8a 	bl	8001844 <div64>
		Div64Bit += (double)stopTimer(testTime);
 8001b30:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fc46 	bl	80023c8 <stopTimer>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fc50 	bl	80003e4 <__aeabi_ui2d>
 8001b44:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <runTests+0x4a4>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fb0f 	bl	800016c <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4974      	ldr	r1, [pc, #464]	; (8001d24 <runTests+0x4a4>)
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]

		testTime = startTimer();
 8001b58:	f000 fc2a 	bl	80023b0 <startTimer>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		struct8copy = struct8;
 8001b62:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 8001b66:	f607 1244 	addw	r2, r7, #2372	; 0x944
 8001b6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b6e:	e883 0003 	stmia.w	r3, {r0, r1}
		Copy8Bit += (double)stopTimer(testTime);
 8001b72:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fc25 	bl	80023c8 <stopTimer>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fc2f 	bl	80003e4 <__aeabi_ui2d>
 8001b86:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <runTests+0x4a8>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe faee 	bl	800016c <__adddf3>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4964      	ldr	r1, [pc, #400]	; (8001d28 <runTests+0x4a8>)
 8001b96:	e9c1 2300 	strd	r2, r3, [r1]

		testTime = startTimer();
 8001b9a:	f000 fc09 	bl	80023b0 <startTimer>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		struct128copy = struct128;
 8001ba4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8001ba8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001bac:	4618      	mov	r0, r3
 8001bae:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f002 fcd9 	bl	800456c <memcpy>
		Copy128Bit += (double)stopTimer(testTime);
 8001bba:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fc01 	bl	80023c8 <stopTimer>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fc0b 	bl	80003e4 <__aeabi_ui2d>
 8001bce:	4b57      	ldr	r3, [pc, #348]	; (8001d2c <runTests+0x4ac>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe faca 	bl	800016c <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4953      	ldr	r1, [pc, #332]	; (8001d2c <runTests+0x4ac>)
 8001bde:	e9c1 2300 	strd	r2, r3, [r1]

		testTime = startTimer();
 8001be2:	f000 fbe5 	bl	80023b0 <startTimer>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f8a7 394e 	strh.w	r3, [r7, #2382]	; 0x94e
		struct1024copy = struct1024;
 8001bec:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8001bf0:	f6a3 124c 	subw	r2, r3, #2380	; 0x94c
 8001bf4:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8001bf8:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c04:	461a      	mov	r2, r3
 8001c06:	f002 fcb1 	bl	800456c <memcpy>
		Copy1024Bit += (double)stopTimer(testTime);
 8001c0a:	f8b7 394e 	ldrh.w	r3, [r7, #2382]	; 0x94e
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fbd9 	bl	80023c8 <stopTimer>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fbe3 	bl	80003e4 <__aeabi_ui2d>
 8001c1e:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <runTests+0x4b0>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe faa2 	bl	800016c <__adddf3>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4940      	ldr	r1, [pc, #256]	; (8001d30 <runTests+0x4b0>)
 8001c2e:	e9c1 2300 	strd	r2, r3, [r1]

		count++;
 8001c32:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8001c36:	3301      	adds	r3, #1
 8001c38:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
	while (count < 100)
 8001c3c:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8001c40:	2b63      	cmp	r3, #99	; 0x63
 8001c42:	f77f ae67 	ble.w	8001914 <runTests+0x94>
	}

  //My clock is 64hz, and this was run 100 times, so divide by both to get the average
  Add32Bit = Add32Bit / 64000 / 100;
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <runTests+0x490>)
 8001c48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <runTests+0x4b4>)
 8001c52:	f7fe fd6b 	bl	800072c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <runTests+0x4b8>)
 8001c64:	f7fe fd62 	bl	800072c <__aeabi_ddiv>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4928      	ldr	r1, [pc, #160]	; (8001d10 <runTests+0x490>)
 8001c6e:	e9c1 2300 	strd	r2, r3, [r1]
  Add64Bit = Add64Bit / 64000 / 100;
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <runTests+0x494>)
 8001c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <runTests+0x4b4>)
 8001c7e:	f7fe fd55 	bl	800072c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <runTests+0x4b8>)
 8001c90:	f7fe fd4c 	bl	800072c <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	491e      	ldr	r1, [pc, #120]	; (8001d14 <runTests+0x494>)
 8001c9a:	e9c1 2300 	strd	r2, r3, [r1]
  Mult32Bit = Mult32Bit / 64000 / 100;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <runTests+0x498>)
 8001ca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <runTests+0x4b4>)
 8001caa:	f7fe fd3f 	bl	800072c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <runTests+0x4b8>)
 8001cbc:	f7fe fd36 	bl	800072c <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4914      	ldr	r1, [pc, #80]	; (8001d18 <runTests+0x498>)
 8001cc6:	e9c1 2300 	strd	r2, r3, [r1]
  Mult64Bit = Mult64Bit / 64000 / 100;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <runTests+0x49c>)
 8001ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <runTests+0x4b4>)
 8001cd6:	f7fe fd29 	bl	800072c <__aeabi_ddiv>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <runTests+0x4b8>)
 8001ce8:	f7fe fd20 	bl	800072c <__aeabi_ddiv>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	490a      	ldr	r1, [pc, #40]	; (8001d1c <runTests+0x49c>)
 8001cf2:	e9c1 2300 	strd	r2, r3, [r1]
  Div32Bit = Div32Bit / 64000 / 100;
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <runTests+0x4a0>)
 8001cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <runTests+0x4b4>)
 8001d02:	f7fe fd13 	bl	800072c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	e015      	b.n	8001d3c <runTests+0x4bc>
 8001d10:	20000370 	.word	0x20000370
 8001d14:	20000378 	.word	0x20000378
 8001d18:	20000380 	.word	0x20000380
 8001d1c:	20000388 	.word	0x20000388
 8001d20:	20000390 	.word	0x20000390
 8001d24:	20000398 	.word	0x20000398
 8001d28:	200003a0 	.word	0x200003a0
 8001d2c:	200003a8 	.word	0x200003a8
 8001d30:	200003b0 	.word	0x200003b0
 8001d34:	40ef4000 	.word	0x40ef4000
 8001d38:	40590000 	.word	0x40590000
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b99      	ldr	r3, [pc, #612]	; (8001fa8 <runTests+0x728>)
 8001d42:	f7fe fcf3 	bl	800072c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4998      	ldr	r1, [pc, #608]	; (8001fac <runTests+0x72c>)
 8001d4c:	e9c1 2300 	strd	r2, r3, [r1]
  Div64Bit = Div64Bit / 64000 / 100;
 8001d50:	4b97      	ldr	r3, [pc, #604]	; (8001fb0 <runTests+0x730>)
 8001d52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b96      	ldr	r3, [pc, #600]	; (8001fb4 <runTests+0x734>)
 8001d5c:	f7fe fce6 	bl	800072c <__aeabi_ddiv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	4b8e      	ldr	r3, [pc, #568]	; (8001fa8 <runTests+0x728>)
 8001d6e:	f7fe fcdd 	bl	800072c <__aeabi_ddiv>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	498e      	ldr	r1, [pc, #568]	; (8001fb0 <runTests+0x730>)
 8001d78:	e9c1 2300 	strd	r2, r3, [r1]
  Copy8Bit = Copy8Bit / 64000 / 100;
 8001d7c:	4b8e      	ldr	r3, [pc, #568]	; (8001fb8 <runTests+0x738>)
 8001d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b8b      	ldr	r3, [pc, #556]	; (8001fb4 <runTests+0x734>)
 8001d88:	f7fe fcd0 	bl	800072c <__aeabi_ddiv>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b83      	ldr	r3, [pc, #524]	; (8001fa8 <runTests+0x728>)
 8001d9a:	f7fe fcc7 	bl	800072c <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4985      	ldr	r1, [pc, #532]	; (8001fb8 <runTests+0x738>)
 8001da4:	e9c1 2300 	strd	r2, r3, [r1]
  Copy128Bit = Copy128Bit / 64000 / 100;
 8001da8:	4b84      	ldr	r3, [pc, #528]	; (8001fbc <runTests+0x73c>)
 8001daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b80      	ldr	r3, [pc, #512]	; (8001fb4 <runTests+0x734>)
 8001db4:	f7fe fcba 	bl	800072c <__aeabi_ddiv>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <runTests+0x728>)
 8001dc6:	f7fe fcb1 	bl	800072c <__aeabi_ddiv>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	497b      	ldr	r1, [pc, #492]	; (8001fbc <runTests+0x73c>)
 8001dd0:	e9c1 2300 	strd	r2, r3, [r1]
  Copy1024Bit = Copy1024Bit / 64000 / 100;
 8001dd4:	4b7a      	ldr	r3, [pc, #488]	; (8001fc0 <runTests+0x740>)
 8001dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	4b75      	ldr	r3, [pc, #468]	; (8001fb4 <runTests+0x734>)
 8001de0:	f7fe fca4 	bl	800072c <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <runTests+0x728>)
 8001df2:	f7fe fc9b 	bl	800072c <__aeabi_ddiv>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4971      	ldr	r1, [pc, #452]	; (8001fc0 <runTests+0x740>)
 8001dfc:	e9c1 2300 	strd	r2, r3, [r1]
//  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
//  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);


  //printing times
  sprintf(outputTXBuffer, "32 bit addition: %lfms\r\n", Add32Bit);
 8001e00:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <runTests+0x744>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	1d38      	adds	r0, r7, #4
 8001e08:	496f      	ldr	r1, [pc, #444]	; (8001fc8 <runTests+0x748>)
 8001e0a:	f003 f863 	bl	8004ed4 <siprintf>
  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	486e      	ldr	r0, [pc, #440]	; (8001fcc <runTests+0x74c>)
 8001e14:	f003 f87e 	bl	8004f14 <strcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001e18:	486c      	ldr	r0, [pc, #432]	; (8001fcc <runTests+0x74c>)
 8001e1a:	f7fe f999 	bl	8000150 <strlen>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	4969      	ldr	r1, [pc, #420]	; (8001fcc <runTests+0x74c>)
 8001e28:	4869      	ldr	r0, [pc, #420]	; (8001fd0 <runTests+0x750>)
 8001e2a:	f001 fe48 	bl	8003abe <HAL_UART_Transmit>

  sprintf(outputTXBuffer, "64 bit addition: %lfms\r\n", Add64Bit);
 8001e2e:	4b69      	ldr	r3, [pc, #420]	; (8001fd4 <runTests+0x754>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	1d38      	adds	r0, r7, #4
 8001e36:	4968      	ldr	r1, [pc, #416]	; (8001fd8 <runTests+0x758>)
 8001e38:	f003 f84c 	bl	8004ed4 <siprintf>
  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4862      	ldr	r0, [pc, #392]	; (8001fcc <runTests+0x74c>)
 8001e42:	f003 f867 	bl	8004f14 <strcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001e46:	4861      	ldr	r0, [pc, #388]	; (8001fcc <runTests+0x74c>)
 8001e48:	f7fe f982 	bl	8000150 <strlen>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e54:	495d      	ldr	r1, [pc, #372]	; (8001fcc <runTests+0x74c>)
 8001e56:	485e      	ldr	r0, [pc, #376]	; (8001fd0 <runTests+0x750>)
 8001e58:	f001 fe31 	bl	8003abe <HAL_UART_Transmit>

  sprintf(outputTXBuffer, "32 bit multiplication: %lfms\r\n", Mult32Bit);
 8001e5c:	4b5f      	ldr	r3, [pc, #380]	; (8001fdc <runTests+0x75c>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	1d38      	adds	r0, r7, #4
 8001e64:	495e      	ldr	r1, [pc, #376]	; (8001fe0 <runTests+0x760>)
 8001e66:	f003 f835 	bl	8004ed4 <siprintf>
  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4857      	ldr	r0, [pc, #348]	; (8001fcc <runTests+0x74c>)
 8001e70:	f003 f850 	bl	8004f14 <strcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001e74:	4855      	ldr	r0, [pc, #340]	; (8001fcc <runTests+0x74c>)
 8001e76:	f7fe f96b 	bl	8000150 <strlen>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	4952      	ldr	r1, [pc, #328]	; (8001fcc <runTests+0x74c>)
 8001e84:	4852      	ldr	r0, [pc, #328]	; (8001fd0 <runTests+0x750>)
 8001e86:	f001 fe1a 	bl	8003abe <HAL_UART_Transmit>

  sprintf(outputTXBuffer, "64 bit multiplication: %lfms\r\n", Mult64Bit);
 8001e8a:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <runTests+0x764>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	1d38      	adds	r0, r7, #4
 8001e92:	4955      	ldr	r1, [pc, #340]	; (8001fe8 <runTests+0x768>)
 8001e94:	f003 f81e 	bl	8004ed4 <siprintf>
  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	484b      	ldr	r0, [pc, #300]	; (8001fcc <runTests+0x74c>)
 8001e9e:	f003 f839 	bl	8004f14 <strcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001ea2:	484a      	ldr	r0, [pc, #296]	; (8001fcc <runTests+0x74c>)
 8001ea4:	f7fe f954 	bl	8000150 <strlen>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb0:	4946      	ldr	r1, [pc, #280]	; (8001fcc <runTests+0x74c>)
 8001eb2:	4847      	ldr	r0, [pc, #284]	; (8001fd0 <runTests+0x750>)
 8001eb4:	f001 fe03 	bl	8003abe <HAL_UART_Transmit>

  sprintf(outputTXBuffer, "32 bit division: %lfms\r\n", Div32Bit);
 8001eb8:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <runTests+0x72c>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	1d38      	adds	r0, r7, #4
 8001ec0:	494a      	ldr	r1, [pc, #296]	; (8001fec <runTests+0x76c>)
 8001ec2:	f003 f807 	bl	8004ed4 <siprintf>
  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4840      	ldr	r0, [pc, #256]	; (8001fcc <runTests+0x74c>)
 8001ecc:	f003 f822 	bl	8004f14 <strcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001ed0:	483e      	ldr	r0, [pc, #248]	; (8001fcc <runTests+0x74c>)
 8001ed2:	f7fe f93d 	bl	8000150 <strlen>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	493b      	ldr	r1, [pc, #236]	; (8001fcc <runTests+0x74c>)
 8001ee0:	483b      	ldr	r0, [pc, #236]	; (8001fd0 <runTests+0x750>)
 8001ee2:	f001 fdec 	bl	8003abe <HAL_UART_Transmit>

  sprintf(outputTXBuffer, "64 bit division: %lfms\r\n", Div64Bit);
 8001ee6:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <runTests+0x730>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	1d38      	adds	r0, r7, #4
 8001eee:	4940      	ldr	r1, [pc, #256]	; (8001ff0 <runTests+0x770>)
 8001ef0:	f002 fff0 	bl	8004ed4 <siprintf>
  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4834      	ldr	r0, [pc, #208]	; (8001fcc <runTests+0x74c>)
 8001efa:	f003 f80b 	bl	8004f14 <strcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001efe:	4833      	ldr	r0, [pc, #204]	; (8001fcc <runTests+0x74c>)
 8001f00:	f7fe f926 	bl	8000150 <strlen>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0c:	492f      	ldr	r1, [pc, #188]	; (8001fcc <runTests+0x74c>)
 8001f0e:	4830      	ldr	r0, [pc, #192]	; (8001fd0 <runTests+0x750>)
 8001f10:	f001 fdd5 	bl	8003abe <HAL_UART_Transmit>

  sprintf(outputTXBuffer, "8-byte struct copy: %lfms\r\n", Copy8Bit);
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <runTests+0x738>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	1d38      	adds	r0, r7, #4
 8001f1c:	4935      	ldr	r1, [pc, #212]	; (8001ff4 <runTests+0x774>)
 8001f1e:	f002 ffd9 	bl	8004ed4 <siprintf>
  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	4619      	mov	r1, r3
 8001f26:	4829      	ldr	r0, [pc, #164]	; (8001fcc <runTests+0x74c>)
 8001f28:	f002 fff4 	bl	8004f14 <strcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001f2c:	4827      	ldr	r0, [pc, #156]	; (8001fcc <runTests+0x74c>)
 8001f2e:	f7fe f90f 	bl	8000150 <strlen>
 8001f32:	4603      	mov	r3, r0
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3a:	4924      	ldr	r1, [pc, #144]	; (8001fcc <runTests+0x74c>)
 8001f3c:	4824      	ldr	r0, [pc, #144]	; (8001fd0 <runTests+0x750>)
 8001f3e:	f001 fdbe 	bl	8003abe <HAL_UART_Transmit>

  sprintf(outputTXBuffer, "128-byte struct copy: %lfms\r\n", Copy128Bit);
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <runTests+0x73c>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	1d38      	adds	r0, r7, #4
 8001f4a:	492b      	ldr	r1, [pc, #172]	; (8001ff8 <runTests+0x778>)
 8001f4c:	f002 ffc2 	bl	8004ed4 <siprintf>
  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	481d      	ldr	r0, [pc, #116]	; (8001fcc <runTests+0x74c>)
 8001f56:	f002 ffdd 	bl	8004f14 <strcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001f5a:	481c      	ldr	r0, [pc, #112]	; (8001fcc <runTests+0x74c>)
 8001f5c:	f7fe f8f8 	bl	8000150 <strlen>
 8001f60:	4603      	mov	r3, r0
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f68:	4918      	ldr	r1, [pc, #96]	; (8001fcc <runTests+0x74c>)
 8001f6a:	4819      	ldr	r0, [pc, #100]	; (8001fd0 <runTests+0x750>)
 8001f6c:	f001 fda7 	bl	8003abe <HAL_UART_Transmit>

  sprintf(outputTXBuffer, "1024-byte struct copy: %lfms\r\n", Copy1024Bit);
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <runTests+0x740>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	1d38      	adds	r0, r7, #4
 8001f78:	4920      	ldr	r1, [pc, #128]	; (8001ffc <runTests+0x77c>)
 8001f7a:	f002 ffab 	bl	8004ed4 <siprintf>
  strcpy((char *)cliBufferTX, (const char *)outputTXBuffer);
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4812      	ldr	r0, [pc, #72]	; (8001fcc <runTests+0x74c>)
 8001f84:	f002 ffc6 	bl	8004f14 <strcpy>
  HAL_UART_Transmit(&huart2, cliBufferTX, strlen((char *)cliBufferTX), 1000);
 8001f88:	4810      	ldr	r0, [pc, #64]	; (8001fcc <runTests+0x74c>)
 8001f8a:	f7fe f8e1 	bl	8000150 <strlen>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <runTests+0x74c>)
 8001f98:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <runTests+0x750>)
 8001f9a:	f001 fd90 	bl	8003abe <HAL_UART_Transmit>


}
 8001f9e:	bf00      	nop
 8001fa0:	f607 1788 	addw	r7, r7, #2440	; 0x988
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40590000 	.word	0x40590000
 8001fac:	20000390 	.word	0x20000390
 8001fb0:	20000398 	.word	0x20000398
 8001fb4:	40ef4000 	.word	0x40ef4000
 8001fb8:	200003a0 	.word	0x200003a0
 8001fbc:	200003a8 	.word	0x200003a8
 8001fc0:	200003b0 	.word	0x200003b0
 8001fc4:	20000370 	.word	0x20000370
 8001fc8:	080075a4 	.word	0x080075a4
 8001fcc:	200001fc 	.word	0x200001fc
 8001fd0:	200002e4 	.word	0x200002e4
 8001fd4:	20000378 	.word	0x20000378
 8001fd8:	080075c0 	.word	0x080075c0
 8001fdc:	20000380 	.word	0x20000380
 8001fe0:	080075dc 	.word	0x080075dc
 8001fe4:	20000388 	.word	0x20000388
 8001fe8:	080075fc 	.word	0x080075fc
 8001fec:	0800761c 	.word	0x0800761c
 8001ff0:	08007638 	.word	0x08007638
 8001ff4:	08007654 	.word	0x08007654
 8001ff8:	08007670 	.word	0x08007670
 8001ffc:	08007690 	.word	0x08007690

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002008:	e7fe      	b.n	8002008 <Error_Handler+0x8>
	...

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_MspInit+0x5c>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_MspInit+0x5c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6193      	str	r3, [r2, #24]
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_MspInit+0x5c>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_MspInit+0x5c>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_MspInit+0x5c>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_MspInit+0x5c>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_MspInit+0x60>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_MspInit+0x60>)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000

08002070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <HAL_TIM_Base_MspInit+0x34>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10b      	bne.n	800209a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_TIM_Base_MspInit+0x38>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_TIM_Base_MspInit+0x38>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_TIM_Base_MspInit+0x38>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0318 	add.w	r3, r7, #24
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a35      	ldr	r2, [pc, #212]	; (800219c <HAL_UART_MspInit+0xf0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d124      	bne.n	8002116 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	4a33      	ldr	r2, [pc, #204]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 80020d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d6:	61d3      	str	r3, [r2, #28]
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a2d      	ldr	r2, [pc, #180]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020fc:	230c      	movs	r3, #12
 80020fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2302      	movs	r3, #2
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	f107 0318 	add.w	r3, r7, #24
 800210c:	4619      	mov	r1, r3
 800210e:	4825      	ldr	r0, [pc, #148]	; (80021a4 <HAL_UART_MspInit+0xf8>)
 8002110:	f000 fbe4 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002114:	e03e      	b.n	8002194 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART3)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <HAL_UART_MspInit+0xfc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d139      	bne.n	8002194 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 8002126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212a:	61d3      	str	r3, [r2, #28]
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <HAL_UART_MspInit+0xf4>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 0318 	add.w	r3, r7, #24
 8002162:	4619      	mov	r1, r3
 8002164:	4811      	ldr	r0, [pc, #68]	; (80021ac <HAL_UART_MspInit+0x100>)
 8002166:	f000 fbb9 	bl	80028dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800216a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002178:	f107 0318 	add.w	r3, r7, #24
 800217c:	4619      	mov	r1, r3
 800217e:	480b      	ldr	r0, [pc, #44]	; (80021ac <HAL_UART_MspInit+0x100>)
 8002180:	f000 fbac 	bl	80028dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2027      	movs	r0, #39	; 0x27
 800218a:	f000 fac0 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800218e:	2027      	movs	r0, #39	; 0x27
 8002190:	f000 fad9 	bl	8002746 <HAL_NVIC_EnableIRQ>
}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40004400 	.word	0x40004400
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010800 	.word	0x40010800
 80021a8:	40004800 	.word	0x40004800
 80021ac:	40010c00 	.word	0x40010c00

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <NMI_Handler+0x4>

080021b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler+0x4>

080021c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f6:	f000 f973 	bl	80024e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <USART3_IRQHandler+0x10>)
 8002206:	f001 fd8f 	bl	8003d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000328 	.word	0x20000328

08002214 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002218:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800221c:	f000 fd12 	bl	8002c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
	return 1;
 8002228:	2301      	movs	r3, #1
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <_kill>:

int _kill(int pid, int sig)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800223c:	f002 f96c 	bl	8004518 <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	2216      	movs	r2, #22
 8002244:	601a      	str	r2, [r3, #0]
	return -1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_exit>:

void _exit (int status)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800225a:	f04f 31ff 	mov.w	r1, #4294967295
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffe7 	bl	8002232 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002264:	e7fe      	b.n	8002264 <_exit+0x12>

08002266 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e00a      	b.n	800228e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002278:	f3af 8000 	nop.w
 800227c:	4601      	mov	r1, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	60ba      	str	r2, [r7, #8]
 8002284:	b2ca      	uxtb	r2, r1
 8002286:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	429a      	cmp	r2, r3
 8002294:	dbf0      	blt.n	8002278 <_read+0x12>
	}

return len;
 8002296:	687b      	ldr	r3, [r7, #4]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e009      	b.n	80022c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	60ba      	str	r2, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	dbf1      	blt.n	80022b2 <_write+0x12>
	}
	return len;
 80022ce:	687b      	ldr	r3, [r7, #4]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_close>:

int _close(int file)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	return -1;
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <_isatty>:

int _isatty(int file)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
	return 0;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f002 f8d6 	bl	8004518 <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20005000 	.word	0x20005000
 8002398:	00000400 	.word	0x00000400
 800239c:	200003b8 	.word	0x200003b8
 80023a0:	200003d0 	.word	0x200003d0

080023a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <startTimer>:
#include "timer.h"


uint16_t startTimer()
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <startTimer+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	b29b      	uxth	r3, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	2000029c 	.word	0x2000029c

080023c8 <stopTimer>:

uint16_t stopTimer(uint16_t start)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
	uint16_t end = __HAL_TIM_GET_COUNTER(&htim4);
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <stopTimer+0x3c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	81fb      	strh	r3, [r7, #14]

	if(end < start)
 80023da:	89fa      	ldrh	r2, [r7, #14]
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d206      	bcs.n	80023f0 <stopTimer+0x28>
	{
		return ((0xFFFF + end) - start);
 80023e2:	89fa      	ldrh	r2, [r7, #14]
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	e003      	b.n	80023f8 <stopTimer+0x30>
	}

	return (end - start);
 80023f0:	89fa      	ldrh	r2, [r7, #14]
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	b29b      	uxth	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000029c 	.word	0x2000029c

08002408 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002408:	480c      	ldr	r0, [pc, #48]	; (800243c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800240a:	490d      	ldr	r1, [pc, #52]	; (8002440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002420:	4c0a      	ldr	r4, [pc, #40]	; (800244c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800242e:	f7ff ffb9 	bl	80023a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002432:	f002 f877 	bl	8004524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002436:	f7fe fce5 	bl	8000e04 <main>
  bx lr
 800243a:	4770      	bx	lr
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002444:	08007b24 	.word	0x08007b24
  ldr r2, =_sbss
 8002448:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800244c:	200003d0 	.word	0x200003d0

08002450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC1_2_IRQHandler>
	...

08002454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_Init+0x28>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_Init+0x28>)
 800245e:	f043 0310 	orr.w	r3, r3, #16
 8002462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002464:	2003      	movs	r0, #3
 8002466:	f000 f947 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246a:	2000      	movs	r0, #0
 800246c:	f000 f808 	bl	8002480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002470:	f7ff fdcc 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40022000 	.word	0x40022000

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x54>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x58>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002496:	fbb3 f3f1 	udiv	r3, r3, r1
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f95f 	bl	8002762 <HAL_SYSTICK_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00e      	b.n	80024cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0f      	cmp	r3, #15
 80024b2:	d80a      	bhi.n	80024ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b4:	2200      	movs	r2, #0
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f000 f927 	bl	800270e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <HAL_InitTick+0x5c>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20000008 	.word	0x20000008
 80024dc:	20000004 	.word	0x20000004

080024e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_IncTick+0x1c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_IncTick+0x20>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	4a03      	ldr	r2, [pc, #12]	; (8002500 <HAL_IncTick+0x20>)
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	20000008 	.word	0x20000008
 8002500:	200003bc 	.word	0x200003bc

08002504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b02      	ldr	r3, [pc, #8]	; (8002514 <HAL_GetTick+0x10>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	200003bc 	.word	0x200003bc

08002518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff fff0 	bl	8002504 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d005      	beq.n	800253e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_Delay+0x44>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800253e:	bf00      	nop
 8002540:	f7ff ffe0 	bl	8002504 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	429a      	cmp	r2, r3
 800254e:	d8f7      	bhi.n	8002540 <HAL_Delay+0x28>
  {
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000008 	.word	0x20000008

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4906      	ldr	r1, [pc, #24]	; (80025f8 <__NVIC_EnableIRQ+0x34>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	; (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f7ff ff90 	bl	80025fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff2d 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff42 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff90 	bl	8002650 <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5f 	bl	80025fc <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff35 	bl	80025c4 <__NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffa2 	bl	80026b4 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800278c:	2b02      	cmp	r3, #2
 800278e:	d008      	beq.n	80027a2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2204      	movs	r2, #4
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e020      	b.n	80027e4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 020e 	bic.w	r2, r2, #14
 80027b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002802:	2b02      	cmp	r3, #2
 8002804:	d005      	beq.n	8002812 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2204      	movs	r2, #4
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e051      	b.n	80028b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 020e 	bic.w	r2, r2, #14
 8002820:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_DMA_Abort_IT+0xd0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d029      	beq.n	8002890 <HAL_DMA_Abort_IT+0xa0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <HAL_DMA_Abort_IT+0xd4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d022      	beq.n	800288c <HAL_DMA_Abort_IT+0x9c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_DMA_Abort_IT+0xd8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d01a      	beq.n	8002886 <HAL_DMA_Abort_IT+0x96>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_DMA_Abort_IT+0xdc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d012      	beq.n	8002880 <HAL_DMA_Abort_IT+0x90>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_DMA_Abort_IT+0xe0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00a      	beq.n	800287a <HAL_DMA_Abort_IT+0x8a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <HAL_DMA_Abort_IT+0xe4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d102      	bne.n	8002874 <HAL_DMA_Abort_IT+0x84>
 800286e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002872:	e00e      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 8002874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002878:	e00b      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 800287a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287e:	e008      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 8002880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002884:	e005      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 8002886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800288a:	e002      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 800288c:	2310      	movs	r3, #16
 800288e:	e000      	b.n	8002892 <HAL_DMA_Abort_IT+0xa2>
 8002890:	2301      	movs	r3, #1
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_DMA_Abort_IT+0xe8>)
 8002894:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
    } 
  }
  return status;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40020008 	.word	0x40020008
 80028c4:	4002001c 	.word	0x4002001c
 80028c8:	40020030 	.word	0x40020030
 80028cc:	40020044 	.word	0x40020044
 80028d0:	40020058 	.word	0x40020058
 80028d4:	4002006c 	.word	0x4002006c
 80028d8:	40020000 	.word	0x40020000

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b08b      	sub	sp, #44	; 0x2c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ee:	e169      	b.n	8002bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028f0:	2201      	movs	r2, #1
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 8158 	bne.w	8002bbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a9a      	ldr	r2, [pc, #616]	; (8002b7c <HAL_GPIO_Init+0x2a0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d05e      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002918:	4a98      	ldr	r2, [pc, #608]	; (8002b7c <HAL_GPIO_Init+0x2a0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d875      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800291e:	4a98      	ldr	r2, [pc, #608]	; (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d058      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002924:	4a96      	ldr	r2, [pc, #600]	; (8002b80 <HAL_GPIO_Init+0x2a4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d86f      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800292a:	4a96      	ldr	r2, [pc, #600]	; (8002b84 <HAL_GPIO_Init+0x2a8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d052      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002930:	4a94      	ldr	r2, [pc, #592]	; (8002b84 <HAL_GPIO_Init+0x2a8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d869      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002936:	4a94      	ldr	r2, [pc, #592]	; (8002b88 <HAL_GPIO_Init+0x2ac>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d04c      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 800293c:	4a92      	ldr	r2, [pc, #584]	; (8002b88 <HAL_GPIO_Init+0x2ac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d863      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002942:	4a92      	ldr	r2, [pc, #584]	; (8002b8c <HAL_GPIO_Init+0x2b0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d046      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
 8002948:	4a90      	ldr	r2, [pc, #576]	; (8002b8c <HAL_GPIO_Init+0x2b0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d85d      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 800294e:	2b12      	cmp	r3, #18
 8002950:	d82a      	bhi.n	80029a8 <HAL_GPIO_Init+0xcc>
 8002952:	2b12      	cmp	r3, #18
 8002954:	d859      	bhi.n	8002a0a <HAL_GPIO_Init+0x12e>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_GPIO_Init+0x80>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	080029d7 	.word	0x080029d7
 8002960:	080029b1 	.word	0x080029b1
 8002964:	080029c3 	.word	0x080029c3
 8002968:	08002a05 	.word	0x08002a05
 800296c:	08002a0b 	.word	0x08002a0b
 8002970:	08002a0b 	.word	0x08002a0b
 8002974:	08002a0b 	.word	0x08002a0b
 8002978:	08002a0b 	.word	0x08002a0b
 800297c:	08002a0b 	.word	0x08002a0b
 8002980:	08002a0b 	.word	0x08002a0b
 8002984:	08002a0b 	.word	0x08002a0b
 8002988:	08002a0b 	.word	0x08002a0b
 800298c:	08002a0b 	.word	0x08002a0b
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	08002a0b 	.word	0x08002a0b
 8002998:	08002a0b 	.word	0x08002a0b
 800299c:	08002a0b 	.word	0x08002a0b
 80029a0:	080029b9 	.word	0x080029b9
 80029a4:	080029cd 	.word	0x080029cd
 80029a8:	4a79      	ldr	r2, [pc, #484]	; (8002b90 <HAL_GPIO_Init+0x2b4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ae:	e02c      	b.n	8002a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	623b      	str	r3, [r7, #32]
          break;
 80029b6:	e029      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	3304      	adds	r3, #4
 80029be:	623b      	str	r3, [r7, #32]
          break;
 80029c0:	e024      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	3308      	adds	r3, #8
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e01f      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	330c      	adds	r3, #12
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e01a      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029de:	2304      	movs	r3, #4
 80029e0:	623b      	str	r3, [r7, #32]
          break;
 80029e2:	e013      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029ec:	2308      	movs	r3, #8
 80029ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	611a      	str	r2, [r3, #16]
          break;
 80029f6:	e009      	b.n	8002a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f8:	2308      	movs	r3, #8
 80029fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	615a      	str	r2, [r3, #20]
          break;
 8002a02:	e003      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e000      	b.n	8002a0c <HAL_GPIO_Init+0x130>
          break;
 8002a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d801      	bhi.n	8002a16 <HAL_GPIO_Init+0x13a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_Init+0x13e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d802      	bhi.n	8002a28 <HAL_GPIO_Init+0x14c>
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x152>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	3b08      	subs	r3, #8
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	210f      	movs	r1, #15
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	6a39      	ldr	r1, [r7, #32]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80b1 	beq.w	8002bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a5c:	4b4d      	ldr	r3, [pc, #308]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_GPIO_Init+0x2b8>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a74:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a40      	ldr	r2, [pc, #256]	; (8002b9c <HAL_GPIO_Init+0x2c0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <HAL_GPIO_Init+0x1ec>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3f      	ldr	r2, [pc, #252]	; (8002ba0 <HAL_GPIO_Init+0x2c4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_GPIO_Init+0x1e8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3e      	ldr	r2, [pc, #248]	; (8002ba4 <HAL_GPIO_Init+0x2c8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <HAL_GPIO_Init+0x1e4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <HAL_GPIO_Init+0x2cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_GPIO_Init+0x1e0>
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e006      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e004      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e002      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_GPIO_Init+0x1ee>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	f002 0203 	and.w	r2, r2, #3
 8002ad0:	0092      	lsls	r2, r2, #2
 8002ad2:	4093      	lsls	r3, r2
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ada:	492f      	ldr	r1, [pc, #188]	; (8002b98 <HAL_GPIO_Init+0x2bc>)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	492c      	ldr	r1, [pc, #176]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4928      	ldr	r1, [pc, #160]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4922      	ldr	r1, [pc, #136]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	491e      	ldr	r1, [pc, #120]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4918      	ldr	r1, [pc, #96]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4914      	ldr	r1, [pc, #80]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d021      	beq.n	8002bb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_GPIO_Init+0x2d0>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
 8002b78:	e021      	b.n	8002bbe <HAL_GPIO_Init+0x2e2>
 8002b7a:	bf00      	nop
 8002b7c:	10320000 	.word	0x10320000
 8002b80:	10310000 	.word	0x10310000
 8002b84:	10220000 	.word	0x10220000
 8002b88:	10210000 	.word	0x10210000
 8002b8c:	10120000 	.word	0x10120000
 8002b90:	10110000 	.word	0x10110000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40010800 	.word	0x40010800
 8002ba0:	40010c00 	.word	0x40010c00
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	40011400 	.word	0x40011400
 8002bac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	4909      	ldr	r1, [pc, #36]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f ae8e 	bne.w	80028f0 <HAL_GPIO_Init+0x14>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	372c      	adds	r7, #44	; 0x2c
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e001      	b.n	8002c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	807b      	strh	r3, [r7, #2]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c22:	787b      	ldrb	r3, [r7, #1]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c28:	887a      	ldrh	r2, [r7, #2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c2e:	e003      	b.n	8002c38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c30:	887b      	ldrh	r3, [r7, #2]
 8002c32:	041a      	lsls	r2, r3, #16
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	611a      	str	r2, [r3, #16]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c5a:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f806 	bl	8002c74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e272      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8087 	beq.w	8002db6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca8:	4b92      	ldr	r3, [pc, #584]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d00c      	beq.n	8002cce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb4:	4b8f      	ldr	r3, [pc, #572]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d112      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x5e>
 8002cc0:	4b8c      	ldr	r3, [pc, #560]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cce:	4b89      	ldr	r3, [pc, #548]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d06c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x12c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d168      	bne.n	8002db4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e24c      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x76>
 8002cf0:	4b80      	ldr	r3, [pc, #512]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a7f      	ldr	r2, [pc, #508]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	e02e      	b.n	8002d5c <HAL_RCC_OscConfig+0xd4>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x98>
 8002d06:	4b7b      	ldr	r3, [pc, #492]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b78      	ldr	r3, [pc, #480]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a77      	ldr	r2, [pc, #476]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e01d      	b.n	8002d5c <HAL_RCC_OscConfig+0xd4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0xbc>
 8002d2a:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a71      	ldr	r2, [pc, #452]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0xd4>
 8002d44:	4b6b      	ldr	r3, [pc, #428]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b68      	ldr	r3, [pc, #416]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a67      	ldr	r2, [pc, #412]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7ff fbce 	bl	8002504 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7ff fbca 	bl	8002504 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	; 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e200      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe4>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7ff fbba 	bl	8002504 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7ff fbb6 	bl	8002504 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1ec      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x10c>
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d063      	beq.n	8002e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dc2:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dce:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x18c>
 8002dda:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x176>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1c0      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4939      	ldr	r1, [pc, #228]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e03a      	b.n	8002e8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7ff fb6f 	bl	8002504 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7ff fb6b 	bl	8002504 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1a1      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4927      	ldr	r1, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff fb4e 	bl	8002504 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7ff fb4a 	bl	8002504 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e180      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03a      	beq.n	8002f0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d019      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_RCC_OscConfig+0x274>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea4:	f7ff fb2e 	bl	8002504 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7ff fb2a 	bl	8002504 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e160      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f000 fad8 	bl	8003480 <RCC_Delay>
 8002ed0:	e01c      	b.n	8002f0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_OscConfig+0x274>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7ff fb14 	bl	8002504 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ede:	e00f      	b.n	8002f00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7ff fb10 	bl	8002504 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d908      	bls.n	8002f00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e146      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	42420000 	.word	0x42420000
 8002efc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	4b92      	ldr	r3, [pc, #584]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e9      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80a6 	beq.w	8003066 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	4b88      	ldr	r3, [pc, #544]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	4a87      	ldr	r2, [pc, #540]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	61d3      	str	r3, [r2, #28]
 8002f36:	4b85      	ldr	r3, [pc, #532]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b82      	ldr	r3, [pc, #520]	; (8003150 <HAL_RCC_OscConfig+0x4c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b7f      	ldr	r3, [pc, #508]	; (8003150 <HAL_RCC_OscConfig+0x4c8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7e      	ldr	r2, [pc, #504]	; (8003150 <HAL_RCC_OscConfig+0x4c8>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7ff fad1 	bl	8002504 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7ff facd 	bl	8002504 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e103      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b75      	ldr	r3, [pc, #468]	; (8003150 <HAL_RCC_OscConfig+0x4c8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x312>
 8002f8c:	4b6f      	ldr	r3, [pc, #444]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4a6e      	ldr	r2, [pc, #440]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6213      	str	r3, [r2, #32]
 8002f98:	e02d      	b.n	8002ff6 <HAL_RCC_OscConfig+0x36e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x334>
 8002fa2:	4b6a      	ldr	r3, [pc, #424]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a69      	ldr	r2, [pc, #420]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a66      	ldr	r2, [pc, #408]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
 8002fb8:	6213      	str	r3, [r2, #32]
 8002fba:	e01c      	b.n	8002ff6 <HAL_RCC_OscConfig+0x36e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCC_OscConfig+0x356>
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a60      	ldr	r2, [pc, #384]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	f043 0304 	orr.w	r3, r3, #4
 8002fce:	6213      	str	r3, [r2, #32]
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4a5d      	ldr	r2, [pc, #372]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6213      	str	r3, [r2, #32]
 8002fdc:	e00b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x36e>
 8002fde:	4b5b      	ldr	r3, [pc, #364]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a5a      	ldr	r2, [pc, #360]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	6213      	str	r3, [r2, #32]
 8002fea:	4b58      	ldr	r3, [pc, #352]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a57      	ldr	r2, [pc, #348]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d015      	beq.n	800302a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffe:	f7ff fa81 	bl	8002504 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7ff fa7d 	bl	8002504 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	; 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e0b1      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	4b4b      	ldr	r3, [pc, #300]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ee      	beq.n	8003006 <HAL_RCC_OscConfig+0x37e>
 8003028:	e014      	b.n	8003054 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302a:	f7ff fa6b 	bl	8002504 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7ff fa67 	bl	8002504 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e09b      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ee      	bne.n	8003032 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d105      	bne.n	8003066 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305a:	4b3c      	ldr	r3, [pc, #240]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a3b      	ldr	r2, [pc, #236]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003064:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8087 	beq.w	800317e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003070:	4b36      	ldr	r3, [pc, #216]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d061      	beq.n	8003140 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d146      	bne.n	8003112 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003084:	4b33      	ldr	r3, [pc, #204]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308a:	f7ff fa3b 	bl	8002504 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003092:	f7ff fa37 	bl	8002504 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e06d      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d108      	bne.n	80030cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ba:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	4921      	ldr	r1, [pc, #132]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030cc:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a19      	ldr	r1, [r3, #32]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	430b      	orrs	r3, r1
 80030de:	491b      	ldr	r1, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ea:	f7ff fa0b 	bl	8002504 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7ff fa07 	bl	8002504 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e03d      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x46a>
 8003110:	e035      	b.n	800317e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCC_OscConfig+0x4cc>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7ff f9f4 	bl	8002504 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7ff f9f0 	bl	8002504 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e026      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_OscConfig+0x4c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x498>
 800313e:	e01e      	b.n	800317e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d107      	bne.n	8003158 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e019      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
 800314c:	40021000 	.word	0x40021000
 8003150:	40007000 	.word	0x40007000
 8003154:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_OscConfig+0x500>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	429a      	cmp	r2, r3
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d001      	beq.n	800317e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0d0      	b.n	8003342 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d910      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b67      	ldr	r3, [pc, #412]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0207 	bic.w	r2, r3, #7
 80031b6:	4965      	ldr	r1, [pc, #404]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a58      	ldr	r2, [pc, #352]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a52      	ldr	r2, [pc, #328]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800320a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d040      	beq.n	80032ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d115      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e073      	b.n	8003342 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06b      	b.n	8003342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4936      	ldr	r1, [pc, #216]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327c:	f7ff f942 	bl	8002504 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7ff f93e 	bl	8002504 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e053      	b.n	8003342 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b27      	ldr	r3, [pc, #156]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d210      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 0207 	bic.w	r2, r3, #7
 80032c2:	4922      	ldr	r1, [pc, #136]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1cc>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1d0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f8a0 	bl	8002480 <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40022000 	.word	0x40022000
 8003350:	40021000 	.word	0x40021000
 8003354:	080076c0 	.word	0x080076c0
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	b490      	push	{r4, r7}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003366:	4b29      	ldr	r3, [pc, #164]	; (800340c <HAL_RCC_GetSysClockFreq+0xac>)
 8003368:	1d3c      	adds	r4, r7, #4
 800336a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800336c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003370:	f240 2301 	movw	r3, #513	; 0x201
 8003374:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800338a:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_RCC_GetSysClockFreq+0xb0>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d002      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 800339a:	2b08      	cmp	r3, #8
 800339c:	d003      	beq.n	80033a6 <HAL_RCC_GetSysClockFreq+0x46>
 800339e:	e02b      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033a0:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033a2:	623b      	str	r3, [r7, #32]
      break;
 80033a4:	e02b      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	0c9b      	lsrs	r3, r3, #18
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3328      	adds	r3, #40	; 0x28
 80033b0:	443b      	add	r3, r7
 80033b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d012      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	0c5b      	lsrs	r3, r3, #17
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	3328      	adds	r3, #40	; 0x28
 80033ce:	443b      	add	r3, r7
 80033d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	4a0e      	ldr	r2, [pc, #56]	; (8003414 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033da:	fb03 f202 	mul.w	r2, r3, r2
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	e004      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	623b      	str	r3, [r7, #32]
      break;
 80033f6:	e002      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033fa:	623b      	str	r3, [r7, #32]
      break;
 80033fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3728      	adds	r7, #40	; 0x28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc90      	pop	{r4, r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	080076b0 	.word	0x080076b0
 8003410:	40021000 	.word	0x40021000
 8003414:	007a1200 	.word	0x007a1200
 8003418:	003d0900 	.word	0x003d0900

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b02      	ldr	r3, [pc, #8]	; (800342c <HAL_RCC_GetHCLKFreq+0x10>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	20000000 	.word	0x20000000

08003430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003434:	f7ff fff2 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	4903      	ldr	r1, [pc, #12]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	080076d0 	.word	0x080076d0

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800345c:	f7ff ffde 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	0adb      	lsrs	r3, r3, #11
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4903      	ldr	r1, [pc, #12]	; (800347c <HAL_RCC_GetPCLK2Freq+0x24>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	080076d0 	.word	0x080076d0

08003480 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <RCC_Delay+0x34>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <RCC_Delay+0x38>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0a5b      	lsrs	r3, r3, #9
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800349c:	bf00      	nop
  }
  while (Delay --);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1e5a      	subs	r2, r3, #1
 80034a2:	60fa      	str	r2, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f9      	bne.n	800349c <RCC_Delay+0x1c>
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr
 80034b4:	20000000 	.word	0x20000000
 80034b8:	10624dd3 	.word	0x10624dd3

080034bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e041      	b.n	8003552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fe fdc4 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 f93c 	bl	8003778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d001      	beq.n	8003574 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e032      	b.n	80035da <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_TIM_Base_Start+0x88>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_TIM_Base_Start+0x48>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d009      	beq.n	80035a4 <HAL_TIM_Base_Start+0x48>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <HAL_TIM_Base_Start+0x8c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_TIM_Base_Start+0x48>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a13      	ldr	r2, [pc, #76]	; (80035ec <HAL_TIM_Base_Start+0x90>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d111      	bne.n	80035c8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d010      	beq.n	80035d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	e007      	b.n	80035d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800

080035f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_TIM_ConfigClockSource+0x18>
 8003604:	2302      	movs	r3, #2
 8003606:	e0b3      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x180>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800362e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003640:	d03e      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0xd0>
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003646:	f200 8087 	bhi.w	8003758 <HAL_TIM_ConfigClockSource+0x168>
 800364a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364e:	f000 8085 	beq.w	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003656:	d87f      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003658:	2b70      	cmp	r3, #112	; 0x70
 800365a:	d01a      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0xa2>
 800365c:	2b70      	cmp	r3, #112	; 0x70
 800365e:	d87b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003660:	2b60      	cmp	r3, #96	; 0x60
 8003662:	d050      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x116>
 8003664:	2b60      	cmp	r3, #96	; 0x60
 8003666:	d877      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003668:	2b50      	cmp	r3, #80	; 0x50
 800366a:	d03c      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xf6>
 800366c:	2b50      	cmp	r3, #80	; 0x50
 800366e:	d873      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d058      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x136>
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d86f      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003678:	2b30      	cmp	r3, #48	; 0x30
 800367a:	d064      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x156>
 800367c:	2b30      	cmp	r3, #48	; 0x30
 800367e:	d86b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003680:	2b20      	cmp	r3, #32
 8003682:	d060      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x156>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d867      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05c      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x156>
 800368c:	2b10      	cmp	r3, #16
 800368e:	d05a      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003690:	e062      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f000 f942 	bl	800392a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	609a      	str	r2, [r3, #8]
      break;
 80036be:	e04e      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6899      	ldr	r1, [r3, #8]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f000 f92b 	bl	800392a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036e2:	609a      	str	r2, [r3, #8]
      break;
 80036e4:	e03b      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 f8a2 	bl	800383c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2150      	movs	r1, #80	; 0x50
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f8f9 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003704:	e02b      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	461a      	mov	r2, r3
 8003714:	f000 f8c0 	bl	8003898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2160      	movs	r1, #96	; 0x60
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f8e9 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003724:	e01b      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	461a      	mov	r2, r3
 8003734:	f000 f882 	bl	800383c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f8d9 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003744:	e00b      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f000 f8d0 	bl	80038f6 <TIM_ITRx_SetConfig>
        break;
 8003756:	e002      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003758:	bf00      	nop
 800375a:	e000      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800375c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a29      	ldr	r2, [pc, #164]	; (8003830 <TIM_Base_SetConfig+0xb8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00b      	beq.n	80037a8 <TIM_Base_SetConfig+0x30>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d007      	beq.n	80037a8 <TIM_Base_SetConfig+0x30>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a26      	ldr	r2, [pc, #152]	; (8003834 <TIM_Base_SetConfig+0xbc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d003      	beq.n	80037a8 <TIM_Base_SetConfig+0x30>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <TIM_Base_SetConfig+0xc0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d108      	bne.n	80037ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <TIM_Base_SetConfig+0xb8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00b      	beq.n	80037da <TIM_Base_SetConfig+0x62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d007      	beq.n	80037da <TIM_Base_SetConfig+0x62>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <TIM_Base_SetConfig+0xbc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0x62>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a18      	ldr	r2, [pc, #96]	; (8003838 <TIM_Base_SetConfig+0xc0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <TIM_Base_SetConfig+0xb8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d103      	bne.n	8003820 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	615a      	str	r2, [r3, #20]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800

0800383c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0201 	bic.w	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 030a 	bic.w	r3, r3, #10
 8003878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f023 0210 	bic.w	r2, r3, #16
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	031b      	lsls	r3, r3, #12
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	f043 0307 	orr.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392a:	b480      	push	{r7}
 800392c:	b087      	sub	sp, #28
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	021a      	lsls	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	431a      	orrs	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4313      	orrs	r3, r2
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	609a      	str	r2, [r3, #8]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e046      	b.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d009      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10c      	bne.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800

08003a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e03f      	b.n	8003ab6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe fb2e 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fcc7 	bl	80043fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b08a      	sub	sp, #40	; 0x28
 8003ac2:	af02      	add	r7, sp, #8
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d17c      	bne.n	8003bd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_Transmit+0x2c>
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e075      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_UART_Transmit+0x3e>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e06e      	b.n	8003bda <HAL_UART_Transmit+0x11c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b12:	f7fe fcf7 	bl	8002504 <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d108      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e003      	b.n	8003b48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b50:	e02a      	b.n	8003ba8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fab3 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e036      	b.n	8003bda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e007      	b.n	8003b9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cf      	bne.n	8003b52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fa83 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e006      	b.n	8003bda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b08a      	sub	sp, #40	; 0x28
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	f040 808c 	bne.w	8003d1c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_UART_Receive+0x2e>
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e084      	b.n	8003d1e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Receive+0x40>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e07d      	b.n	8003d1e <HAL_UART_Receive+0x13c>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2222      	movs	r2, #34	; 0x22
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c3e:	f7fe fc61 	bl	8002504 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	d108      	bne.n	8003c6c <HAL_UART_Receive+0x8a>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e003      	b.n	8003c74 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c7c:	e043      	b.n	8003d06 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2120      	movs	r1, #32
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fa1d 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e042      	b.n	8003d1e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e01f      	b.n	8003cf8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d007      	beq.n	8003cd2 <HAL_UART_Receive+0xf0>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_UART_Receive+0xfe>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e008      	b.n	8003cf2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1b6      	bne.n	8003c7e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_UART_IRQHandler+0x52>
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa99 	bl	80042aa <UART_Receive_IT>
      return;
 8003d78:	e17b      	b.n	8004072 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80b1 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x1bc>
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_UART_IRQHandler+0x70>
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80a6 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_UART_IRQHandler+0x90>
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_UART_IRQHandler+0xb0>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f043 0202 	orr.w	r2, r3, #2
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_UART_IRQHandler+0xd0>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f043 0204 	orr.w	r2, r3, #4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00f      	beq.n	8003e22 <HAL_UART_IRQHandler+0xfa>
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <HAL_UART_IRQHandler+0xee>
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f043 0208 	orr.w	r2, r3, #8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 811e 	beq.w	8004068 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <HAL_UART_IRQHandler+0x11e>
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fa32 	bl	80042aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf14      	ite	ne
 8003e54:	2301      	movne	r3, #1
 8003e56:	2300      	moveq	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <HAL_UART_IRQHandler+0x146>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d031      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f974 	bl	800415c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d023      	beq.n	8003eca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d013      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	4a76      	ldr	r2, [pc, #472]	; (8004078 <HAL_UART_IRQHandler+0x350>)
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fca2 	bl	80027f0 <HAL_DMA_Abort_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	e00e      	b.n	8003ee0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8ec 	bl	80040a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	e00a      	b.n	8003ee0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f8e8 	bl	80040a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e006      	b.n	8003ee0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8e4 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ede:	e0c3      	b.n	8004068 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	bf00      	nop
    return;
 8003ee2:	e0c1      	b.n	8004068 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	f040 80a1 	bne.w	8004030 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 809b 	beq.w	8004030 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8095 	beq.w	8004030 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d04e      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f34:	8a3b      	ldrh	r3, [r7, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8098 	beq.w	800406c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f40:	8a3a      	ldrh	r2, [r7, #16]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	f080 8092 	bcs.w	800406c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8a3a      	ldrh	r2, [r7, #16]
 8003f4c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d02b      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f66:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f86:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0210 	bic.w	r2, r2, #16
 8003fa4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe fbe5 	bl	800277a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f876 	bl	80040b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fc6:	e051      	b.n	800406c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d047      	beq.n	8004070 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003fe0:	8a7b      	ldrh	r3, [r7, #18]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d044      	beq.n	8004070 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ff4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0210 	bic.w	r2, r2, #16
 8004022:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004024:	8a7b      	ldrh	r3, [r7, #18]
 8004026:	4619      	mov	r1, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f842 	bl	80040b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800402e:	e01f      	b.n	8004070 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_UART_IRQHandler+0x324>
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f8c9 	bl	80041dc <UART_Transmit_IT>
    return;
 800404a:	e012      	b.n	8004072 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <HAL_UART_IRQHandler+0x34a>
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f90a 	bl	800427a <UART_EndTransmit_IT>
    return;
 8004066:	e004      	b.n	8004072 <HAL_UART_IRQHandler+0x34a>
    return;
 8004068:	bf00      	nop
 800406a:	e002      	b.n	8004072 <HAL_UART_IRQHandler+0x34a>
      return;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_UART_IRQHandler+0x34a>
      return;
 8004070:	bf00      	nop
  }
}
 8004072:	3728      	adds	r7, #40	; 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	080041b5 	.word	0x080041b5

0800407c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d8:	e02c      	b.n	8004134 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d028      	beq.n	8004134 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040e8:	f7fe fa0c 	bl	8002504 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d21d      	bcs.n	8004134 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004106:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e00f      	b.n	8004154 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4013      	ands	r3, r2
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	429a      	cmp	r2, r3
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	429a      	cmp	r2, r3
 8004150:	d0c3      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004172:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0210 	bic.w	r2, r2, #16
 800419a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff ff66 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b21      	cmp	r3, #33	; 0x21
 80041ee:	d13e      	bne.n	800426e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f8:	d114      	bne.n	8004224 <UART_Transmit_IT+0x48>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d110      	bne.n	8004224 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004216:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]
 8004222:	e008      	b.n	8004236 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	1c59      	adds	r1, r3, #1
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6211      	str	r1, [r2, #32]
 800422e:	781a      	ldrb	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4619      	mov	r1, r3
 8004244:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004258:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004268:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004290:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff feee 	bl	800407c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b22      	cmp	r3, #34	; 0x22
 80042bc:	f040 8099 	bne.w	80043f2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c8:	d117      	bne.n	80042fa <UART_Receive_IT+0x50>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d113      	bne.n	80042fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	1c9a      	adds	r2, r3, #2
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
 80042f8:	e026      	b.n	8004348 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430c:	d007      	beq.n	800431e <UART_Receive_IT+0x74>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <UART_Receive_IT+0x82>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	e008      	b.n	800433e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004338:	b2da      	uxtb	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29b      	uxth	r3, r3
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4619      	mov	r1, r3
 8004356:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004358:	2b00      	cmp	r3, #0
 800435a:	d148      	bne.n	80043ee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0220 	bic.w	r2, r2, #32
 800436a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800437a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	2b01      	cmp	r3, #1
 800439a:	d123      	bne.n	80043e4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0210 	bic.w	r2, r2, #16
 80043b0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d10a      	bne.n	80043d6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fe68 	bl	80040b2 <HAL_UARTEx_RxEventCallback>
 80043e2:	e002      	b.n	80043ea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fe52 	bl	800408e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e002      	b.n	80043f4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
  }
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004436:	f023 030c 	bic.w	r3, r3, #12
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	430b      	orrs	r3, r1
 8004442:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2c      	ldr	r2, [pc, #176]	; (8004510 <UART_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d103      	bne.n	800446c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7fe fff8 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	e002      	b.n	8004472 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7fe ffe0 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 8004470:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009a      	lsls	r2, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	4a22      	ldr	r2, [pc, #136]	; (8004514 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	0119      	lsls	r1, r3, #4
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <UART_SetConfig+0x118>)
 80044aa:	fba3 0302 	umull	r0, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2064      	movs	r0, #100	; 0x64
 80044b2:	fb00 f303 	mul.w	r3, r0, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	; 0x32
 80044bc:	4a15      	ldr	r2, [pc, #84]	; (8004514 <UART_SetConfig+0x118>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c8:	4419      	add	r1, r3
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009a      	lsls	r2, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <UART_SetConfig+0x118>)
 80044e2:	fba3 0302 	umull	r0, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2064      	movs	r0, #100	; 0x64
 80044ea:	fb00 f303 	mul.w	r3, r0, r3
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	3332      	adds	r3, #50	; 0x32
 80044f4:	4a07      	ldr	r2, [pc, #28]	; (8004514 <UART_SetConfig+0x118>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	440a      	add	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40013800 	.word	0x40013800
 8004514:	51eb851f 	.word	0x51eb851f

08004518 <__errno>:
 8004518:	4b01      	ldr	r3, [pc, #4]	; (8004520 <__errno+0x8>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	2000000c 	.word	0x2000000c

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	2600      	movs	r6, #0
 8004528:	4d0c      	ldr	r5, [pc, #48]	; (800455c <__libc_init_array+0x38>)
 800452a:	4c0d      	ldr	r4, [pc, #52]	; (8004560 <__libc_init_array+0x3c>)
 800452c:	1b64      	subs	r4, r4, r5
 800452e:	10a4      	asrs	r4, r4, #2
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	f002 ff40 	bl	80073b8 <_init>
 8004538:	2600      	movs	r6, #0
 800453a:	4d0a      	ldr	r5, [pc, #40]	; (8004564 <__libc_init_array+0x40>)
 800453c:	4c0a      	ldr	r4, [pc, #40]	; (8004568 <__libc_init_array+0x44>)
 800453e:	1b64      	subs	r4, r4, r5
 8004540:	10a4      	asrs	r4, r4, #2
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	f855 3b04 	ldr.w	r3, [r5], #4
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	f855 3b04 	ldr.w	r3, [r5], #4
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	08007b1c 	.word	0x08007b1c
 8004560:	08007b1c 	.word	0x08007b1c
 8004564:	08007b1c 	.word	0x08007b1c
 8004568:	08007b20 	.word	0x08007b20

0800456c <memcpy>:
 800456c:	440a      	add	r2, r1
 800456e:	4291      	cmp	r1, r2
 8004570:	f100 33ff 	add.w	r3, r0, #4294967295
 8004574:	d100      	bne.n	8004578 <memcpy+0xc>
 8004576:	4770      	bx	lr
 8004578:	b510      	push	{r4, lr}
 800457a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457e:	4291      	cmp	r1, r2
 8004580:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004584:	d1f9      	bne.n	800457a <memcpy+0xe>
 8004586:	bd10      	pop	{r4, pc}

08004588 <memset>:
 8004588:	4603      	mov	r3, r0
 800458a:	4402      	add	r2, r0
 800458c:	4293      	cmp	r3, r2
 800458e:	d100      	bne.n	8004592 <memset+0xa>
 8004590:	4770      	bx	lr
 8004592:	f803 1b01 	strb.w	r1, [r3], #1
 8004596:	e7f9      	b.n	800458c <memset+0x4>

08004598 <__cvt>:
 8004598:	2b00      	cmp	r3, #0
 800459a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459e:	461f      	mov	r7, r3
 80045a0:	bfbb      	ittet	lt
 80045a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80045a6:	461f      	movlt	r7, r3
 80045a8:	2300      	movge	r3, #0
 80045aa:	232d      	movlt	r3, #45	; 0x2d
 80045ac:	b088      	sub	sp, #32
 80045ae:	4614      	mov	r4, r2
 80045b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80045b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80045b4:	7013      	strb	r3, [r2, #0]
 80045b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80045b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80045bc:	f023 0820 	bic.w	r8, r3, #32
 80045c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045c4:	d005      	beq.n	80045d2 <__cvt+0x3a>
 80045c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045ca:	d100      	bne.n	80045ce <__cvt+0x36>
 80045cc:	3501      	adds	r5, #1
 80045ce:	2302      	movs	r3, #2
 80045d0:	e000      	b.n	80045d4 <__cvt+0x3c>
 80045d2:	2303      	movs	r3, #3
 80045d4:	aa07      	add	r2, sp, #28
 80045d6:	9204      	str	r2, [sp, #16]
 80045d8:	aa06      	add	r2, sp, #24
 80045da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045de:	e9cd 3500 	strd	r3, r5, [sp]
 80045e2:	4622      	mov	r2, r4
 80045e4:	463b      	mov	r3, r7
 80045e6:	f000 fd47 	bl	8005078 <_dtoa_r>
 80045ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045ee:	4606      	mov	r6, r0
 80045f0:	d102      	bne.n	80045f8 <__cvt+0x60>
 80045f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045f4:	07db      	lsls	r3, r3, #31
 80045f6:	d522      	bpl.n	800463e <__cvt+0xa6>
 80045f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045fc:	eb06 0905 	add.w	r9, r6, r5
 8004600:	d110      	bne.n	8004624 <__cvt+0x8c>
 8004602:	7833      	ldrb	r3, [r6, #0]
 8004604:	2b30      	cmp	r3, #48	; 0x30
 8004606:	d10a      	bne.n	800461e <__cvt+0x86>
 8004608:	2200      	movs	r2, #0
 800460a:	2300      	movs	r3, #0
 800460c:	4620      	mov	r0, r4
 800460e:	4639      	mov	r1, r7
 8004610:	f7fc f9ca 	bl	80009a8 <__aeabi_dcmpeq>
 8004614:	b918      	cbnz	r0, 800461e <__cvt+0x86>
 8004616:	f1c5 0501 	rsb	r5, r5, #1
 800461a:	f8ca 5000 	str.w	r5, [sl]
 800461e:	f8da 3000 	ldr.w	r3, [sl]
 8004622:	4499      	add	r9, r3
 8004624:	2200      	movs	r2, #0
 8004626:	2300      	movs	r3, #0
 8004628:	4620      	mov	r0, r4
 800462a:	4639      	mov	r1, r7
 800462c:	f7fc f9bc 	bl	80009a8 <__aeabi_dcmpeq>
 8004630:	b108      	cbz	r0, 8004636 <__cvt+0x9e>
 8004632:	f8cd 901c 	str.w	r9, [sp, #28]
 8004636:	2230      	movs	r2, #48	; 0x30
 8004638:	9b07      	ldr	r3, [sp, #28]
 800463a:	454b      	cmp	r3, r9
 800463c:	d307      	bcc.n	800464e <__cvt+0xb6>
 800463e:	4630      	mov	r0, r6
 8004640:	9b07      	ldr	r3, [sp, #28]
 8004642:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004644:	1b9b      	subs	r3, r3, r6
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	b008      	add	sp, #32
 800464a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	9107      	str	r1, [sp, #28]
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e7f0      	b.n	8004638 <__cvt+0xa0>

08004656 <__exponent>:
 8004656:	4603      	mov	r3, r0
 8004658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800465a:	2900      	cmp	r1, #0
 800465c:	f803 2b02 	strb.w	r2, [r3], #2
 8004660:	bfb6      	itet	lt
 8004662:	222d      	movlt	r2, #45	; 0x2d
 8004664:	222b      	movge	r2, #43	; 0x2b
 8004666:	4249      	neglt	r1, r1
 8004668:	2909      	cmp	r1, #9
 800466a:	7042      	strb	r2, [r0, #1]
 800466c:	dd2b      	ble.n	80046c6 <__exponent+0x70>
 800466e:	f10d 0407 	add.w	r4, sp, #7
 8004672:	46a4      	mov	ip, r4
 8004674:	270a      	movs	r7, #10
 8004676:	fb91 f6f7 	sdiv	r6, r1, r7
 800467a:	460a      	mov	r2, r1
 800467c:	46a6      	mov	lr, r4
 800467e:	fb07 1516 	mls	r5, r7, r6, r1
 8004682:	2a63      	cmp	r2, #99	; 0x63
 8004684:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004688:	4631      	mov	r1, r6
 800468a:	f104 34ff 	add.w	r4, r4, #4294967295
 800468e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004692:	dcf0      	bgt.n	8004676 <__exponent+0x20>
 8004694:	3130      	adds	r1, #48	; 0x30
 8004696:	f1ae 0502 	sub.w	r5, lr, #2
 800469a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800469e:	4629      	mov	r1, r5
 80046a0:	1c44      	adds	r4, r0, #1
 80046a2:	4561      	cmp	r1, ip
 80046a4:	d30a      	bcc.n	80046bc <__exponent+0x66>
 80046a6:	f10d 0209 	add.w	r2, sp, #9
 80046aa:	eba2 020e 	sub.w	r2, r2, lr
 80046ae:	4565      	cmp	r5, ip
 80046b0:	bf88      	it	hi
 80046b2:	2200      	movhi	r2, #0
 80046b4:	4413      	add	r3, r2
 80046b6:	1a18      	subs	r0, r3, r0
 80046b8:	b003      	add	sp, #12
 80046ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046c4:	e7ed      	b.n	80046a2 <__exponent+0x4c>
 80046c6:	2330      	movs	r3, #48	; 0x30
 80046c8:	3130      	adds	r1, #48	; 0x30
 80046ca:	7083      	strb	r3, [r0, #2]
 80046cc:	70c1      	strb	r1, [r0, #3]
 80046ce:	1d03      	adds	r3, r0, #4
 80046d0:	e7f1      	b.n	80046b6 <__exponent+0x60>
	...

080046d4 <_printf_float>:
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	b091      	sub	sp, #68	; 0x44
 80046da:	460c      	mov	r4, r1
 80046dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80046e0:	4616      	mov	r6, r2
 80046e2:	461f      	mov	r7, r3
 80046e4:	4605      	mov	r5, r0
 80046e6:	f001 fac7 	bl	8005c78 <_localeconv_r>
 80046ea:	6803      	ldr	r3, [r0, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	9309      	str	r3, [sp, #36]	; 0x24
 80046f0:	f7fb fd2e 	bl	8000150 <strlen>
 80046f4:	2300      	movs	r3, #0
 80046f6:	930e      	str	r3, [sp, #56]	; 0x38
 80046f8:	f8d8 3000 	ldr.w	r3, [r8]
 80046fc:	900a      	str	r0, [sp, #40]	; 0x28
 80046fe:	3307      	adds	r3, #7
 8004700:	f023 0307 	bic.w	r3, r3, #7
 8004704:	f103 0208 	add.w	r2, r3, #8
 8004708:	f894 9018 	ldrb.w	r9, [r4, #24]
 800470c:	f8d4 b000 	ldr.w	fp, [r4]
 8004710:	f8c8 2000 	str.w	r2, [r8]
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800471c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004720:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004724:	930b      	str	r3, [sp, #44]	; 0x2c
 8004726:	f04f 32ff 	mov.w	r2, #4294967295
 800472a:	4640      	mov	r0, r8
 800472c:	4b9c      	ldr	r3, [pc, #624]	; (80049a0 <_printf_float+0x2cc>)
 800472e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004730:	f7fc f96c 	bl	8000a0c <__aeabi_dcmpun>
 8004734:	bb70      	cbnz	r0, 8004794 <_printf_float+0xc0>
 8004736:	f04f 32ff 	mov.w	r2, #4294967295
 800473a:	4640      	mov	r0, r8
 800473c:	4b98      	ldr	r3, [pc, #608]	; (80049a0 <_printf_float+0x2cc>)
 800473e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004740:	f7fc f946 	bl	80009d0 <__aeabi_dcmple>
 8004744:	bb30      	cbnz	r0, 8004794 <_printf_float+0xc0>
 8004746:	2200      	movs	r2, #0
 8004748:	2300      	movs	r3, #0
 800474a:	4640      	mov	r0, r8
 800474c:	4651      	mov	r1, sl
 800474e:	f7fc f935 	bl	80009bc <__aeabi_dcmplt>
 8004752:	b110      	cbz	r0, 800475a <_printf_float+0x86>
 8004754:	232d      	movs	r3, #45	; 0x2d
 8004756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800475a:	4b92      	ldr	r3, [pc, #584]	; (80049a4 <_printf_float+0x2d0>)
 800475c:	4892      	ldr	r0, [pc, #584]	; (80049a8 <_printf_float+0x2d4>)
 800475e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004762:	bf94      	ite	ls
 8004764:	4698      	movls	r8, r3
 8004766:	4680      	movhi	r8, r0
 8004768:	2303      	movs	r3, #3
 800476a:	f04f 0a00 	mov.w	sl, #0
 800476e:	6123      	str	r3, [r4, #16]
 8004770:	f02b 0304 	bic.w	r3, fp, #4
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	4633      	mov	r3, r6
 8004778:	4621      	mov	r1, r4
 800477a:	4628      	mov	r0, r5
 800477c:	9700      	str	r7, [sp, #0]
 800477e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004780:	f000 f9d4 	bl	8004b2c <_printf_common>
 8004784:	3001      	adds	r0, #1
 8004786:	f040 8090 	bne.w	80048aa <_printf_float+0x1d6>
 800478a:	f04f 30ff 	mov.w	r0, #4294967295
 800478e:	b011      	add	sp, #68	; 0x44
 8004790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004794:	4642      	mov	r2, r8
 8004796:	4653      	mov	r3, sl
 8004798:	4640      	mov	r0, r8
 800479a:	4651      	mov	r1, sl
 800479c:	f7fc f936 	bl	8000a0c <__aeabi_dcmpun>
 80047a0:	b148      	cbz	r0, 80047b6 <_printf_float+0xe2>
 80047a2:	f1ba 0f00 	cmp.w	sl, #0
 80047a6:	bfb8      	it	lt
 80047a8:	232d      	movlt	r3, #45	; 0x2d
 80047aa:	4880      	ldr	r0, [pc, #512]	; (80049ac <_printf_float+0x2d8>)
 80047ac:	bfb8      	it	lt
 80047ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047b2:	4b7f      	ldr	r3, [pc, #508]	; (80049b0 <_printf_float+0x2dc>)
 80047b4:	e7d3      	b.n	800475e <_printf_float+0x8a>
 80047b6:	6863      	ldr	r3, [r4, #4]
 80047b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	d142      	bne.n	8004846 <_printf_float+0x172>
 80047c0:	2306      	movs	r3, #6
 80047c2:	6063      	str	r3, [r4, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	9206      	str	r2, [sp, #24]
 80047c8:	aa0e      	add	r2, sp, #56	; 0x38
 80047ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80047ce:	aa0d      	add	r2, sp, #52	; 0x34
 80047d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80047d4:	9203      	str	r2, [sp, #12]
 80047d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80047da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	4642      	mov	r2, r8
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	4628      	mov	r0, r5
 80047e8:	4653      	mov	r3, sl
 80047ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80047ec:	f7ff fed4 	bl	8004598 <__cvt>
 80047f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047f2:	4680      	mov	r8, r0
 80047f4:	2947      	cmp	r1, #71	; 0x47
 80047f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047f8:	d108      	bne.n	800480c <_printf_float+0x138>
 80047fa:	1cc8      	adds	r0, r1, #3
 80047fc:	db02      	blt.n	8004804 <_printf_float+0x130>
 80047fe:	6863      	ldr	r3, [r4, #4]
 8004800:	4299      	cmp	r1, r3
 8004802:	dd40      	ble.n	8004886 <_printf_float+0x1b2>
 8004804:	f1a9 0902 	sub.w	r9, r9, #2
 8004808:	fa5f f989 	uxtb.w	r9, r9
 800480c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004810:	d81f      	bhi.n	8004852 <_printf_float+0x17e>
 8004812:	464a      	mov	r2, r9
 8004814:	3901      	subs	r1, #1
 8004816:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800481a:	910d      	str	r1, [sp, #52]	; 0x34
 800481c:	f7ff ff1b 	bl	8004656 <__exponent>
 8004820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004822:	4682      	mov	sl, r0
 8004824:	1813      	adds	r3, r2, r0
 8004826:	2a01      	cmp	r2, #1
 8004828:	6123      	str	r3, [r4, #16]
 800482a:	dc02      	bgt.n	8004832 <_printf_float+0x15e>
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	07d2      	lsls	r2, r2, #31
 8004830:	d501      	bpl.n	8004836 <_printf_float+0x162>
 8004832:	3301      	adds	r3, #1
 8004834:	6123      	str	r3, [r4, #16]
 8004836:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800483a:	2b00      	cmp	r3, #0
 800483c:	d09b      	beq.n	8004776 <_printf_float+0xa2>
 800483e:	232d      	movs	r3, #45	; 0x2d
 8004840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004844:	e797      	b.n	8004776 <_printf_float+0xa2>
 8004846:	2947      	cmp	r1, #71	; 0x47
 8004848:	d1bc      	bne.n	80047c4 <_printf_float+0xf0>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1ba      	bne.n	80047c4 <_printf_float+0xf0>
 800484e:	2301      	movs	r3, #1
 8004850:	e7b7      	b.n	80047c2 <_printf_float+0xee>
 8004852:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004856:	d118      	bne.n	800488a <_printf_float+0x1b6>
 8004858:	2900      	cmp	r1, #0
 800485a:	6863      	ldr	r3, [r4, #4]
 800485c:	dd0b      	ble.n	8004876 <_printf_float+0x1a2>
 800485e:	6121      	str	r1, [r4, #16]
 8004860:	b913      	cbnz	r3, 8004868 <_printf_float+0x194>
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	07d0      	lsls	r0, r2, #31
 8004866:	d502      	bpl.n	800486e <_printf_float+0x19a>
 8004868:	3301      	adds	r3, #1
 800486a:	440b      	add	r3, r1
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	f04f 0a00 	mov.w	sl, #0
 8004872:	65a1      	str	r1, [r4, #88]	; 0x58
 8004874:	e7df      	b.n	8004836 <_printf_float+0x162>
 8004876:	b913      	cbnz	r3, 800487e <_printf_float+0x1aa>
 8004878:	6822      	ldr	r2, [r4, #0]
 800487a:	07d2      	lsls	r2, r2, #31
 800487c:	d501      	bpl.n	8004882 <_printf_float+0x1ae>
 800487e:	3302      	adds	r3, #2
 8004880:	e7f4      	b.n	800486c <_printf_float+0x198>
 8004882:	2301      	movs	r3, #1
 8004884:	e7f2      	b.n	800486c <_printf_float+0x198>
 8004886:	f04f 0967 	mov.w	r9, #103	; 0x67
 800488a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800488c:	4299      	cmp	r1, r3
 800488e:	db05      	blt.n	800489c <_printf_float+0x1c8>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	6121      	str	r1, [r4, #16]
 8004894:	07d8      	lsls	r0, r3, #31
 8004896:	d5ea      	bpl.n	800486e <_printf_float+0x19a>
 8004898:	1c4b      	adds	r3, r1, #1
 800489a:	e7e7      	b.n	800486c <_printf_float+0x198>
 800489c:	2900      	cmp	r1, #0
 800489e:	bfcc      	ite	gt
 80048a0:	2201      	movgt	r2, #1
 80048a2:	f1c1 0202 	rsble	r2, r1, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	e7e0      	b.n	800486c <_printf_float+0x198>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	055a      	lsls	r2, r3, #21
 80048ae:	d407      	bmi.n	80048c0 <_printf_float+0x1ec>
 80048b0:	6923      	ldr	r3, [r4, #16]
 80048b2:	4642      	mov	r2, r8
 80048b4:	4631      	mov	r1, r6
 80048b6:	4628      	mov	r0, r5
 80048b8:	47b8      	blx	r7
 80048ba:	3001      	adds	r0, #1
 80048bc:	d12b      	bne.n	8004916 <_printf_float+0x242>
 80048be:	e764      	b.n	800478a <_printf_float+0xb6>
 80048c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80048c4:	f240 80dd 	bls.w	8004a82 <_printf_float+0x3ae>
 80048c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048cc:	2200      	movs	r2, #0
 80048ce:	2300      	movs	r3, #0
 80048d0:	f7fc f86a 	bl	80009a8 <__aeabi_dcmpeq>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d033      	beq.n	8004940 <_printf_float+0x26c>
 80048d8:	2301      	movs	r3, #1
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	4a35      	ldr	r2, [pc, #212]	; (80049b4 <_printf_float+0x2e0>)
 80048e0:	47b8      	blx	r7
 80048e2:	3001      	adds	r0, #1
 80048e4:	f43f af51 	beq.w	800478a <_printf_float+0xb6>
 80048e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048ec:	429a      	cmp	r2, r3
 80048ee:	db02      	blt.n	80048f6 <_printf_float+0x222>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	07d8      	lsls	r0, r3, #31
 80048f4:	d50f      	bpl.n	8004916 <_printf_float+0x242>
 80048f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048fa:	4631      	mov	r1, r6
 80048fc:	4628      	mov	r0, r5
 80048fe:	47b8      	blx	r7
 8004900:	3001      	adds	r0, #1
 8004902:	f43f af42 	beq.w	800478a <_printf_float+0xb6>
 8004906:	f04f 0800 	mov.w	r8, #0
 800490a:	f104 091a 	add.w	r9, r4, #26
 800490e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004910:	3b01      	subs	r3, #1
 8004912:	4543      	cmp	r3, r8
 8004914:	dc09      	bgt.n	800492a <_printf_float+0x256>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	079b      	lsls	r3, r3, #30
 800491a:	f100 8102 	bmi.w	8004b22 <_printf_float+0x44e>
 800491e:	68e0      	ldr	r0, [r4, #12]
 8004920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004922:	4298      	cmp	r0, r3
 8004924:	bfb8      	it	lt
 8004926:	4618      	movlt	r0, r3
 8004928:	e731      	b.n	800478e <_printf_float+0xba>
 800492a:	2301      	movs	r3, #1
 800492c:	464a      	mov	r2, r9
 800492e:	4631      	mov	r1, r6
 8004930:	4628      	mov	r0, r5
 8004932:	47b8      	blx	r7
 8004934:	3001      	adds	r0, #1
 8004936:	f43f af28 	beq.w	800478a <_printf_float+0xb6>
 800493a:	f108 0801 	add.w	r8, r8, #1
 800493e:	e7e6      	b.n	800490e <_printf_float+0x23a>
 8004940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004942:	2b00      	cmp	r3, #0
 8004944:	dc38      	bgt.n	80049b8 <_printf_float+0x2e4>
 8004946:	2301      	movs	r3, #1
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <_printf_float+0x2e0>)
 800494e:	47b8      	blx	r7
 8004950:	3001      	adds	r0, #1
 8004952:	f43f af1a 	beq.w	800478a <_printf_float+0xb6>
 8004956:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800495a:	4313      	orrs	r3, r2
 800495c:	d102      	bne.n	8004964 <_printf_float+0x290>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	07d9      	lsls	r1, r3, #31
 8004962:	d5d8      	bpl.n	8004916 <_printf_float+0x242>
 8004964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f af0b 	beq.w	800478a <_printf_float+0xb6>
 8004974:	f04f 0900 	mov.w	r9, #0
 8004978:	f104 0a1a 	add.w	sl, r4, #26
 800497c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800497e:	425b      	negs	r3, r3
 8004980:	454b      	cmp	r3, r9
 8004982:	dc01      	bgt.n	8004988 <_printf_float+0x2b4>
 8004984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004986:	e794      	b.n	80048b2 <_printf_float+0x1de>
 8004988:	2301      	movs	r3, #1
 800498a:	4652      	mov	r2, sl
 800498c:	4631      	mov	r1, r6
 800498e:	4628      	mov	r0, r5
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	f43f aef9 	beq.w	800478a <_printf_float+0xb6>
 8004998:	f109 0901 	add.w	r9, r9, #1
 800499c:	e7ee      	b.n	800497c <_printf_float+0x2a8>
 800499e:	bf00      	nop
 80049a0:	7fefffff 	.word	0x7fefffff
 80049a4:	080076dc 	.word	0x080076dc
 80049a8:	080076e0 	.word	0x080076e0
 80049ac:	080076e8 	.word	0x080076e8
 80049b0:	080076e4 	.word	0x080076e4
 80049b4:	080076ec 	.word	0x080076ec
 80049b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049bc:	429a      	cmp	r2, r3
 80049be:	bfa8      	it	ge
 80049c0:	461a      	movge	r2, r3
 80049c2:	2a00      	cmp	r2, #0
 80049c4:	4691      	mov	r9, r2
 80049c6:	dc37      	bgt.n	8004a38 <_printf_float+0x364>
 80049c8:	f04f 0b00 	mov.w	fp, #0
 80049cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049d0:	f104 021a 	add.w	r2, r4, #26
 80049d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80049d8:	ebaa 0309 	sub.w	r3, sl, r9
 80049dc:	455b      	cmp	r3, fp
 80049de:	dc33      	bgt.n	8004a48 <_printf_float+0x374>
 80049e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049e4:	429a      	cmp	r2, r3
 80049e6:	db3b      	blt.n	8004a60 <_printf_float+0x38c>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	07da      	lsls	r2, r3, #31
 80049ec:	d438      	bmi.n	8004a60 <_printf_float+0x38c>
 80049ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049f2:	eba3 020a 	sub.w	r2, r3, sl
 80049f6:	eba3 0901 	sub.w	r9, r3, r1
 80049fa:	4591      	cmp	r9, r2
 80049fc:	bfa8      	it	ge
 80049fe:	4691      	movge	r9, r2
 8004a00:	f1b9 0f00 	cmp.w	r9, #0
 8004a04:	dc34      	bgt.n	8004a70 <_printf_float+0x39c>
 8004a06:	f04f 0800 	mov.w	r8, #0
 8004a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a0e:	f104 0a1a 	add.w	sl, r4, #26
 8004a12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	eba3 0309 	sub.w	r3, r3, r9
 8004a1c:	4543      	cmp	r3, r8
 8004a1e:	f77f af7a 	ble.w	8004916 <_printf_float+0x242>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4652      	mov	r2, sl
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f aeac 	beq.w	800478a <_printf_float+0xb6>
 8004a32:	f108 0801 	add.w	r8, r8, #1
 8004a36:	e7ec      	b.n	8004a12 <_printf_float+0x33e>
 8004a38:	4613      	mov	r3, r2
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	4628      	mov	r0, r5
 8004a40:	47b8      	blx	r7
 8004a42:	3001      	adds	r0, #1
 8004a44:	d1c0      	bne.n	80049c8 <_printf_float+0x2f4>
 8004a46:	e6a0      	b.n	800478a <_printf_float+0xb6>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	f43f ae99 	beq.w	800478a <_printf_float+0xb6>
 8004a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a5a:	f10b 0b01 	add.w	fp, fp, #1
 8004a5e:	e7b9      	b.n	80049d4 <_printf_float+0x300>
 8004a60:	4631      	mov	r1, r6
 8004a62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b8      	blx	r7
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d1bf      	bne.n	80049ee <_printf_float+0x31a>
 8004a6e:	e68c      	b.n	800478a <_printf_float+0xb6>
 8004a70:	464b      	mov	r3, r9
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	eb08 020a 	add.w	r2, r8, sl
 8004a7a:	47b8      	blx	r7
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d1c2      	bne.n	8004a06 <_printf_float+0x332>
 8004a80:	e683      	b.n	800478a <_printf_float+0xb6>
 8004a82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a84:	2a01      	cmp	r2, #1
 8004a86:	dc01      	bgt.n	8004a8c <_printf_float+0x3b8>
 8004a88:	07db      	lsls	r3, r3, #31
 8004a8a:	d537      	bpl.n	8004afc <_printf_float+0x428>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4642      	mov	r2, r8
 8004a90:	4631      	mov	r1, r6
 8004a92:	4628      	mov	r0, r5
 8004a94:	47b8      	blx	r7
 8004a96:	3001      	adds	r0, #1
 8004a98:	f43f ae77 	beq.w	800478a <_printf_float+0xb6>
 8004a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f ae6f 	beq.w	800478a <_printf_float+0xb6>
 8004aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f7fb ff78 	bl	80009a8 <__aeabi_dcmpeq>
 8004ab8:	b9d8      	cbnz	r0, 8004af2 <_printf_float+0x41e>
 8004aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004abc:	f108 0201 	add.w	r2, r8, #1
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d10e      	bne.n	8004aea <_printf_float+0x416>
 8004acc:	e65d      	b.n	800478a <_printf_float+0xb6>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	464a      	mov	r2, r9
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b8      	blx	r7
 8004ad8:	3001      	adds	r0, #1
 8004ada:	f43f ae56 	beq.w	800478a <_printf_float+0xb6>
 8004ade:	f108 0801 	add.w	r8, r8, #1
 8004ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	4543      	cmp	r3, r8
 8004ae8:	dcf1      	bgt.n	8004ace <_printf_float+0x3fa>
 8004aea:	4653      	mov	r3, sl
 8004aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004af0:	e6e0      	b.n	80048b4 <_printf_float+0x1e0>
 8004af2:	f04f 0800 	mov.w	r8, #0
 8004af6:	f104 091a 	add.w	r9, r4, #26
 8004afa:	e7f2      	b.n	8004ae2 <_printf_float+0x40e>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4642      	mov	r2, r8
 8004b00:	e7df      	b.n	8004ac2 <_printf_float+0x3ee>
 8004b02:	2301      	movs	r3, #1
 8004b04:	464a      	mov	r2, r9
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b8      	blx	r7
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f43f ae3c 	beq.w	800478a <_printf_float+0xb6>
 8004b12:	f108 0801 	add.w	r8, r8, #1
 8004b16:	68e3      	ldr	r3, [r4, #12]
 8004b18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b1a:	1a5b      	subs	r3, r3, r1
 8004b1c:	4543      	cmp	r3, r8
 8004b1e:	dcf0      	bgt.n	8004b02 <_printf_float+0x42e>
 8004b20:	e6fd      	b.n	800491e <_printf_float+0x24a>
 8004b22:	f04f 0800 	mov.w	r8, #0
 8004b26:	f104 0919 	add.w	r9, r4, #25
 8004b2a:	e7f4      	b.n	8004b16 <_printf_float+0x442>

08004b2c <_printf_common>:
 8004b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	4616      	mov	r6, r2
 8004b32:	4699      	mov	r9, r3
 8004b34:	688a      	ldr	r2, [r1, #8]
 8004b36:	690b      	ldr	r3, [r1, #16]
 8004b38:	4607      	mov	r7, r0
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	bfb8      	it	lt
 8004b3e:	4613      	movlt	r3, r2
 8004b40:	6033      	str	r3, [r6, #0]
 8004b42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b46:	460c      	mov	r4, r1
 8004b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b4c:	b10a      	cbz	r2, 8004b52 <_printf_common+0x26>
 8004b4e:	3301      	adds	r3, #1
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	0699      	lsls	r1, r3, #26
 8004b56:	bf42      	ittt	mi
 8004b58:	6833      	ldrmi	r3, [r6, #0]
 8004b5a:	3302      	addmi	r3, #2
 8004b5c:	6033      	strmi	r3, [r6, #0]
 8004b5e:	6825      	ldr	r5, [r4, #0]
 8004b60:	f015 0506 	ands.w	r5, r5, #6
 8004b64:	d106      	bne.n	8004b74 <_printf_common+0x48>
 8004b66:	f104 0a19 	add.w	sl, r4, #25
 8004b6a:	68e3      	ldr	r3, [r4, #12]
 8004b6c:	6832      	ldr	r2, [r6, #0]
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	dc28      	bgt.n	8004bc6 <_printf_common+0x9a>
 8004b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b78:	1e13      	subs	r3, r2, #0
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	bf18      	it	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	0692      	lsls	r2, r2, #26
 8004b82:	d42d      	bmi.n	8004be0 <_printf_common+0xb4>
 8004b84:	4649      	mov	r1, r9
 8004b86:	4638      	mov	r0, r7
 8004b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b8c:	47c0      	blx	r8
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d020      	beq.n	8004bd4 <_printf_common+0xa8>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	68e5      	ldr	r5, [r4, #12]
 8004b96:	f003 0306 	and.w	r3, r3, #6
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	bf18      	it	ne
 8004b9e:	2500      	movne	r5, #0
 8004ba0:	6832      	ldr	r2, [r6, #0]
 8004ba2:	f04f 0600 	mov.w	r6, #0
 8004ba6:	68a3      	ldr	r3, [r4, #8]
 8004ba8:	bf08      	it	eq
 8004baa:	1aad      	subeq	r5, r5, r2
 8004bac:	6922      	ldr	r2, [r4, #16]
 8004bae:	bf08      	it	eq
 8004bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	bfc4      	itt	gt
 8004bb8:	1a9b      	subgt	r3, r3, r2
 8004bba:	18ed      	addgt	r5, r5, r3
 8004bbc:	341a      	adds	r4, #26
 8004bbe:	42b5      	cmp	r5, r6
 8004bc0:	d11a      	bne.n	8004bf8 <_printf_common+0xcc>
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	e008      	b.n	8004bd8 <_printf_common+0xac>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	4652      	mov	r2, sl
 8004bca:	4649      	mov	r1, r9
 8004bcc:	4638      	mov	r0, r7
 8004bce:	47c0      	blx	r8
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d103      	bne.n	8004bdc <_printf_common+0xb0>
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bdc:	3501      	adds	r5, #1
 8004bde:	e7c4      	b.n	8004b6a <_printf_common+0x3e>
 8004be0:	2030      	movs	r0, #48	; 0x30
 8004be2:	18e1      	adds	r1, r4, r3
 8004be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bee:	4422      	add	r2, r4
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bf6:	e7c5      	b.n	8004b84 <_printf_common+0x58>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	4638      	mov	r0, r7
 8004c00:	47c0      	blx	r8
 8004c02:	3001      	adds	r0, #1
 8004c04:	d0e6      	beq.n	8004bd4 <_printf_common+0xa8>
 8004c06:	3601      	adds	r6, #1
 8004c08:	e7d9      	b.n	8004bbe <_printf_common+0x92>
	...

08004c0c <_printf_i>:
 8004c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	7e0f      	ldrb	r7, [r1, #24]
 8004c12:	4691      	mov	r9, r2
 8004c14:	2f78      	cmp	r7, #120	; 0x78
 8004c16:	4680      	mov	r8, r0
 8004c18:	460c      	mov	r4, r1
 8004c1a:	469a      	mov	sl, r3
 8004c1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c22:	d807      	bhi.n	8004c34 <_printf_i+0x28>
 8004c24:	2f62      	cmp	r7, #98	; 0x62
 8004c26:	d80a      	bhi.n	8004c3e <_printf_i+0x32>
 8004c28:	2f00      	cmp	r7, #0
 8004c2a:	f000 80d9 	beq.w	8004de0 <_printf_i+0x1d4>
 8004c2e:	2f58      	cmp	r7, #88	; 0x58
 8004c30:	f000 80a4 	beq.w	8004d7c <_printf_i+0x170>
 8004c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c3c:	e03a      	b.n	8004cb4 <_printf_i+0xa8>
 8004c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c42:	2b15      	cmp	r3, #21
 8004c44:	d8f6      	bhi.n	8004c34 <_printf_i+0x28>
 8004c46:	a101      	add	r1, pc, #4	; (adr r1, 8004c4c <_printf_i+0x40>)
 8004c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c4c:	08004ca5 	.word	0x08004ca5
 8004c50:	08004cb9 	.word	0x08004cb9
 8004c54:	08004c35 	.word	0x08004c35
 8004c58:	08004c35 	.word	0x08004c35
 8004c5c:	08004c35 	.word	0x08004c35
 8004c60:	08004c35 	.word	0x08004c35
 8004c64:	08004cb9 	.word	0x08004cb9
 8004c68:	08004c35 	.word	0x08004c35
 8004c6c:	08004c35 	.word	0x08004c35
 8004c70:	08004c35 	.word	0x08004c35
 8004c74:	08004c35 	.word	0x08004c35
 8004c78:	08004dc7 	.word	0x08004dc7
 8004c7c:	08004ce9 	.word	0x08004ce9
 8004c80:	08004da9 	.word	0x08004da9
 8004c84:	08004c35 	.word	0x08004c35
 8004c88:	08004c35 	.word	0x08004c35
 8004c8c:	08004de9 	.word	0x08004de9
 8004c90:	08004c35 	.word	0x08004c35
 8004c94:	08004ce9 	.word	0x08004ce9
 8004c98:	08004c35 	.word	0x08004c35
 8004c9c:	08004c35 	.word	0x08004c35
 8004ca0:	08004db1 	.word	0x08004db1
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	1d1a      	adds	r2, r3, #4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	602a      	str	r2, [r5, #0]
 8004cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0a4      	b.n	8004e02 <_printf_i+0x1f6>
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	6829      	ldr	r1, [r5, #0]
 8004cbc:	0606      	lsls	r6, r0, #24
 8004cbe:	f101 0304 	add.w	r3, r1, #4
 8004cc2:	d50a      	bpl.n	8004cda <_printf_i+0xce>
 8004cc4:	680e      	ldr	r6, [r1, #0]
 8004cc6:	602b      	str	r3, [r5, #0]
 8004cc8:	2e00      	cmp	r6, #0
 8004cca:	da03      	bge.n	8004cd4 <_printf_i+0xc8>
 8004ccc:	232d      	movs	r3, #45	; 0x2d
 8004cce:	4276      	negs	r6, r6
 8004cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd4:	230a      	movs	r3, #10
 8004cd6:	485e      	ldr	r0, [pc, #376]	; (8004e50 <_printf_i+0x244>)
 8004cd8:	e019      	b.n	8004d0e <_printf_i+0x102>
 8004cda:	680e      	ldr	r6, [r1, #0]
 8004cdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ce0:	602b      	str	r3, [r5, #0]
 8004ce2:	bf18      	it	ne
 8004ce4:	b236      	sxthne	r6, r6
 8004ce6:	e7ef      	b.n	8004cc8 <_printf_i+0xbc>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	6820      	ldr	r0, [r4, #0]
 8004cec:	1d19      	adds	r1, r3, #4
 8004cee:	6029      	str	r1, [r5, #0]
 8004cf0:	0601      	lsls	r1, r0, #24
 8004cf2:	d501      	bpl.n	8004cf8 <_printf_i+0xec>
 8004cf4:	681e      	ldr	r6, [r3, #0]
 8004cf6:	e002      	b.n	8004cfe <_printf_i+0xf2>
 8004cf8:	0646      	lsls	r6, r0, #25
 8004cfa:	d5fb      	bpl.n	8004cf4 <_printf_i+0xe8>
 8004cfc:	881e      	ldrh	r6, [r3, #0]
 8004cfe:	2f6f      	cmp	r7, #111	; 0x6f
 8004d00:	bf0c      	ite	eq
 8004d02:	2308      	moveq	r3, #8
 8004d04:	230a      	movne	r3, #10
 8004d06:	4852      	ldr	r0, [pc, #328]	; (8004e50 <_printf_i+0x244>)
 8004d08:	2100      	movs	r1, #0
 8004d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d0e:	6865      	ldr	r5, [r4, #4]
 8004d10:	2d00      	cmp	r5, #0
 8004d12:	bfa8      	it	ge
 8004d14:	6821      	ldrge	r1, [r4, #0]
 8004d16:	60a5      	str	r5, [r4, #8]
 8004d18:	bfa4      	itt	ge
 8004d1a:	f021 0104 	bicge.w	r1, r1, #4
 8004d1e:	6021      	strge	r1, [r4, #0]
 8004d20:	b90e      	cbnz	r6, 8004d26 <_printf_i+0x11a>
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	d04d      	beq.n	8004dc2 <_printf_i+0x1b6>
 8004d26:	4615      	mov	r5, r2
 8004d28:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d2c:	fb03 6711 	mls	r7, r3, r1, r6
 8004d30:	5dc7      	ldrb	r7, [r0, r7]
 8004d32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d36:	4637      	mov	r7, r6
 8004d38:	42bb      	cmp	r3, r7
 8004d3a:	460e      	mov	r6, r1
 8004d3c:	d9f4      	bls.n	8004d28 <_printf_i+0x11c>
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d10b      	bne.n	8004d5a <_printf_i+0x14e>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	07de      	lsls	r6, r3, #31
 8004d46:	d508      	bpl.n	8004d5a <_printf_i+0x14e>
 8004d48:	6923      	ldr	r3, [r4, #16]
 8004d4a:	6861      	ldr	r1, [r4, #4]
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	bfde      	ittt	le
 8004d50:	2330      	movle	r3, #48	; 0x30
 8004d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d5a:	1b52      	subs	r2, r2, r5
 8004d5c:	6122      	str	r2, [r4, #16]
 8004d5e:	464b      	mov	r3, r9
 8004d60:	4621      	mov	r1, r4
 8004d62:	4640      	mov	r0, r8
 8004d64:	f8cd a000 	str.w	sl, [sp]
 8004d68:	aa03      	add	r2, sp, #12
 8004d6a:	f7ff fedf 	bl	8004b2c <_printf_common>
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d14c      	bne.n	8004e0c <_printf_i+0x200>
 8004d72:	f04f 30ff 	mov.w	r0, #4294967295
 8004d76:	b004      	add	sp, #16
 8004d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7c:	4834      	ldr	r0, [pc, #208]	; (8004e50 <_printf_i+0x244>)
 8004d7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d82:	6829      	ldr	r1, [r5, #0]
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d8a:	6029      	str	r1, [r5, #0]
 8004d8c:	061d      	lsls	r5, r3, #24
 8004d8e:	d514      	bpl.n	8004dba <_printf_i+0x1ae>
 8004d90:	07df      	lsls	r7, r3, #31
 8004d92:	bf44      	itt	mi
 8004d94:	f043 0320 	orrmi.w	r3, r3, #32
 8004d98:	6023      	strmi	r3, [r4, #0]
 8004d9a:	b91e      	cbnz	r6, 8004da4 <_printf_i+0x198>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	f023 0320 	bic.w	r3, r3, #32
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	2310      	movs	r3, #16
 8004da6:	e7af      	b.n	8004d08 <_printf_i+0xfc>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	f043 0320 	orr.w	r3, r3, #32
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	2378      	movs	r3, #120	; 0x78
 8004db2:	4828      	ldr	r0, [pc, #160]	; (8004e54 <_printf_i+0x248>)
 8004db4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004db8:	e7e3      	b.n	8004d82 <_printf_i+0x176>
 8004dba:	0659      	lsls	r1, r3, #25
 8004dbc:	bf48      	it	mi
 8004dbe:	b2b6      	uxthmi	r6, r6
 8004dc0:	e7e6      	b.n	8004d90 <_printf_i+0x184>
 8004dc2:	4615      	mov	r5, r2
 8004dc4:	e7bb      	b.n	8004d3e <_printf_i+0x132>
 8004dc6:	682b      	ldr	r3, [r5, #0]
 8004dc8:	6826      	ldr	r6, [r4, #0]
 8004dca:	1d18      	adds	r0, r3, #4
 8004dcc:	6961      	ldr	r1, [r4, #20]
 8004dce:	6028      	str	r0, [r5, #0]
 8004dd0:	0635      	lsls	r5, r6, #24
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	d501      	bpl.n	8004dda <_printf_i+0x1ce>
 8004dd6:	6019      	str	r1, [r3, #0]
 8004dd8:	e002      	b.n	8004de0 <_printf_i+0x1d4>
 8004dda:	0670      	lsls	r0, r6, #25
 8004ddc:	d5fb      	bpl.n	8004dd6 <_printf_i+0x1ca>
 8004dde:	8019      	strh	r1, [r3, #0]
 8004de0:	2300      	movs	r3, #0
 8004de2:	4615      	mov	r5, r2
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	e7ba      	b.n	8004d5e <_printf_i+0x152>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	2100      	movs	r1, #0
 8004dec:	1d1a      	adds	r2, r3, #4
 8004dee:	602a      	str	r2, [r5, #0]
 8004df0:	681d      	ldr	r5, [r3, #0]
 8004df2:	6862      	ldr	r2, [r4, #4]
 8004df4:	4628      	mov	r0, r5
 8004df6:	f000 ff4b 	bl	8005c90 <memchr>
 8004dfa:	b108      	cbz	r0, 8004e00 <_printf_i+0x1f4>
 8004dfc:	1b40      	subs	r0, r0, r5
 8004dfe:	6060      	str	r0, [r4, #4]
 8004e00:	6863      	ldr	r3, [r4, #4]
 8004e02:	6123      	str	r3, [r4, #16]
 8004e04:	2300      	movs	r3, #0
 8004e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e0a:	e7a8      	b.n	8004d5e <_printf_i+0x152>
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	4649      	mov	r1, r9
 8004e10:	4640      	mov	r0, r8
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	47d0      	blx	sl
 8004e16:	3001      	adds	r0, #1
 8004e18:	d0ab      	beq.n	8004d72 <_printf_i+0x166>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	079b      	lsls	r3, r3, #30
 8004e1e:	d413      	bmi.n	8004e48 <_printf_i+0x23c>
 8004e20:	68e0      	ldr	r0, [r4, #12]
 8004e22:	9b03      	ldr	r3, [sp, #12]
 8004e24:	4298      	cmp	r0, r3
 8004e26:	bfb8      	it	lt
 8004e28:	4618      	movlt	r0, r3
 8004e2a:	e7a4      	b.n	8004d76 <_printf_i+0x16a>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4632      	mov	r2, r6
 8004e30:	4649      	mov	r1, r9
 8004e32:	4640      	mov	r0, r8
 8004e34:	47d0      	blx	sl
 8004e36:	3001      	adds	r0, #1
 8004e38:	d09b      	beq.n	8004d72 <_printf_i+0x166>
 8004e3a:	3501      	adds	r5, #1
 8004e3c:	68e3      	ldr	r3, [r4, #12]
 8004e3e:	9903      	ldr	r1, [sp, #12]
 8004e40:	1a5b      	subs	r3, r3, r1
 8004e42:	42ab      	cmp	r3, r5
 8004e44:	dcf2      	bgt.n	8004e2c <_printf_i+0x220>
 8004e46:	e7eb      	b.n	8004e20 <_printf_i+0x214>
 8004e48:	2500      	movs	r5, #0
 8004e4a:	f104 0619 	add.w	r6, r4, #25
 8004e4e:	e7f5      	b.n	8004e3c <_printf_i+0x230>
 8004e50:	080076ee 	.word	0x080076ee
 8004e54:	080076ff 	.word	0x080076ff

08004e58 <rand>:
 8004e58:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <rand+0x5c>)
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	681c      	ldr	r4, [r3, #0]
 8004e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e60:	b9b3      	cbnz	r3, 8004e90 <rand+0x38>
 8004e62:	2018      	movs	r0, #24
 8004e64:	f000 ff0c 	bl	8005c80 <malloc>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	63a0      	str	r0, [r4, #56]	; 0x38
 8004e6c:	b920      	cbnz	r0, 8004e78 <rand+0x20>
 8004e6e:	214e      	movs	r1, #78	; 0x4e
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <rand+0x60>)
 8004e72:	4812      	ldr	r0, [pc, #72]	; (8004ebc <rand+0x64>)
 8004e74:	f000 f856 	bl	8004f24 <__assert_func>
 8004e78:	4911      	ldr	r1, [pc, #68]	; (8004ec0 <rand+0x68>)
 8004e7a:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <rand+0x6c>)
 8004e7c:	e9c0 1300 	strd	r1, r3, [r0]
 8004e80:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <rand+0x70>)
 8004e82:	2100      	movs	r1, #0
 8004e84:	6083      	str	r3, [r0, #8]
 8004e86:	230b      	movs	r3, #11
 8004e88:	8183      	strh	r3, [r0, #12]
 8004e8a:	2001      	movs	r0, #1
 8004e8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004e90:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004e92:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <rand+0x74>)
 8004e94:	6920      	ldr	r0, [r4, #16]
 8004e96:	6963      	ldr	r3, [r4, #20]
 8004e98:	4342      	muls	r2, r0
 8004e9a:	490d      	ldr	r1, [pc, #52]	; (8004ed0 <rand+0x78>)
 8004e9c:	fb01 2203 	mla	r2, r1, r3, r2
 8004ea0:	fba0 0101 	umull	r0, r1, r0, r1
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	eb42 0001 	adc.w	r0, r2, r1
 8004eaa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004eae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004eb2:	bd10      	pop	{r4, pc}
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	08007710 	.word	0x08007710
 8004ebc:	08007727 	.word	0x08007727
 8004ec0:	abcd330e 	.word	0xabcd330e
 8004ec4:	e66d1234 	.word	0xe66d1234
 8004ec8:	0005deec 	.word	0x0005deec
 8004ecc:	5851f42d 	.word	0x5851f42d
 8004ed0:	4c957f2d 	.word	0x4c957f2d

08004ed4 <siprintf>:
 8004ed4:	b40e      	push	{r1, r2, r3}
 8004ed6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004eda:	b500      	push	{lr}
 8004edc:	b09c      	sub	sp, #112	; 0x70
 8004ede:	ab1d      	add	r3, sp, #116	; 0x74
 8004ee0:	9002      	str	r0, [sp, #8]
 8004ee2:	9006      	str	r0, [sp, #24]
 8004ee4:	9107      	str	r1, [sp, #28]
 8004ee6:	9104      	str	r1, [sp, #16]
 8004ee8:	4808      	ldr	r0, [pc, #32]	; (8004f0c <siprintf+0x38>)
 8004eea:	4909      	ldr	r1, [pc, #36]	; (8004f10 <siprintf+0x3c>)
 8004eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ef0:	9105      	str	r1, [sp, #20]
 8004ef2:	6800      	ldr	r0, [r0, #0]
 8004ef4:	a902      	add	r1, sp, #8
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	f001 fba6 	bl	8006648 <_svfiprintf_r>
 8004efc:	2200      	movs	r2, #0
 8004efe:	9b02      	ldr	r3, [sp, #8]
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	b01c      	add	sp, #112	; 0x70
 8004f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f08:	b003      	add	sp, #12
 8004f0a:	4770      	bx	lr
 8004f0c:	2000000c 	.word	0x2000000c
 8004f10:	ffff0208 	.word	0xffff0208

08004f14 <strcpy>:
 8004f14:	4603      	mov	r3, r0
 8004f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f1a:	f803 2b01 	strb.w	r2, [r3], #1
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	d1f9      	bne.n	8004f16 <strcpy+0x2>
 8004f22:	4770      	bx	lr

08004f24 <__assert_func>:
 8004f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f26:	4614      	mov	r4, r2
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <__assert_func+0x2c>)
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68d8      	ldr	r0, [r3, #12]
 8004f32:	b14c      	cbz	r4, 8004f48 <__assert_func+0x24>
 8004f34:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <__assert_func+0x30>)
 8004f36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f3a:	9100      	str	r1, [sp, #0]
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	4906      	ldr	r1, [pc, #24]	; (8004f58 <__assert_func+0x34>)
 8004f40:	f000 fe88 	bl	8005c54 <fiprintf>
 8004f44:	f001 fea8 	bl	8006c98 <abort>
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <__assert_func+0x38>)
 8004f4a:	461c      	mov	r4, r3
 8004f4c:	e7f3      	b.n	8004f36 <__assert_func+0x12>
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c
 8004f54:	08007782 	.word	0x08007782
 8004f58:	0800778f 	.word	0x0800778f
 8004f5c:	080077bd 	.word	0x080077bd

08004f60 <quorem>:
 8004f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	6903      	ldr	r3, [r0, #16]
 8004f66:	690c      	ldr	r4, [r1, #16]
 8004f68:	4607      	mov	r7, r0
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	f2c0 8082 	blt.w	8005074 <quorem+0x114>
 8004f70:	3c01      	subs	r4, #1
 8004f72:	f100 0514 	add.w	r5, r0, #20
 8004f76:	f101 0814 	add.w	r8, r1, #20
 8004f7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f98:	d331      	bcc.n	8004ffe <quorem+0x9e>
 8004f9a:	f04f 0e00 	mov.w	lr, #0
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	46ac      	mov	ip, r5
 8004fa2:	46f2      	mov	sl, lr
 8004fa4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fa8:	b293      	uxth	r3, r2
 8004faa:	fb06 e303 	mla	r3, r6, r3, lr
 8004fae:	0c12      	lsrs	r2, r2, #16
 8004fb0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	fb06 e202 	mla	r2, r6, r2, lr
 8004fba:	ebaa 0303 	sub.w	r3, sl, r3
 8004fbe:	f8dc a000 	ldr.w	sl, [ip]
 8004fc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fc6:	fa1f fa8a 	uxth.w	sl, sl
 8004fca:	4453      	add	r3, sl
 8004fcc:	f8dc a000 	ldr.w	sl, [ip]
 8004fd0:	b292      	uxth	r2, r2
 8004fd2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004fd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fe0:	4581      	cmp	r9, r0
 8004fe2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004fe6:	f84c 3b04 	str.w	r3, [ip], #4
 8004fea:	d2db      	bcs.n	8004fa4 <quorem+0x44>
 8004fec:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ff0:	b92b      	cbnz	r3, 8004ffe <quorem+0x9e>
 8004ff2:	9b01      	ldr	r3, [sp, #4]
 8004ff4:	3b04      	subs	r3, #4
 8004ff6:	429d      	cmp	r5, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	d32f      	bcc.n	800505c <quorem+0xfc>
 8004ffc:	613c      	str	r4, [r7, #16]
 8004ffe:	4638      	mov	r0, r7
 8005000:	f001 f8d2 	bl	80061a8 <__mcmp>
 8005004:	2800      	cmp	r0, #0
 8005006:	db25      	blt.n	8005054 <quorem+0xf4>
 8005008:	4628      	mov	r0, r5
 800500a:	f04f 0c00 	mov.w	ip, #0
 800500e:	3601      	adds	r6, #1
 8005010:	f858 1b04 	ldr.w	r1, [r8], #4
 8005014:	f8d0 e000 	ldr.w	lr, [r0]
 8005018:	b28b      	uxth	r3, r1
 800501a:	ebac 0303 	sub.w	r3, ip, r3
 800501e:	fa1f f28e 	uxth.w	r2, lr
 8005022:	4413      	add	r3, r2
 8005024:	0c0a      	lsrs	r2, r1, #16
 8005026:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800502a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800502e:	b29b      	uxth	r3, r3
 8005030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005034:	45c1      	cmp	r9, r8
 8005036:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800503a:	f840 3b04 	str.w	r3, [r0], #4
 800503e:	d2e7      	bcs.n	8005010 <quorem+0xb0>
 8005040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005048:	b922      	cbnz	r2, 8005054 <quorem+0xf4>
 800504a:	3b04      	subs	r3, #4
 800504c:	429d      	cmp	r5, r3
 800504e:	461a      	mov	r2, r3
 8005050:	d30a      	bcc.n	8005068 <quorem+0x108>
 8005052:	613c      	str	r4, [r7, #16]
 8005054:	4630      	mov	r0, r6
 8005056:	b003      	add	sp, #12
 8005058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	3b04      	subs	r3, #4
 8005060:	2a00      	cmp	r2, #0
 8005062:	d1cb      	bne.n	8004ffc <quorem+0x9c>
 8005064:	3c01      	subs	r4, #1
 8005066:	e7c6      	b.n	8004ff6 <quorem+0x96>
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	3b04      	subs	r3, #4
 800506c:	2a00      	cmp	r2, #0
 800506e:	d1f0      	bne.n	8005052 <quorem+0xf2>
 8005070:	3c01      	subs	r4, #1
 8005072:	e7eb      	b.n	800504c <quorem+0xec>
 8005074:	2000      	movs	r0, #0
 8005076:	e7ee      	b.n	8005056 <quorem+0xf6>

08005078 <_dtoa_r>:
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	4616      	mov	r6, r2
 800507e:	461f      	mov	r7, r3
 8005080:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005082:	b099      	sub	sp, #100	; 0x64
 8005084:	4605      	mov	r5, r0
 8005086:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800508a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800508e:	b974      	cbnz	r4, 80050ae <_dtoa_r+0x36>
 8005090:	2010      	movs	r0, #16
 8005092:	f000 fdf5 	bl	8005c80 <malloc>
 8005096:	4602      	mov	r2, r0
 8005098:	6268      	str	r0, [r5, #36]	; 0x24
 800509a:	b920      	cbnz	r0, 80050a6 <_dtoa_r+0x2e>
 800509c:	21ea      	movs	r1, #234	; 0xea
 800509e:	4ba8      	ldr	r3, [pc, #672]	; (8005340 <_dtoa_r+0x2c8>)
 80050a0:	48a8      	ldr	r0, [pc, #672]	; (8005344 <_dtoa_r+0x2cc>)
 80050a2:	f7ff ff3f 	bl	8004f24 <__assert_func>
 80050a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050aa:	6004      	str	r4, [r0, #0]
 80050ac:	60c4      	str	r4, [r0, #12]
 80050ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050b0:	6819      	ldr	r1, [r3, #0]
 80050b2:	b151      	cbz	r1, 80050ca <_dtoa_r+0x52>
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	2301      	movs	r3, #1
 80050b8:	4093      	lsls	r3, r2
 80050ba:	604a      	str	r2, [r1, #4]
 80050bc:	608b      	str	r3, [r1, #8]
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 fe34 	bl	8005d2c <_Bfree>
 80050c4:	2200      	movs	r2, #0
 80050c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	1e3b      	subs	r3, r7, #0
 80050cc:	bfaf      	iteee	ge
 80050ce:	2300      	movge	r3, #0
 80050d0:	2201      	movlt	r2, #1
 80050d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050d6:	9305      	strlt	r3, [sp, #20]
 80050d8:	bfa8      	it	ge
 80050da:	f8c8 3000 	strge.w	r3, [r8]
 80050de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80050e2:	4b99      	ldr	r3, [pc, #612]	; (8005348 <_dtoa_r+0x2d0>)
 80050e4:	bfb8      	it	lt
 80050e6:	f8c8 2000 	strlt.w	r2, [r8]
 80050ea:	ea33 0309 	bics.w	r3, r3, r9
 80050ee:	d119      	bne.n	8005124 <_dtoa_r+0xac>
 80050f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80050f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050fc:	4333      	orrs	r3, r6
 80050fe:	f000 857f 	beq.w	8005c00 <_dtoa_r+0xb88>
 8005102:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005104:	b953      	cbnz	r3, 800511c <_dtoa_r+0xa4>
 8005106:	4b91      	ldr	r3, [pc, #580]	; (800534c <_dtoa_r+0x2d4>)
 8005108:	e022      	b.n	8005150 <_dtoa_r+0xd8>
 800510a:	4b91      	ldr	r3, [pc, #580]	; (8005350 <_dtoa_r+0x2d8>)
 800510c:	9303      	str	r3, [sp, #12]
 800510e:	3308      	adds	r3, #8
 8005110:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	9803      	ldr	r0, [sp, #12]
 8005116:	b019      	add	sp, #100	; 0x64
 8005118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511c:	4b8b      	ldr	r3, [pc, #556]	; (800534c <_dtoa_r+0x2d4>)
 800511e:	9303      	str	r3, [sp, #12]
 8005120:	3303      	adds	r3, #3
 8005122:	e7f5      	b.n	8005110 <_dtoa_r+0x98>
 8005124:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005128:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800512c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005130:	2200      	movs	r2, #0
 8005132:	2300      	movs	r3, #0
 8005134:	f7fb fc38 	bl	80009a8 <__aeabi_dcmpeq>
 8005138:	4680      	mov	r8, r0
 800513a:	b158      	cbz	r0, 8005154 <_dtoa_r+0xdc>
 800513c:	2301      	movs	r3, #1
 800513e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8558 	beq.w	8005bfa <_dtoa_r+0xb82>
 800514a:	4882      	ldr	r0, [pc, #520]	; (8005354 <_dtoa_r+0x2dc>)
 800514c:	6018      	str	r0, [r3, #0]
 800514e:	1e43      	subs	r3, r0, #1
 8005150:	9303      	str	r3, [sp, #12]
 8005152:	e7df      	b.n	8005114 <_dtoa_r+0x9c>
 8005154:	ab16      	add	r3, sp, #88	; 0x58
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	ab17      	add	r3, sp, #92	; 0x5c
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4628      	mov	r0, r5
 800515e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005162:	f001 f8c9 	bl	80062f8 <__d2b>
 8005166:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800516a:	4683      	mov	fp, r0
 800516c:	2c00      	cmp	r4, #0
 800516e:	d07f      	beq.n	8005270 <_dtoa_r+0x1f8>
 8005170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005176:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800517a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800517e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005182:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005186:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800518a:	2200      	movs	r2, #0
 800518c:	4b72      	ldr	r3, [pc, #456]	; (8005358 <_dtoa_r+0x2e0>)
 800518e:	f7fa ffeb 	bl	8000168 <__aeabi_dsub>
 8005192:	a365      	add	r3, pc, #404	; (adr r3, 8005328 <_dtoa_r+0x2b0>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f7fb f99e 	bl	80004d8 <__aeabi_dmul>
 800519c:	a364      	add	r3, pc, #400	; (adr r3, 8005330 <_dtoa_r+0x2b8>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fa ffe3 	bl	800016c <__adddf3>
 80051a6:	4606      	mov	r6, r0
 80051a8:	4620      	mov	r0, r4
 80051aa:	460f      	mov	r7, r1
 80051ac:	f7fb f92a 	bl	8000404 <__aeabi_i2d>
 80051b0:	a361      	add	r3, pc, #388	; (adr r3, 8005338 <_dtoa_r+0x2c0>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f7fb f98f 	bl	80004d8 <__aeabi_dmul>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4630      	mov	r0, r6
 80051c0:	4639      	mov	r1, r7
 80051c2:	f7fa ffd3 	bl	800016c <__adddf3>
 80051c6:	4606      	mov	r6, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	f7fb fc35 	bl	8000a38 <__aeabi_d2iz>
 80051ce:	2200      	movs	r2, #0
 80051d0:	4682      	mov	sl, r0
 80051d2:	2300      	movs	r3, #0
 80051d4:	4630      	mov	r0, r6
 80051d6:	4639      	mov	r1, r7
 80051d8:	f7fb fbf0 	bl	80009bc <__aeabi_dcmplt>
 80051dc:	b148      	cbz	r0, 80051f2 <_dtoa_r+0x17a>
 80051de:	4650      	mov	r0, sl
 80051e0:	f7fb f910 	bl	8000404 <__aeabi_i2d>
 80051e4:	4632      	mov	r2, r6
 80051e6:	463b      	mov	r3, r7
 80051e8:	f7fb fbde 	bl	80009a8 <__aeabi_dcmpeq>
 80051ec:	b908      	cbnz	r0, 80051f2 <_dtoa_r+0x17a>
 80051ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051f2:	f1ba 0f16 	cmp.w	sl, #22
 80051f6:	d858      	bhi.n	80052aa <_dtoa_r+0x232>
 80051f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051fc:	4b57      	ldr	r3, [pc, #348]	; (800535c <_dtoa_r+0x2e4>)
 80051fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	f7fb fbd9 	bl	80009bc <__aeabi_dcmplt>
 800520a:	2800      	cmp	r0, #0
 800520c:	d04f      	beq.n	80052ae <_dtoa_r+0x236>
 800520e:	2300      	movs	r3, #0
 8005210:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005214:	930f      	str	r3, [sp, #60]	; 0x3c
 8005216:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005218:	1b1c      	subs	r4, r3, r4
 800521a:	1e63      	subs	r3, r4, #1
 800521c:	9309      	str	r3, [sp, #36]	; 0x24
 800521e:	bf49      	itett	mi
 8005220:	f1c4 0301 	rsbmi	r3, r4, #1
 8005224:	2300      	movpl	r3, #0
 8005226:	9306      	strmi	r3, [sp, #24]
 8005228:	2300      	movmi	r3, #0
 800522a:	bf54      	ite	pl
 800522c:	9306      	strpl	r3, [sp, #24]
 800522e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005230:	f1ba 0f00 	cmp.w	sl, #0
 8005234:	db3d      	blt.n	80052b2 <_dtoa_r+0x23a>
 8005236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005238:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800523c:	4453      	add	r3, sl
 800523e:	9309      	str	r3, [sp, #36]	; 0x24
 8005240:	2300      	movs	r3, #0
 8005242:	930a      	str	r3, [sp, #40]	; 0x28
 8005244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005246:	2b09      	cmp	r3, #9
 8005248:	f200 808c 	bhi.w	8005364 <_dtoa_r+0x2ec>
 800524c:	2b05      	cmp	r3, #5
 800524e:	bfc4      	itt	gt
 8005250:	3b04      	subgt	r3, #4
 8005252:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005256:	bfc8      	it	gt
 8005258:	2400      	movgt	r4, #0
 800525a:	f1a3 0302 	sub.w	r3, r3, #2
 800525e:	bfd8      	it	le
 8005260:	2401      	movle	r4, #1
 8005262:	2b03      	cmp	r3, #3
 8005264:	f200 808a 	bhi.w	800537c <_dtoa_r+0x304>
 8005268:	e8df f003 	tbb	[pc, r3]
 800526c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005270:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005274:	441c      	add	r4, r3
 8005276:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800527a:	2b20      	cmp	r3, #32
 800527c:	bfc3      	ittte	gt
 800527e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005282:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005286:	fa09 f303 	lslgt.w	r3, r9, r3
 800528a:	f1c3 0320 	rsble	r3, r3, #32
 800528e:	bfc6      	itte	gt
 8005290:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005294:	4318      	orrgt	r0, r3
 8005296:	fa06 f003 	lslle.w	r0, r6, r3
 800529a:	f7fb f8a3 	bl	80003e4 <__aeabi_ui2d>
 800529e:	2301      	movs	r3, #1
 80052a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80052a4:	3c01      	subs	r4, #1
 80052a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80052a8:	e76f      	b.n	800518a <_dtoa_r+0x112>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e7b2      	b.n	8005214 <_dtoa_r+0x19c>
 80052ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80052b0:	e7b1      	b.n	8005216 <_dtoa_r+0x19e>
 80052b2:	9b06      	ldr	r3, [sp, #24]
 80052b4:	eba3 030a 	sub.w	r3, r3, sl
 80052b8:	9306      	str	r3, [sp, #24]
 80052ba:	f1ca 0300 	rsb	r3, sl, #0
 80052be:	930a      	str	r3, [sp, #40]	; 0x28
 80052c0:	2300      	movs	r3, #0
 80052c2:	930e      	str	r3, [sp, #56]	; 0x38
 80052c4:	e7be      	b.n	8005244 <_dtoa_r+0x1cc>
 80052c6:	2300      	movs	r3, #0
 80052c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80052ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dc58      	bgt.n	8005382 <_dtoa_r+0x30a>
 80052d0:	f04f 0901 	mov.w	r9, #1
 80052d4:	464b      	mov	r3, r9
 80052d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80052da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80052de:	2200      	movs	r2, #0
 80052e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80052e2:	6042      	str	r2, [r0, #4]
 80052e4:	2204      	movs	r2, #4
 80052e6:	f102 0614 	add.w	r6, r2, #20
 80052ea:	429e      	cmp	r6, r3
 80052ec:	6841      	ldr	r1, [r0, #4]
 80052ee:	d94e      	bls.n	800538e <_dtoa_r+0x316>
 80052f0:	4628      	mov	r0, r5
 80052f2:	f000 fcdb 	bl	8005cac <_Balloc>
 80052f6:	9003      	str	r0, [sp, #12]
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d14c      	bne.n	8005396 <_dtoa_r+0x31e>
 80052fc:	4602      	mov	r2, r0
 80052fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <_dtoa_r+0x2e8>)
 8005304:	e6cc      	b.n	80050a0 <_dtoa_r+0x28>
 8005306:	2301      	movs	r3, #1
 8005308:	e7de      	b.n	80052c8 <_dtoa_r+0x250>
 800530a:	2300      	movs	r3, #0
 800530c:	930b      	str	r3, [sp, #44]	; 0x2c
 800530e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005310:	eb0a 0903 	add.w	r9, sl, r3
 8005314:	f109 0301 	add.w	r3, r9, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	9308      	str	r3, [sp, #32]
 800531c:	bfb8      	it	lt
 800531e:	2301      	movlt	r3, #1
 8005320:	e7dd      	b.n	80052de <_dtoa_r+0x266>
 8005322:	2301      	movs	r3, #1
 8005324:	e7f2      	b.n	800530c <_dtoa_r+0x294>
 8005326:	bf00      	nop
 8005328:	636f4361 	.word	0x636f4361
 800532c:	3fd287a7 	.word	0x3fd287a7
 8005330:	8b60c8b3 	.word	0x8b60c8b3
 8005334:	3fc68a28 	.word	0x3fc68a28
 8005338:	509f79fb 	.word	0x509f79fb
 800533c:	3fd34413 	.word	0x3fd34413
 8005340:	08007710 	.word	0x08007710
 8005344:	080077cb 	.word	0x080077cb
 8005348:	7ff00000 	.word	0x7ff00000
 800534c:	080077c7 	.word	0x080077c7
 8005350:	080077be 	.word	0x080077be
 8005354:	080076ed 	.word	0x080076ed
 8005358:	3ff80000 	.word	0x3ff80000
 800535c:	080078c0 	.word	0x080078c0
 8005360:	08007826 	.word	0x08007826
 8005364:	2401      	movs	r4, #1
 8005366:	2300      	movs	r3, #0
 8005368:	940b      	str	r4, [sp, #44]	; 0x2c
 800536a:	9322      	str	r3, [sp, #136]	; 0x88
 800536c:	f04f 39ff 	mov.w	r9, #4294967295
 8005370:	2200      	movs	r2, #0
 8005372:	2312      	movs	r3, #18
 8005374:	f8cd 9020 	str.w	r9, [sp, #32]
 8005378:	9223      	str	r2, [sp, #140]	; 0x8c
 800537a:	e7b0      	b.n	80052de <_dtoa_r+0x266>
 800537c:	2301      	movs	r3, #1
 800537e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005380:	e7f4      	b.n	800536c <_dtoa_r+0x2f4>
 8005382:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005386:	464b      	mov	r3, r9
 8005388:	f8cd 9020 	str.w	r9, [sp, #32]
 800538c:	e7a7      	b.n	80052de <_dtoa_r+0x266>
 800538e:	3101      	adds	r1, #1
 8005390:	6041      	str	r1, [r0, #4]
 8005392:	0052      	lsls	r2, r2, #1
 8005394:	e7a7      	b.n	80052e6 <_dtoa_r+0x26e>
 8005396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005398:	9a03      	ldr	r2, [sp, #12]
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	9b08      	ldr	r3, [sp, #32]
 800539e:	2b0e      	cmp	r3, #14
 80053a0:	f200 80a8 	bhi.w	80054f4 <_dtoa_r+0x47c>
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	f000 80a5 	beq.w	80054f4 <_dtoa_r+0x47c>
 80053aa:	f1ba 0f00 	cmp.w	sl, #0
 80053ae:	dd34      	ble.n	800541a <_dtoa_r+0x3a2>
 80053b0:	4a9a      	ldr	r2, [pc, #616]	; (800561c <_dtoa_r+0x5a4>)
 80053b2:	f00a 030f 	and.w	r3, sl, #15
 80053b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80053ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80053be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80053ca:	d016      	beq.n	80053fa <_dtoa_r+0x382>
 80053cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053d0:	4b93      	ldr	r3, [pc, #588]	; (8005620 <_dtoa_r+0x5a8>)
 80053d2:	2703      	movs	r7, #3
 80053d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053d8:	f7fb f9a8 	bl	800072c <__aeabi_ddiv>
 80053dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053e0:	f004 040f 	and.w	r4, r4, #15
 80053e4:	4e8e      	ldr	r6, [pc, #568]	; (8005620 <_dtoa_r+0x5a8>)
 80053e6:	b954      	cbnz	r4, 80053fe <_dtoa_r+0x386>
 80053e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f0:	f7fb f99c 	bl	800072c <__aeabi_ddiv>
 80053f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053f8:	e029      	b.n	800544e <_dtoa_r+0x3d6>
 80053fa:	2702      	movs	r7, #2
 80053fc:	e7f2      	b.n	80053e4 <_dtoa_r+0x36c>
 80053fe:	07e1      	lsls	r1, r4, #31
 8005400:	d508      	bpl.n	8005414 <_dtoa_r+0x39c>
 8005402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005406:	e9d6 2300 	ldrd	r2, r3, [r6]
 800540a:	f7fb f865 	bl	80004d8 <__aeabi_dmul>
 800540e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005412:	3701      	adds	r7, #1
 8005414:	1064      	asrs	r4, r4, #1
 8005416:	3608      	adds	r6, #8
 8005418:	e7e5      	b.n	80053e6 <_dtoa_r+0x36e>
 800541a:	f000 80a5 	beq.w	8005568 <_dtoa_r+0x4f0>
 800541e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005422:	f1ca 0400 	rsb	r4, sl, #0
 8005426:	4b7d      	ldr	r3, [pc, #500]	; (800561c <_dtoa_r+0x5a4>)
 8005428:	f004 020f 	and.w	r2, r4, #15
 800542c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f7fb f850 	bl	80004d8 <__aeabi_dmul>
 8005438:	2702      	movs	r7, #2
 800543a:	2300      	movs	r3, #0
 800543c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005440:	4e77      	ldr	r6, [pc, #476]	; (8005620 <_dtoa_r+0x5a8>)
 8005442:	1124      	asrs	r4, r4, #4
 8005444:	2c00      	cmp	r4, #0
 8005446:	f040 8084 	bne.w	8005552 <_dtoa_r+0x4da>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d2      	bne.n	80053f4 <_dtoa_r+0x37c>
 800544e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 808b 	beq.w	800556c <_dtoa_r+0x4f4>
 8005456:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800545a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800545e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005462:	2200      	movs	r2, #0
 8005464:	4b6f      	ldr	r3, [pc, #444]	; (8005624 <_dtoa_r+0x5ac>)
 8005466:	f7fb faa9 	bl	80009bc <__aeabi_dcmplt>
 800546a:	2800      	cmp	r0, #0
 800546c:	d07e      	beq.n	800556c <_dtoa_r+0x4f4>
 800546e:	9b08      	ldr	r3, [sp, #32]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d07b      	beq.n	800556c <_dtoa_r+0x4f4>
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	dd38      	ble.n	80054ec <_dtoa_r+0x474>
 800547a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800547e:	2200      	movs	r2, #0
 8005480:	4b69      	ldr	r3, [pc, #420]	; (8005628 <_dtoa_r+0x5b0>)
 8005482:	f7fb f829 	bl	80004d8 <__aeabi_dmul>
 8005486:	464c      	mov	r4, r9
 8005488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800548c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005490:	3701      	adds	r7, #1
 8005492:	4638      	mov	r0, r7
 8005494:	f7fa ffb6 	bl	8000404 <__aeabi_i2d>
 8005498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800549c:	f7fb f81c 	bl	80004d8 <__aeabi_dmul>
 80054a0:	2200      	movs	r2, #0
 80054a2:	4b62      	ldr	r3, [pc, #392]	; (800562c <_dtoa_r+0x5b4>)
 80054a4:	f7fa fe62 	bl	800016c <__adddf3>
 80054a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80054ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054b0:	9611      	str	r6, [sp, #68]	; 0x44
 80054b2:	2c00      	cmp	r4, #0
 80054b4:	d15d      	bne.n	8005572 <_dtoa_r+0x4fa>
 80054b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ba:	2200      	movs	r2, #0
 80054bc:	4b5c      	ldr	r3, [pc, #368]	; (8005630 <_dtoa_r+0x5b8>)
 80054be:	f7fa fe53 	bl	8000168 <__aeabi_dsub>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054ca:	4633      	mov	r3, r6
 80054cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054ce:	f7fb fa93 	bl	80009f8 <__aeabi_dcmpgt>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f040 829c 	bne.w	8005a10 <_dtoa_r+0x998>
 80054d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80054e2:	f7fb fa6b 	bl	80009bc <__aeabi_dcmplt>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	f040 8290 	bne.w	8005a0c <_dtoa_r+0x994>
 80054ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80054f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80054f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f2c0 8152 	blt.w	80057a0 <_dtoa_r+0x728>
 80054fc:	f1ba 0f0e 	cmp.w	sl, #14
 8005500:	f300 814e 	bgt.w	80057a0 <_dtoa_r+0x728>
 8005504:	4b45      	ldr	r3, [pc, #276]	; (800561c <_dtoa_r+0x5a4>)
 8005506:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800550a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800550e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005512:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005514:	2b00      	cmp	r3, #0
 8005516:	f280 80db 	bge.w	80056d0 <_dtoa_r+0x658>
 800551a:	9b08      	ldr	r3, [sp, #32]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f300 80d7 	bgt.w	80056d0 <_dtoa_r+0x658>
 8005522:	f040 8272 	bne.w	8005a0a <_dtoa_r+0x992>
 8005526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800552a:	2200      	movs	r2, #0
 800552c:	4b40      	ldr	r3, [pc, #256]	; (8005630 <_dtoa_r+0x5b8>)
 800552e:	f7fa ffd3 	bl	80004d8 <__aeabi_dmul>
 8005532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005536:	f7fb fa55 	bl	80009e4 <__aeabi_dcmpge>
 800553a:	9c08      	ldr	r4, [sp, #32]
 800553c:	4626      	mov	r6, r4
 800553e:	2800      	cmp	r0, #0
 8005540:	f040 8248 	bne.w	80059d4 <_dtoa_r+0x95c>
 8005544:	2331      	movs	r3, #49	; 0x31
 8005546:	9f03      	ldr	r7, [sp, #12]
 8005548:	f10a 0a01 	add.w	sl, sl, #1
 800554c:	f807 3b01 	strb.w	r3, [r7], #1
 8005550:	e244      	b.n	80059dc <_dtoa_r+0x964>
 8005552:	07e2      	lsls	r2, r4, #31
 8005554:	d505      	bpl.n	8005562 <_dtoa_r+0x4ea>
 8005556:	e9d6 2300 	ldrd	r2, r3, [r6]
 800555a:	f7fa ffbd 	bl	80004d8 <__aeabi_dmul>
 800555e:	2301      	movs	r3, #1
 8005560:	3701      	adds	r7, #1
 8005562:	1064      	asrs	r4, r4, #1
 8005564:	3608      	adds	r6, #8
 8005566:	e76d      	b.n	8005444 <_dtoa_r+0x3cc>
 8005568:	2702      	movs	r7, #2
 800556a:	e770      	b.n	800544e <_dtoa_r+0x3d6>
 800556c:	46d0      	mov	r8, sl
 800556e:	9c08      	ldr	r4, [sp, #32]
 8005570:	e78f      	b.n	8005492 <_dtoa_r+0x41a>
 8005572:	9903      	ldr	r1, [sp, #12]
 8005574:	4b29      	ldr	r3, [pc, #164]	; (800561c <_dtoa_r+0x5a4>)
 8005576:	4421      	add	r1, r4
 8005578:	9112      	str	r1, [sp, #72]	; 0x48
 800557a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800557c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005580:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005584:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005588:	2900      	cmp	r1, #0
 800558a:	d055      	beq.n	8005638 <_dtoa_r+0x5c0>
 800558c:	2000      	movs	r0, #0
 800558e:	4929      	ldr	r1, [pc, #164]	; (8005634 <_dtoa_r+0x5bc>)
 8005590:	f7fb f8cc 	bl	800072c <__aeabi_ddiv>
 8005594:	463b      	mov	r3, r7
 8005596:	4632      	mov	r2, r6
 8005598:	f7fa fde6 	bl	8000168 <__aeabi_dsub>
 800559c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055a0:	9f03      	ldr	r7, [sp, #12]
 80055a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055a6:	f7fb fa47 	bl	8000a38 <__aeabi_d2iz>
 80055aa:	4604      	mov	r4, r0
 80055ac:	f7fa ff2a 	bl	8000404 <__aeabi_i2d>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b8:	f7fa fdd6 	bl	8000168 <__aeabi_dsub>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	3430      	adds	r4, #48	; 0x30
 80055c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055ca:	f807 4b01 	strb.w	r4, [r7], #1
 80055ce:	f7fb f9f5 	bl	80009bc <__aeabi_dcmplt>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d174      	bne.n	80056c0 <_dtoa_r+0x648>
 80055d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055da:	2000      	movs	r0, #0
 80055dc:	4911      	ldr	r1, [pc, #68]	; (8005624 <_dtoa_r+0x5ac>)
 80055de:	f7fa fdc3 	bl	8000168 <__aeabi_dsub>
 80055e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055e6:	f7fb f9e9 	bl	80009bc <__aeabi_dcmplt>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	f040 80b7 	bne.w	800575e <_dtoa_r+0x6e6>
 80055f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055f2:	429f      	cmp	r7, r3
 80055f4:	f43f af7a 	beq.w	80054ec <_dtoa_r+0x474>
 80055f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055fc:	2200      	movs	r2, #0
 80055fe:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <_dtoa_r+0x5b0>)
 8005600:	f7fa ff6a 	bl	80004d8 <__aeabi_dmul>
 8005604:	2200      	movs	r2, #0
 8005606:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800560a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <_dtoa_r+0x5b0>)
 8005610:	f7fa ff62 	bl	80004d8 <__aeabi_dmul>
 8005614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005618:	e7c3      	b.n	80055a2 <_dtoa_r+0x52a>
 800561a:	bf00      	nop
 800561c:	080078c0 	.word	0x080078c0
 8005620:	08007898 	.word	0x08007898
 8005624:	3ff00000 	.word	0x3ff00000
 8005628:	40240000 	.word	0x40240000
 800562c:	401c0000 	.word	0x401c0000
 8005630:	40140000 	.word	0x40140000
 8005634:	3fe00000 	.word	0x3fe00000
 8005638:	4630      	mov	r0, r6
 800563a:	4639      	mov	r1, r7
 800563c:	f7fa ff4c 	bl	80004d8 <__aeabi_dmul>
 8005640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005642:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005646:	9c03      	ldr	r4, [sp, #12]
 8005648:	9314      	str	r3, [sp, #80]	; 0x50
 800564a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800564e:	f7fb f9f3 	bl	8000a38 <__aeabi_d2iz>
 8005652:	9015      	str	r0, [sp, #84]	; 0x54
 8005654:	f7fa fed6 	bl	8000404 <__aeabi_i2d>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005660:	f7fa fd82 	bl	8000168 <__aeabi_dsub>
 8005664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005666:	4606      	mov	r6, r0
 8005668:	3330      	adds	r3, #48	; 0x30
 800566a:	f804 3b01 	strb.w	r3, [r4], #1
 800566e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005670:	460f      	mov	r7, r1
 8005672:	429c      	cmp	r4, r3
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	d124      	bne.n	80056c4 <_dtoa_r+0x64c>
 800567a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800567e:	4bb0      	ldr	r3, [pc, #704]	; (8005940 <_dtoa_r+0x8c8>)
 8005680:	f7fa fd74 	bl	800016c <__adddf3>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4630      	mov	r0, r6
 800568a:	4639      	mov	r1, r7
 800568c:	f7fb f9b4 	bl	80009f8 <__aeabi_dcmpgt>
 8005690:	2800      	cmp	r0, #0
 8005692:	d163      	bne.n	800575c <_dtoa_r+0x6e4>
 8005694:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005698:	2000      	movs	r0, #0
 800569a:	49a9      	ldr	r1, [pc, #676]	; (8005940 <_dtoa_r+0x8c8>)
 800569c:	f7fa fd64 	bl	8000168 <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fb f988 	bl	80009bc <__aeabi_dcmplt>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	f43f af1d 	beq.w	80054ec <_dtoa_r+0x474>
 80056b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80056b4:	1e7b      	subs	r3, r7, #1
 80056b6:	9314      	str	r3, [sp, #80]	; 0x50
 80056b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80056bc:	2b30      	cmp	r3, #48	; 0x30
 80056be:	d0f8      	beq.n	80056b2 <_dtoa_r+0x63a>
 80056c0:	46c2      	mov	sl, r8
 80056c2:	e03b      	b.n	800573c <_dtoa_r+0x6c4>
 80056c4:	4b9f      	ldr	r3, [pc, #636]	; (8005944 <_dtoa_r+0x8cc>)
 80056c6:	f7fa ff07 	bl	80004d8 <__aeabi_dmul>
 80056ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056ce:	e7bc      	b.n	800564a <_dtoa_r+0x5d2>
 80056d0:	9f03      	ldr	r7, [sp, #12]
 80056d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80056d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	f7fb f825 	bl	800072c <__aeabi_ddiv>
 80056e2:	f7fb f9a9 	bl	8000a38 <__aeabi_d2iz>
 80056e6:	4604      	mov	r4, r0
 80056e8:	f7fa fe8c 	bl	8000404 <__aeabi_i2d>
 80056ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056f0:	f7fa fef2 	bl	80004d8 <__aeabi_dmul>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4640      	mov	r0, r8
 80056fa:	4649      	mov	r1, r9
 80056fc:	f7fa fd34 	bl	8000168 <__aeabi_dsub>
 8005700:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005704:	f807 6b01 	strb.w	r6, [r7], #1
 8005708:	9e03      	ldr	r6, [sp, #12]
 800570a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800570e:	1bbe      	subs	r6, r7, r6
 8005710:	45b4      	cmp	ip, r6
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	d136      	bne.n	8005786 <_dtoa_r+0x70e>
 8005718:	f7fa fd28 	bl	800016c <__adddf3>
 800571c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005720:	4680      	mov	r8, r0
 8005722:	4689      	mov	r9, r1
 8005724:	f7fb f968 	bl	80009f8 <__aeabi_dcmpgt>
 8005728:	bb58      	cbnz	r0, 8005782 <_dtoa_r+0x70a>
 800572a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800572e:	4640      	mov	r0, r8
 8005730:	4649      	mov	r1, r9
 8005732:	f7fb f939 	bl	80009a8 <__aeabi_dcmpeq>
 8005736:	b108      	cbz	r0, 800573c <_dtoa_r+0x6c4>
 8005738:	07e1      	lsls	r1, r4, #31
 800573a:	d422      	bmi.n	8005782 <_dtoa_r+0x70a>
 800573c:	4628      	mov	r0, r5
 800573e:	4659      	mov	r1, fp
 8005740:	f000 faf4 	bl	8005d2c <_Bfree>
 8005744:	2300      	movs	r3, #0
 8005746:	703b      	strb	r3, [r7, #0]
 8005748:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800574a:	f10a 0001 	add.w	r0, sl, #1
 800574e:	6018      	str	r0, [r3, #0]
 8005750:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005752:	2b00      	cmp	r3, #0
 8005754:	f43f acde 	beq.w	8005114 <_dtoa_r+0x9c>
 8005758:	601f      	str	r7, [r3, #0]
 800575a:	e4db      	b.n	8005114 <_dtoa_r+0x9c>
 800575c:	4627      	mov	r7, r4
 800575e:	463b      	mov	r3, r7
 8005760:	461f      	mov	r7, r3
 8005762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005766:	2a39      	cmp	r2, #57	; 0x39
 8005768:	d107      	bne.n	800577a <_dtoa_r+0x702>
 800576a:	9a03      	ldr	r2, [sp, #12]
 800576c:	429a      	cmp	r2, r3
 800576e:	d1f7      	bne.n	8005760 <_dtoa_r+0x6e8>
 8005770:	2230      	movs	r2, #48	; 0x30
 8005772:	9903      	ldr	r1, [sp, #12]
 8005774:	f108 0801 	add.w	r8, r8, #1
 8005778:	700a      	strb	r2, [r1, #0]
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	3201      	adds	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	e79e      	b.n	80056c0 <_dtoa_r+0x648>
 8005782:	46d0      	mov	r8, sl
 8005784:	e7eb      	b.n	800575e <_dtoa_r+0x6e6>
 8005786:	2200      	movs	r2, #0
 8005788:	4b6e      	ldr	r3, [pc, #440]	; (8005944 <_dtoa_r+0x8cc>)
 800578a:	f7fa fea5 	bl	80004d8 <__aeabi_dmul>
 800578e:	2200      	movs	r2, #0
 8005790:	2300      	movs	r3, #0
 8005792:	4680      	mov	r8, r0
 8005794:	4689      	mov	r9, r1
 8005796:	f7fb f907 	bl	80009a8 <__aeabi_dcmpeq>
 800579a:	2800      	cmp	r0, #0
 800579c:	d09b      	beq.n	80056d6 <_dtoa_r+0x65e>
 800579e:	e7cd      	b.n	800573c <_dtoa_r+0x6c4>
 80057a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057a2:	2a00      	cmp	r2, #0
 80057a4:	f000 80d0 	beq.w	8005948 <_dtoa_r+0x8d0>
 80057a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80057aa:	2a01      	cmp	r2, #1
 80057ac:	f300 80ae 	bgt.w	800590c <_dtoa_r+0x894>
 80057b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057b2:	2a00      	cmp	r2, #0
 80057b4:	f000 80a6 	beq.w	8005904 <_dtoa_r+0x88c>
 80057b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80057be:	9f06      	ldr	r7, [sp, #24]
 80057c0:	9a06      	ldr	r2, [sp, #24]
 80057c2:	2101      	movs	r1, #1
 80057c4:	441a      	add	r2, r3
 80057c6:	9206      	str	r2, [sp, #24]
 80057c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057ca:	4628      	mov	r0, r5
 80057cc:	441a      	add	r2, r3
 80057ce:	9209      	str	r2, [sp, #36]	; 0x24
 80057d0:	f000 fb62 	bl	8005e98 <__i2b>
 80057d4:	4606      	mov	r6, r0
 80057d6:	2f00      	cmp	r7, #0
 80057d8:	dd0c      	ble.n	80057f4 <_dtoa_r+0x77c>
 80057da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dd09      	ble.n	80057f4 <_dtoa_r+0x77c>
 80057e0:	42bb      	cmp	r3, r7
 80057e2:	bfa8      	it	ge
 80057e4:	463b      	movge	r3, r7
 80057e6:	9a06      	ldr	r2, [sp, #24]
 80057e8:	1aff      	subs	r7, r7, r3
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	9206      	str	r2, [sp, #24]
 80057ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	9309      	str	r3, [sp, #36]	; 0x24
 80057f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f6:	b1f3      	cbz	r3, 8005836 <_dtoa_r+0x7be>
 80057f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 80a8 	beq.w	8005950 <_dtoa_r+0x8d8>
 8005800:	2c00      	cmp	r4, #0
 8005802:	dd10      	ble.n	8005826 <_dtoa_r+0x7ae>
 8005804:	4631      	mov	r1, r6
 8005806:	4622      	mov	r2, r4
 8005808:	4628      	mov	r0, r5
 800580a:	f000 fc03 	bl	8006014 <__pow5mult>
 800580e:	465a      	mov	r2, fp
 8005810:	4601      	mov	r1, r0
 8005812:	4606      	mov	r6, r0
 8005814:	4628      	mov	r0, r5
 8005816:	f000 fb55 	bl	8005ec4 <__multiply>
 800581a:	4680      	mov	r8, r0
 800581c:	4659      	mov	r1, fp
 800581e:	4628      	mov	r0, r5
 8005820:	f000 fa84 	bl	8005d2c <_Bfree>
 8005824:	46c3      	mov	fp, r8
 8005826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005828:	1b1a      	subs	r2, r3, r4
 800582a:	d004      	beq.n	8005836 <_dtoa_r+0x7be>
 800582c:	4659      	mov	r1, fp
 800582e:	4628      	mov	r0, r5
 8005830:	f000 fbf0 	bl	8006014 <__pow5mult>
 8005834:	4683      	mov	fp, r0
 8005836:	2101      	movs	r1, #1
 8005838:	4628      	mov	r0, r5
 800583a:	f000 fb2d 	bl	8005e98 <__i2b>
 800583e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005840:	4604      	mov	r4, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	f340 8086 	ble.w	8005954 <_dtoa_r+0x8dc>
 8005848:	461a      	mov	r2, r3
 800584a:	4601      	mov	r1, r0
 800584c:	4628      	mov	r0, r5
 800584e:	f000 fbe1 	bl	8006014 <__pow5mult>
 8005852:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005854:	4604      	mov	r4, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	dd7f      	ble.n	800595a <_dtoa_r+0x8e2>
 800585a:	f04f 0800 	mov.w	r8, #0
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005864:	6918      	ldr	r0, [r3, #16]
 8005866:	f000 fac9 	bl	8005dfc <__hi0bits>
 800586a:	f1c0 0020 	rsb	r0, r0, #32
 800586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005870:	4418      	add	r0, r3
 8005872:	f010 001f 	ands.w	r0, r0, #31
 8005876:	f000 8092 	beq.w	800599e <_dtoa_r+0x926>
 800587a:	f1c0 0320 	rsb	r3, r0, #32
 800587e:	2b04      	cmp	r3, #4
 8005880:	f340 808a 	ble.w	8005998 <_dtoa_r+0x920>
 8005884:	f1c0 001c 	rsb	r0, r0, #28
 8005888:	9b06      	ldr	r3, [sp, #24]
 800588a:	4407      	add	r7, r0
 800588c:	4403      	add	r3, r0
 800588e:	9306      	str	r3, [sp, #24]
 8005890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005892:	4403      	add	r3, r0
 8005894:	9309      	str	r3, [sp, #36]	; 0x24
 8005896:	9b06      	ldr	r3, [sp, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	dd05      	ble.n	80058a8 <_dtoa_r+0x830>
 800589c:	4659      	mov	r1, fp
 800589e:	461a      	mov	r2, r3
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 fc11 	bl	80060c8 <__lshift>
 80058a6:	4683      	mov	fp, r0
 80058a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	dd05      	ble.n	80058ba <_dtoa_r+0x842>
 80058ae:	4621      	mov	r1, r4
 80058b0:	461a      	mov	r2, r3
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 fc08 	bl	80060c8 <__lshift>
 80058b8:	4604      	mov	r4, r0
 80058ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d070      	beq.n	80059a2 <_dtoa_r+0x92a>
 80058c0:	4621      	mov	r1, r4
 80058c2:	4658      	mov	r0, fp
 80058c4:	f000 fc70 	bl	80061a8 <__mcmp>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	da6a      	bge.n	80059a2 <_dtoa_r+0x92a>
 80058cc:	2300      	movs	r3, #0
 80058ce:	4659      	mov	r1, fp
 80058d0:	220a      	movs	r2, #10
 80058d2:	4628      	mov	r0, r5
 80058d4:	f000 fa4c 	bl	8005d70 <__multadd>
 80058d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058da:	4683      	mov	fp, r0
 80058dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8194 	beq.w	8005c0e <_dtoa_r+0xb96>
 80058e6:	4631      	mov	r1, r6
 80058e8:	2300      	movs	r3, #0
 80058ea:	220a      	movs	r2, #10
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 fa3f 	bl	8005d70 <__multadd>
 80058f2:	f1b9 0f00 	cmp.w	r9, #0
 80058f6:	4606      	mov	r6, r0
 80058f8:	f300 8093 	bgt.w	8005a22 <_dtoa_r+0x9aa>
 80058fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058fe:	2b02      	cmp	r3, #2
 8005900:	dc57      	bgt.n	80059b2 <_dtoa_r+0x93a>
 8005902:	e08e      	b.n	8005a22 <_dtoa_r+0x9aa>
 8005904:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005906:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800590a:	e757      	b.n	80057bc <_dtoa_r+0x744>
 800590c:	9b08      	ldr	r3, [sp, #32]
 800590e:	1e5c      	subs	r4, r3, #1
 8005910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005912:	42a3      	cmp	r3, r4
 8005914:	bfb7      	itett	lt
 8005916:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005918:	1b1c      	subge	r4, r3, r4
 800591a:	1ae2      	sublt	r2, r4, r3
 800591c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800591e:	bfbe      	ittt	lt
 8005920:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005922:	189b      	addlt	r3, r3, r2
 8005924:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005926:	9b08      	ldr	r3, [sp, #32]
 8005928:	bfb8      	it	lt
 800592a:	2400      	movlt	r4, #0
 800592c:	2b00      	cmp	r3, #0
 800592e:	bfbb      	ittet	lt
 8005930:	9b06      	ldrlt	r3, [sp, #24]
 8005932:	9a08      	ldrlt	r2, [sp, #32]
 8005934:	9f06      	ldrge	r7, [sp, #24]
 8005936:	1a9f      	sublt	r7, r3, r2
 8005938:	bfac      	ite	ge
 800593a:	9b08      	ldrge	r3, [sp, #32]
 800593c:	2300      	movlt	r3, #0
 800593e:	e73f      	b.n	80057c0 <_dtoa_r+0x748>
 8005940:	3fe00000 	.word	0x3fe00000
 8005944:	40240000 	.word	0x40240000
 8005948:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800594a:	9f06      	ldr	r7, [sp, #24]
 800594c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800594e:	e742      	b.n	80057d6 <_dtoa_r+0x75e>
 8005950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005952:	e76b      	b.n	800582c <_dtoa_r+0x7b4>
 8005954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005956:	2b01      	cmp	r3, #1
 8005958:	dc19      	bgt.n	800598e <_dtoa_r+0x916>
 800595a:	9b04      	ldr	r3, [sp, #16]
 800595c:	b9bb      	cbnz	r3, 800598e <_dtoa_r+0x916>
 800595e:	9b05      	ldr	r3, [sp, #20]
 8005960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005964:	b99b      	cbnz	r3, 800598e <_dtoa_r+0x916>
 8005966:	9b05      	ldr	r3, [sp, #20]
 8005968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800596c:	0d1b      	lsrs	r3, r3, #20
 800596e:	051b      	lsls	r3, r3, #20
 8005970:	b183      	cbz	r3, 8005994 <_dtoa_r+0x91c>
 8005972:	f04f 0801 	mov.w	r8, #1
 8005976:	9b06      	ldr	r3, [sp, #24]
 8005978:	3301      	adds	r3, #1
 800597a:	9306      	str	r3, [sp, #24]
 800597c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597e:	3301      	adds	r3, #1
 8005980:	9309      	str	r3, [sp, #36]	; 0x24
 8005982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	f47f af6a 	bne.w	800585e <_dtoa_r+0x7e6>
 800598a:	2001      	movs	r0, #1
 800598c:	e76f      	b.n	800586e <_dtoa_r+0x7f6>
 800598e:	f04f 0800 	mov.w	r8, #0
 8005992:	e7f6      	b.n	8005982 <_dtoa_r+0x90a>
 8005994:	4698      	mov	r8, r3
 8005996:	e7f4      	b.n	8005982 <_dtoa_r+0x90a>
 8005998:	f43f af7d 	beq.w	8005896 <_dtoa_r+0x81e>
 800599c:	4618      	mov	r0, r3
 800599e:	301c      	adds	r0, #28
 80059a0:	e772      	b.n	8005888 <_dtoa_r+0x810>
 80059a2:	9b08      	ldr	r3, [sp, #32]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	dc36      	bgt.n	8005a16 <_dtoa_r+0x99e>
 80059a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	dd33      	ble.n	8005a16 <_dtoa_r+0x99e>
 80059ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059b2:	f1b9 0f00 	cmp.w	r9, #0
 80059b6:	d10d      	bne.n	80059d4 <_dtoa_r+0x95c>
 80059b8:	4621      	mov	r1, r4
 80059ba:	464b      	mov	r3, r9
 80059bc:	2205      	movs	r2, #5
 80059be:	4628      	mov	r0, r5
 80059c0:	f000 f9d6 	bl	8005d70 <__multadd>
 80059c4:	4601      	mov	r1, r0
 80059c6:	4604      	mov	r4, r0
 80059c8:	4658      	mov	r0, fp
 80059ca:	f000 fbed 	bl	80061a8 <__mcmp>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f73f adb8 	bgt.w	8005544 <_dtoa_r+0x4cc>
 80059d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059d6:	9f03      	ldr	r7, [sp, #12]
 80059d8:	ea6f 0a03 	mvn.w	sl, r3
 80059dc:	f04f 0800 	mov.w	r8, #0
 80059e0:	4621      	mov	r1, r4
 80059e2:	4628      	mov	r0, r5
 80059e4:	f000 f9a2 	bl	8005d2c <_Bfree>
 80059e8:	2e00      	cmp	r6, #0
 80059ea:	f43f aea7 	beq.w	800573c <_dtoa_r+0x6c4>
 80059ee:	f1b8 0f00 	cmp.w	r8, #0
 80059f2:	d005      	beq.n	8005a00 <_dtoa_r+0x988>
 80059f4:	45b0      	cmp	r8, r6
 80059f6:	d003      	beq.n	8005a00 <_dtoa_r+0x988>
 80059f8:	4641      	mov	r1, r8
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 f996 	bl	8005d2c <_Bfree>
 8005a00:	4631      	mov	r1, r6
 8005a02:	4628      	mov	r0, r5
 8005a04:	f000 f992 	bl	8005d2c <_Bfree>
 8005a08:	e698      	b.n	800573c <_dtoa_r+0x6c4>
 8005a0a:	2400      	movs	r4, #0
 8005a0c:	4626      	mov	r6, r4
 8005a0e:	e7e1      	b.n	80059d4 <_dtoa_r+0x95c>
 8005a10:	46c2      	mov	sl, r8
 8005a12:	4626      	mov	r6, r4
 8005a14:	e596      	b.n	8005544 <_dtoa_r+0x4cc>
 8005a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80fd 	beq.w	8005c1c <_dtoa_r+0xba4>
 8005a22:	2f00      	cmp	r7, #0
 8005a24:	dd05      	ble.n	8005a32 <_dtoa_r+0x9ba>
 8005a26:	4631      	mov	r1, r6
 8005a28:	463a      	mov	r2, r7
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 fb4c 	bl	80060c8 <__lshift>
 8005a30:	4606      	mov	r6, r0
 8005a32:	f1b8 0f00 	cmp.w	r8, #0
 8005a36:	d05c      	beq.n	8005af2 <_dtoa_r+0xa7a>
 8005a38:	4628      	mov	r0, r5
 8005a3a:	6871      	ldr	r1, [r6, #4]
 8005a3c:	f000 f936 	bl	8005cac <_Balloc>
 8005a40:	4607      	mov	r7, r0
 8005a42:	b928      	cbnz	r0, 8005a50 <_dtoa_r+0x9d8>
 8005a44:	4602      	mov	r2, r0
 8005a46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005a4a:	4b7f      	ldr	r3, [pc, #508]	; (8005c48 <_dtoa_r+0xbd0>)
 8005a4c:	f7ff bb28 	b.w	80050a0 <_dtoa_r+0x28>
 8005a50:	6932      	ldr	r2, [r6, #16]
 8005a52:	f106 010c 	add.w	r1, r6, #12
 8005a56:	3202      	adds	r2, #2
 8005a58:	0092      	lsls	r2, r2, #2
 8005a5a:	300c      	adds	r0, #12
 8005a5c:	f7fe fd86 	bl	800456c <memcpy>
 8005a60:	2201      	movs	r2, #1
 8005a62:	4639      	mov	r1, r7
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 fb2f 	bl	80060c8 <__lshift>
 8005a6a:	46b0      	mov	r8, r6
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	9308      	str	r3, [sp, #32]
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	444b      	add	r3, r9
 8005a78:	930a      	str	r3, [sp, #40]	; 0x28
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	9309      	str	r3, [sp, #36]	; 0x24
 8005a82:	9b08      	ldr	r3, [sp, #32]
 8005a84:	4621      	mov	r1, r4
 8005a86:	3b01      	subs	r3, #1
 8005a88:	4658      	mov	r0, fp
 8005a8a:	9304      	str	r3, [sp, #16]
 8005a8c:	f7ff fa68 	bl	8004f60 <quorem>
 8005a90:	4603      	mov	r3, r0
 8005a92:	4641      	mov	r1, r8
 8005a94:	3330      	adds	r3, #48	; 0x30
 8005a96:	9006      	str	r0, [sp, #24]
 8005a98:	4658      	mov	r0, fp
 8005a9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a9c:	f000 fb84 	bl	80061a8 <__mcmp>
 8005aa0:	4632      	mov	r2, r6
 8005aa2:	4681      	mov	r9, r0
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 fb9a 	bl	80061e0 <__mdiff>
 8005aac:	68c2      	ldr	r2, [r0, #12]
 8005aae:	4607      	mov	r7, r0
 8005ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab2:	bb02      	cbnz	r2, 8005af6 <_dtoa_r+0xa7e>
 8005ab4:	4601      	mov	r1, r0
 8005ab6:	4658      	mov	r0, fp
 8005ab8:	f000 fb76 	bl	80061a8 <__mcmp>
 8005abc:	4602      	mov	r2, r0
 8005abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005ac8:	f000 f930 	bl	8005d2c <_Bfree>
 8005acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ad0:	9f08      	ldr	r7, [sp, #32]
 8005ad2:	ea43 0102 	orr.w	r1, r3, r2
 8005ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005adc:	d10d      	bne.n	8005afa <_dtoa_r+0xa82>
 8005ade:	2b39      	cmp	r3, #57	; 0x39
 8005ae0:	d029      	beq.n	8005b36 <_dtoa_r+0xabe>
 8005ae2:	f1b9 0f00 	cmp.w	r9, #0
 8005ae6:	dd01      	ble.n	8005aec <_dtoa_r+0xa74>
 8005ae8:	9b06      	ldr	r3, [sp, #24]
 8005aea:	3331      	adds	r3, #49	; 0x31
 8005aec:	9a04      	ldr	r2, [sp, #16]
 8005aee:	7013      	strb	r3, [r2, #0]
 8005af0:	e776      	b.n	80059e0 <_dtoa_r+0x968>
 8005af2:	4630      	mov	r0, r6
 8005af4:	e7b9      	b.n	8005a6a <_dtoa_r+0x9f2>
 8005af6:	2201      	movs	r2, #1
 8005af8:	e7e2      	b.n	8005ac0 <_dtoa_r+0xa48>
 8005afa:	f1b9 0f00 	cmp.w	r9, #0
 8005afe:	db06      	blt.n	8005b0e <_dtoa_r+0xa96>
 8005b00:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005b02:	ea41 0909 	orr.w	r9, r1, r9
 8005b06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b08:	ea59 0101 	orrs.w	r1, r9, r1
 8005b0c:	d120      	bne.n	8005b50 <_dtoa_r+0xad8>
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	ddec      	ble.n	8005aec <_dtoa_r+0xa74>
 8005b12:	4659      	mov	r1, fp
 8005b14:	2201      	movs	r2, #1
 8005b16:	4628      	mov	r0, r5
 8005b18:	9308      	str	r3, [sp, #32]
 8005b1a:	f000 fad5 	bl	80060c8 <__lshift>
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4683      	mov	fp, r0
 8005b22:	f000 fb41 	bl	80061a8 <__mcmp>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	9b08      	ldr	r3, [sp, #32]
 8005b2a:	dc02      	bgt.n	8005b32 <_dtoa_r+0xaba>
 8005b2c:	d1de      	bne.n	8005aec <_dtoa_r+0xa74>
 8005b2e:	07da      	lsls	r2, r3, #31
 8005b30:	d5dc      	bpl.n	8005aec <_dtoa_r+0xa74>
 8005b32:	2b39      	cmp	r3, #57	; 0x39
 8005b34:	d1d8      	bne.n	8005ae8 <_dtoa_r+0xa70>
 8005b36:	2339      	movs	r3, #57	; 0x39
 8005b38:	9a04      	ldr	r2, [sp, #16]
 8005b3a:	7013      	strb	r3, [r2, #0]
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	461f      	mov	r7, r3
 8005b40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	2a39      	cmp	r2, #57	; 0x39
 8005b48:	d050      	beq.n	8005bec <_dtoa_r+0xb74>
 8005b4a:	3201      	adds	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e747      	b.n	80059e0 <_dtoa_r+0x968>
 8005b50:	2a00      	cmp	r2, #0
 8005b52:	dd03      	ble.n	8005b5c <_dtoa_r+0xae4>
 8005b54:	2b39      	cmp	r3, #57	; 0x39
 8005b56:	d0ee      	beq.n	8005b36 <_dtoa_r+0xabe>
 8005b58:	3301      	adds	r3, #1
 8005b5a:	e7c7      	b.n	8005aec <_dtoa_r+0xa74>
 8005b5c:	9a08      	ldr	r2, [sp, #32]
 8005b5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b64:	428a      	cmp	r2, r1
 8005b66:	d02a      	beq.n	8005bbe <_dtoa_r+0xb46>
 8005b68:	4659      	mov	r1, fp
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	220a      	movs	r2, #10
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 f8fe 	bl	8005d70 <__multadd>
 8005b74:	45b0      	cmp	r8, r6
 8005b76:	4683      	mov	fp, r0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	f04f 020a 	mov.w	r2, #10
 8005b80:	4641      	mov	r1, r8
 8005b82:	4628      	mov	r0, r5
 8005b84:	d107      	bne.n	8005b96 <_dtoa_r+0xb1e>
 8005b86:	f000 f8f3 	bl	8005d70 <__multadd>
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	9b08      	ldr	r3, [sp, #32]
 8005b90:	3301      	adds	r3, #1
 8005b92:	9308      	str	r3, [sp, #32]
 8005b94:	e775      	b.n	8005a82 <_dtoa_r+0xa0a>
 8005b96:	f000 f8eb 	bl	8005d70 <__multadd>
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	220a      	movs	r2, #10
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 f8e4 	bl	8005d70 <__multadd>
 8005ba8:	4606      	mov	r6, r0
 8005baa:	e7f0      	b.n	8005b8e <_dtoa_r+0xb16>
 8005bac:	f1b9 0f00 	cmp.w	r9, #0
 8005bb0:	bfcc      	ite	gt
 8005bb2:	464f      	movgt	r7, r9
 8005bb4:	2701      	movle	r7, #1
 8005bb6:	f04f 0800 	mov.w	r8, #0
 8005bba:	9a03      	ldr	r2, [sp, #12]
 8005bbc:	4417      	add	r7, r2
 8005bbe:	4659      	mov	r1, fp
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	9308      	str	r3, [sp, #32]
 8005bc6:	f000 fa7f 	bl	80060c8 <__lshift>
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4683      	mov	fp, r0
 8005bce:	f000 faeb 	bl	80061a8 <__mcmp>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	dcb2      	bgt.n	8005b3c <_dtoa_r+0xac4>
 8005bd6:	d102      	bne.n	8005bde <_dtoa_r+0xb66>
 8005bd8:	9b08      	ldr	r3, [sp, #32]
 8005bda:	07db      	lsls	r3, r3, #31
 8005bdc:	d4ae      	bmi.n	8005b3c <_dtoa_r+0xac4>
 8005bde:	463b      	mov	r3, r7
 8005be0:	461f      	mov	r7, r3
 8005be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005be6:	2a30      	cmp	r2, #48	; 0x30
 8005be8:	d0fa      	beq.n	8005be0 <_dtoa_r+0xb68>
 8005bea:	e6f9      	b.n	80059e0 <_dtoa_r+0x968>
 8005bec:	9a03      	ldr	r2, [sp, #12]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d1a5      	bne.n	8005b3e <_dtoa_r+0xac6>
 8005bf2:	2331      	movs	r3, #49	; 0x31
 8005bf4:	f10a 0a01 	add.w	sl, sl, #1
 8005bf8:	e779      	b.n	8005aee <_dtoa_r+0xa76>
 8005bfa:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <_dtoa_r+0xbd4>)
 8005bfc:	f7ff baa8 	b.w	8005150 <_dtoa_r+0xd8>
 8005c00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f47f aa81 	bne.w	800510a <_dtoa_r+0x92>
 8005c08:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <_dtoa_r+0xbd8>)
 8005c0a:	f7ff baa1 	b.w	8005150 <_dtoa_r+0xd8>
 8005c0e:	f1b9 0f00 	cmp.w	r9, #0
 8005c12:	dc03      	bgt.n	8005c1c <_dtoa_r+0xba4>
 8005c14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	f73f aecb 	bgt.w	80059b2 <_dtoa_r+0x93a>
 8005c1c:	9f03      	ldr	r7, [sp, #12]
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4658      	mov	r0, fp
 8005c22:	f7ff f99d 	bl	8004f60 <quorem>
 8005c26:	9a03      	ldr	r2, [sp, #12]
 8005c28:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005c2c:	f807 3b01 	strb.w	r3, [r7], #1
 8005c30:	1aba      	subs	r2, r7, r2
 8005c32:	4591      	cmp	r9, r2
 8005c34:	ddba      	ble.n	8005bac <_dtoa_r+0xb34>
 8005c36:	4659      	mov	r1, fp
 8005c38:	2300      	movs	r3, #0
 8005c3a:	220a      	movs	r2, #10
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 f897 	bl	8005d70 <__multadd>
 8005c42:	4683      	mov	fp, r0
 8005c44:	e7eb      	b.n	8005c1e <_dtoa_r+0xba6>
 8005c46:	bf00      	nop
 8005c48:	08007826 	.word	0x08007826
 8005c4c:	080076ec 	.word	0x080076ec
 8005c50:	080077be 	.word	0x080077be

08005c54 <fiprintf>:
 8005c54:	b40e      	push	{r1, r2, r3}
 8005c56:	b503      	push	{r0, r1, lr}
 8005c58:	4601      	mov	r1, r0
 8005c5a:	ab03      	add	r3, sp, #12
 8005c5c:	4805      	ldr	r0, [pc, #20]	; (8005c74 <fiprintf+0x20>)
 8005c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c62:	6800      	ldr	r0, [r0, #0]
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	f000 fe17 	bl	8006898 <_vfiprintf_r>
 8005c6a:	b002      	add	sp, #8
 8005c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c70:	b003      	add	sp, #12
 8005c72:	4770      	bx	lr
 8005c74:	2000000c 	.word	0x2000000c

08005c78 <_localeconv_r>:
 8005c78:	4800      	ldr	r0, [pc, #0]	; (8005c7c <_localeconv_r+0x4>)
 8005c7a:	4770      	bx	lr
 8005c7c:	20000160 	.word	0x20000160

08005c80 <malloc>:
 8005c80:	4b02      	ldr	r3, [pc, #8]	; (8005c8c <malloc+0xc>)
 8005c82:	4601      	mov	r1, r0
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	f000 bc0f 	b.w	80064a8 <_malloc_r>
 8005c8a:	bf00      	nop
 8005c8c:	2000000c 	.word	0x2000000c

08005c90 <memchr>:
 8005c90:	4603      	mov	r3, r0
 8005c92:	b510      	push	{r4, lr}
 8005c94:	b2c9      	uxtb	r1, r1
 8005c96:	4402      	add	r2, r0
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	d101      	bne.n	8005ca2 <memchr+0x12>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	e003      	b.n	8005caa <memchr+0x1a>
 8005ca2:	7804      	ldrb	r4, [r0, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	428c      	cmp	r4, r1
 8005ca8:	d1f6      	bne.n	8005c98 <memchr+0x8>
 8005caa:	bd10      	pop	{r4, pc}

08005cac <_Balloc>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	b976      	cbnz	r6, 8005cd4 <_Balloc+0x28>
 8005cb6:	2010      	movs	r0, #16
 8005cb8:	f7ff ffe2 	bl	8005c80 <malloc>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6260      	str	r0, [r4, #36]	; 0x24
 8005cc0:	b920      	cbnz	r0, 8005ccc <_Balloc+0x20>
 8005cc2:	2166      	movs	r1, #102	; 0x66
 8005cc4:	4b17      	ldr	r3, [pc, #92]	; (8005d24 <_Balloc+0x78>)
 8005cc6:	4818      	ldr	r0, [pc, #96]	; (8005d28 <_Balloc+0x7c>)
 8005cc8:	f7ff f92c 	bl	8004f24 <__assert_func>
 8005ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd0:	6006      	str	r6, [r0, #0]
 8005cd2:	60c6      	str	r6, [r0, #12]
 8005cd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cd6:	68f3      	ldr	r3, [r6, #12]
 8005cd8:	b183      	cbz	r3, 8005cfc <_Balloc+0x50>
 8005cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ce2:	b9b8      	cbnz	r0, 8005d14 <_Balloc+0x68>
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8005cea:	1d72      	adds	r2, r6, #5
 8005cec:	4620      	mov	r0, r4
 8005cee:	0092      	lsls	r2, r2, #2
 8005cf0:	f000 fb5e 	bl	80063b0 <_calloc_r>
 8005cf4:	b160      	cbz	r0, 8005d10 <_Balloc+0x64>
 8005cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cfa:	e00e      	b.n	8005d1a <_Balloc+0x6e>
 8005cfc:	2221      	movs	r2, #33	; 0x21
 8005cfe:	2104      	movs	r1, #4
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fb55 	bl	80063b0 <_calloc_r>
 8005d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d08:	60f0      	str	r0, [r6, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e4      	bne.n	8005cda <_Balloc+0x2e>
 8005d10:	2000      	movs	r0, #0
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	6802      	ldr	r2, [r0, #0]
 8005d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d20:	e7f7      	b.n	8005d12 <_Balloc+0x66>
 8005d22:	bf00      	nop
 8005d24:	08007710 	.word	0x08007710
 8005d28:	08007837 	.word	0x08007837

08005d2c <_Bfree>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d30:	4605      	mov	r5, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	b976      	cbnz	r6, 8005d54 <_Bfree+0x28>
 8005d36:	2010      	movs	r0, #16
 8005d38:	f7ff ffa2 	bl	8005c80 <malloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	6268      	str	r0, [r5, #36]	; 0x24
 8005d40:	b920      	cbnz	r0, 8005d4c <_Bfree+0x20>
 8005d42:	218a      	movs	r1, #138	; 0x8a
 8005d44:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <_Bfree+0x3c>)
 8005d46:	4809      	ldr	r0, [pc, #36]	; (8005d6c <_Bfree+0x40>)
 8005d48:	f7ff f8ec 	bl	8004f24 <__assert_func>
 8005d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d50:	6006      	str	r6, [r0, #0]
 8005d52:	60c6      	str	r6, [r0, #12]
 8005d54:	b13c      	cbz	r4, 8005d66 <_Bfree+0x3a>
 8005d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d58:	6862      	ldr	r2, [r4, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d60:	6021      	str	r1, [r4, #0]
 8005d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	08007710 	.word	0x08007710
 8005d6c:	08007837 	.word	0x08007837

08005d70 <__multadd>:
 8005d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d74:	4607      	mov	r7, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	461e      	mov	r6, r3
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	690d      	ldr	r5, [r1, #16]
 8005d7e:	f101 0c14 	add.w	ip, r1, #20
 8005d82:	f8dc 3000 	ldr.w	r3, [ip]
 8005d86:	3001      	adds	r0, #1
 8005d88:	b299      	uxth	r1, r3
 8005d8a:	fb02 6101 	mla	r1, r2, r1, r6
 8005d8e:	0c1e      	lsrs	r6, r3, #16
 8005d90:	0c0b      	lsrs	r3, r1, #16
 8005d92:	fb02 3306 	mla	r3, r2, r6, r3
 8005d96:	b289      	uxth	r1, r1
 8005d98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d9c:	4285      	cmp	r5, r0
 8005d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005da2:	f84c 1b04 	str.w	r1, [ip], #4
 8005da6:	dcec      	bgt.n	8005d82 <__multadd+0x12>
 8005da8:	b30e      	cbz	r6, 8005dee <__multadd+0x7e>
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc19      	bgt.n	8005de4 <__multadd+0x74>
 8005db0:	6861      	ldr	r1, [r4, #4]
 8005db2:	4638      	mov	r0, r7
 8005db4:	3101      	adds	r1, #1
 8005db6:	f7ff ff79 	bl	8005cac <_Balloc>
 8005dba:	4680      	mov	r8, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <__multadd+0x5a>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	21b5      	movs	r1, #181	; 0xb5
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <__multadd+0x84>)
 8005dc4:	480c      	ldr	r0, [pc, #48]	; (8005df8 <__multadd+0x88>)
 8005dc6:	f7ff f8ad 	bl	8004f24 <__assert_func>
 8005dca:	6922      	ldr	r2, [r4, #16]
 8005dcc:	f104 010c 	add.w	r1, r4, #12
 8005dd0:	3202      	adds	r2, #2
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	300c      	adds	r0, #12
 8005dd6:	f7fe fbc9 	bl	800456c <memcpy>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff ffa5 	bl	8005d2c <_Bfree>
 8005de2:	4644      	mov	r4, r8
 8005de4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005de8:	3501      	adds	r5, #1
 8005dea:	615e      	str	r6, [r3, #20]
 8005dec:	6125      	str	r5, [r4, #16]
 8005dee:	4620      	mov	r0, r4
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df4:	08007826 	.word	0x08007826
 8005df8:	08007837 	.word	0x08007837

08005dfc <__hi0bits>:
 8005dfc:	0c02      	lsrs	r2, r0, #16
 8005dfe:	0412      	lsls	r2, r2, #16
 8005e00:	4603      	mov	r3, r0
 8005e02:	b9ca      	cbnz	r2, 8005e38 <__hi0bits+0x3c>
 8005e04:	0403      	lsls	r3, r0, #16
 8005e06:	2010      	movs	r0, #16
 8005e08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e0c:	bf04      	itt	eq
 8005e0e:	021b      	lsleq	r3, r3, #8
 8005e10:	3008      	addeq	r0, #8
 8005e12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e16:	bf04      	itt	eq
 8005e18:	011b      	lsleq	r3, r3, #4
 8005e1a:	3004      	addeq	r0, #4
 8005e1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e20:	bf04      	itt	eq
 8005e22:	009b      	lsleq	r3, r3, #2
 8005e24:	3002      	addeq	r0, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	db05      	blt.n	8005e36 <__hi0bits+0x3a>
 8005e2a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e2e:	f100 0001 	add.w	r0, r0, #1
 8005e32:	bf08      	it	eq
 8005e34:	2020      	moveq	r0, #32
 8005e36:	4770      	bx	lr
 8005e38:	2000      	movs	r0, #0
 8005e3a:	e7e5      	b.n	8005e08 <__hi0bits+0xc>

08005e3c <__lo0bits>:
 8005e3c:	6803      	ldr	r3, [r0, #0]
 8005e3e:	4602      	mov	r2, r0
 8005e40:	f013 0007 	ands.w	r0, r3, #7
 8005e44:	d00b      	beq.n	8005e5e <__lo0bits+0x22>
 8005e46:	07d9      	lsls	r1, r3, #31
 8005e48:	d421      	bmi.n	8005e8e <__lo0bits+0x52>
 8005e4a:	0798      	lsls	r0, r3, #30
 8005e4c:	bf49      	itett	mi
 8005e4e:	085b      	lsrmi	r3, r3, #1
 8005e50:	089b      	lsrpl	r3, r3, #2
 8005e52:	2001      	movmi	r0, #1
 8005e54:	6013      	strmi	r3, [r2, #0]
 8005e56:	bf5c      	itt	pl
 8005e58:	2002      	movpl	r0, #2
 8005e5a:	6013      	strpl	r3, [r2, #0]
 8005e5c:	4770      	bx	lr
 8005e5e:	b299      	uxth	r1, r3
 8005e60:	b909      	cbnz	r1, 8005e66 <__lo0bits+0x2a>
 8005e62:	2010      	movs	r0, #16
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	b2d9      	uxtb	r1, r3
 8005e68:	b909      	cbnz	r1, 8005e6e <__lo0bits+0x32>
 8005e6a:	3008      	adds	r0, #8
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	0719      	lsls	r1, r3, #28
 8005e70:	bf04      	itt	eq
 8005e72:	091b      	lsreq	r3, r3, #4
 8005e74:	3004      	addeq	r0, #4
 8005e76:	0799      	lsls	r1, r3, #30
 8005e78:	bf04      	itt	eq
 8005e7a:	089b      	lsreq	r3, r3, #2
 8005e7c:	3002      	addeq	r0, #2
 8005e7e:	07d9      	lsls	r1, r3, #31
 8005e80:	d403      	bmi.n	8005e8a <__lo0bits+0x4e>
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	f100 0001 	add.w	r0, r0, #1
 8005e88:	d003      	beq.n	8005e92 <__lo0bits+0x56>
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4770      	bx	lr
 8005e8e:	2000      	movs	r0, #0
 8005e90:	4770      	bx	lr
 8005e92:	2020      	movs	r0, #32
 8005e94:	4770      	bx	lr
	...

08005e98 <__i2b>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	f7ff ff05 	bl	8005cac <_Balloc>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	b928      	cbnz	r0, 8005eb2 <__i2b+0x1a>
 8005ea6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005eaa:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <__i2b+0x24>)
 8005eac:	4804      	ldr	r0, [pc, #16]	; (8005ec0 <__i2b+0x28>)
 8005eae:	f7ff f839 	bl	8004f24 <__assert_func>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	6144      	str	r4, [r0, #20]
 8005eb6:	6103      	str	r3, [r0, #16]
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	bf00      	nop
 8005ebc:	08007826 	.word	0x08007826
 8005ec0:	08007837 	.word	0x08007837

08005ec4 <__multiply>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	4691      	mov	r9, r2
 8005eca:	690a      	ldr	r2, [r1, #16]
 8005ecc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	bfbe      	ittt	lt
 8005ed6:	460b      	movlt	r3, r1
 8005ed8:	464c      	movlt	r4, r9
 8005eda:	4699      	movlt	r9, r3
 8005edc:	6927      	ldr	r7, [r4, #16]
 8005ede:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ee2:	68a3      	ldr	r3, [r4, #8]
 8005ee4:	6861      	ldr	r1, [r4, #4]
 8005ee6:	eb07 060a 	add.w	r6, r7, sl
 8005eea:	42b3      	cmp	r3, r6
 8005eec:	b085      	sub	sp, #20
 8005eee:	bfb8      	it	lt
 8005ef0:	3101      	addlt	r1, #1
 8005ef2:	f7ff fedb 	bl	8005cac <_Balloc>
 8005ef6:	b930      	cbnz	r0, 8005f06 <__multiply+0x42>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	f240 115d 	movw	r1, #349	; 0x15d
 8005efe:	4b43      	ldr	r3, [pc, #268]	; (800600c <__multiply+0x148>)
 8005f00:	4843      	ldr	r0, [pc, #268]	; (8006010 <__multiply+0x14c>)
 8005f02:	f7ff f80f 	bl	8004f24 <__assert_func>
 8005f06:	f100 0514 	add.w	r5, r0, #20
 8005f0a:	462b      	mov	r3, r5
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f12:	4543      	cmp	r3, r8
 8005f14:	d321      	bcc.n	8005f5a <__multiply+0x96>
 8005f16:	f104 0314 	add.w	r3, r4, #20
 8005f1a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f1e:	f109 0314 	add.w	r3, r9, #20
 8005f22:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f26:	9202      	str	r2, [sp, #8]
 8005f28:	1b3a      	subs	r2, r7, r4
 8005f2a:	3a15      	subs	r2, #21
 8005f2c:	f022 0203 	bic.w	r2, r2, #3
 8005f30:	3204      	adds	r2, #4
 8005f32:	f104 0115 	add.w	r1, r4, #21
 8005f36:	428f      	cmp	r7, r1
 8005f38:	bf38      	it	cc
 8005f3a:	2204      	movcc	r2, #4
 8005f3c:	9201      	str	r2, [sp, #4]
 8005f3e:	9a02      	ldr	r2, [sp, #8]
 8005f40:	9303      	str	r3, [sp, #12]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d80c      	bhi.n	8005f60 <__multiply+0x9c>
 8005f46:	2e00      	cmp	r6, #0
 8005f48:	dd03      	ble.n	8005f52 <__multiply+0x8e>
 8005f4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d059      	beq.n	8006006 <__multiply+0x142>
 8005f52:	6106      	str	r6, [r0, #16]
 8005f54:	b005      	add	sp, #20
 8005f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5a:	f843 2b04 	str.w	r2, [r3], #4
 8005f5e:	e7d8      	b.n	8005f12 <__multiply+0x4e>
 8005f60:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f64:	f1ba 0f00 	cmp.w	sl, #0
 8005f68:	d023      	beq.n	8005fb2 <__multiply+0xee>
 8005f6a:	46a9      	mov	r9, r5
 8005f6c:	f04f 0c00 	mov.w	ip, #0
 8005f70:	f104 0e14 	add.w	lr, r4, #20
 8005f74:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f78:	f8d9 1000 	ldr.w	r1, [r9]
 8005f7c:	fa1f fb82 	uxth.w	fp, r2
 8005f80:	b289      	uxth	r1, r1
 8005f82:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f86:	4461      	add	r1, ip
 8005f88:	f8d9 c000 	ldr.w	ip, [r9]
 8005f8c:	0c12      	lsrs	r2, r2, #16
 8005f8e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f92:	fb0a c202 	mla	r2, sl, r2, ip
 8005f96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f9a:	b289      	uxth	r1, r1
 8005f9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fa0:	4577      	cmp	r7, lr
 8005fa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fa6:	f849 1b04 	str.w	r1, [r9], #4
 8005faa:	d8e3      	bhi.n	8005f74 <__multiply+0xb0>
 8005fac:	9a01      	ldr	r2, [sp, #4]
 8005fae:	f845 c002 	str.w	ip, [r5, r2]
 8005fb2:	9a03      	ldr	r2, [sp, #12]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fba:	f1b9 0f00 	cmp.w	r9, #0
 8005fbe:	d020      	beq.n	8006002 <__multiply+0x13e>
 8005fc0:	46ae      	mov	lr, r5
 8005fc2:	f04f 0a00 	mov.w	sl, #0
 8005fc6:	6829      	ldr	r1, [r5, #0]
 8005fc8:	f104 0c14 	add.w	ip, r4, #20
 8005fcc:	f8bc b000 	ldrh.w	fp, [ip]
 8005fd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fd4:	b289      	uxth	r1, r1
 8005fd6:	fb09 220b 	mla	r2, r9, fp, r2
 8005fda:	4492      	add	sl, r2
 8005fdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005fe0:	f84e 1b04 	str.w	r1, [lr], #4
 8005fe4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005fe8:	f8be 1000 	ldrh.w	r1, [lr]
 8005fec:	0c12      	lsrs	r2, r2, #16
 8005fee:	fb09 1102 	mla	r1, r9, r2, r1
 8005ff2:	4567      	cmp	r7, ip
 8005ff4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ff8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ffc:	d8e6      	bhi.n	8005fcc <__multiply+0x108>
 8005ffe:	9a01      	ldr	r2, [sp, #4]
 8006000:	50a9      	str	r1, [r5, r2]
 8006002:	3504      	adds	r5, #4
 8006004:	e79b      	b.n	8005f3e <__multiply+0x7a>
 8006006:	3e01      	subs	r6, #1
 8006008:	e79d      	b.n	8005f46 <__multiply+0x82>
 800600a:	bf00      	nop
 800600c:	08007826 	.word	0x08007826
 8006010:	08007837 	.word	0x08007837

08006014 <__pow5mult>:
 8006014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006018:	4615      	mov	r5, r2
 800601a:	f012 0203 	ands.w	r2, r2, #3
 800601e:	4606      	mov	r6, r0
 8006020:	460f      	mov	r7, r1
 8006022:	d007      	beq.n	8006034 <__pow5mult+0x20>
 8006024:	4c25      	ldr	r4, [pc, #148]	; (80060bc <__pow5mult+0xa8>)
 8006026:	3a01      	subs	r2, #1
 8006028:	2300      	movs	r3, #0
 800602a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800602e:	f7ff fe9f 	bl	8005d70 <__multadd>
 8006032:	4607      	mov	r7, r0
 8006034:	10ad      	asrs	r5, r5, #2
 8006036:	d03d      	beq.n	80060b4 <__pow5mult+0xa0>
 8006038:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800603a:	b97c      	cbnz	r4, 800605c <__pow5mult+0x48>
 800603c:	2010      	movs	r0, #16
 800603e:	f7ff fe1f 	bl	8005c80 <malloc>
 8006042:	4602      	mov	r2, r0
 8006044:	6270      	str	r0, [r6, #36]	; 0x24
 8006046:	b928      	cbnz	r0, 8006054 <__pow5mult+0x40>
 8006048:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800604c:	4b1c      	ldr	r3, [pc, #112]	; (80060c0 <__pow5mult+0xac>)
 800604e:	481d      	ldr	r0, [pc, #116]	; (80060c4 <__pow5mult+0xb0>)
 8006050:	f7fe ff68 	bl	8004f24 <__assert_func>
 8006054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006058:	6004      	str	r4, [r0, #0]
 800605a:	60c4      	str	r4, [r0, #12]
 800605c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006060:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006064:	b94c      	cbnz	r4, 800607a <__pow5mult+0x66>
 8006066:	f240 2171 	movw	r1, #625	; 0x271
 800606a:	4630      	mov	r0, r6
 800606c:	f7ff ff14 	bl	8005e98 <__i2b>
 8006070:	2300      	movs	r3, #0
 8006072:	4604      	mov	r4, r0
 8006074:	f8c8 0008 	str.w	r0, [r8, #8]
 8006078:	6003      	str	r3, [r0, #0]
 800607a:	f04f 0900 	mov.w	r9, #0
 800607e:	07eb      	lsls	r3, r5, #31
 8006080:	d50a      	bpl.n	8006098 <__pow5mult+0x84>
 8006082:	4639      	mov	r1, r7
 8006084:	4622      	mov	r2, r4
 8006086:	4630      	mov	r0, r6
 8006088:	f7ff ff1c 	bl	8005ec4 <__multiply>
 800608c:	4680      	mov	r8, r0
 800608e:	4639      	mov	r1, r7
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff fe4b 	bl	8005d2c <_Bfree>
 8006096:	4647      	mov	r7, r8
 8006098:	106d      	asrs	r5, r5, #1
 800609a:	d00b      	beq.n	80060b4 <__pow5mult+0xa0>
 800609c:	6820      	ldr	r0, [r4, #0]
 800609e:	b938      	cbnz	r0, 80060b0 <__pow5mult+0x9c>
 80060a0:	4622      	mov	r2, r4
 80060a2:	4621      	mov	r1, r4
 80060a4:	4630      	mov	r0, r6
 80060a6:	f7ff ff0d 	bl	8005ec4 <__multiply>
 80060aa:	6020      	str	r0, [r4, #0]
 80060ac:	f8c0 9000 	str.w	r9, [r0]
 80060b0:	4604      	mov	r4, r0
 80060b2:	e7e4      	b.n	800607e <__pow5mult+0x6a>
 80060b4:	4638      	mov	r0, r7
 80060b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ba:	bf00      	nop
 80060bc:	08007988 	.word	0x08007988
 80060c0:	08007710 	.word	0x08007710
 80060c4:	08007837 	.word	0x08007837

080060c8 <__lshift>:
 80060c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	460c      	mov	r4, r1
 80060ce:	4607      	mov	r7, r0
 80060d0:	4691      	mov	r9, r2
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	6849      	ldr	r1, [r1, #4]
 80060d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060da:	68a3      	ldr	r3, [r4, #8]
 80060dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060e0:	f108 0601 	add.w	r6, r8, #1
 80060e4:	42b3      	cmp	r3, r6
 80060e6:	db0b      	blt.n	8006100 <__lshift+0x38>
 80060e8:	4638      	mov	r0, r7
 80060ea:	f7ff fddf 	bl	8005cac <_Balloc>
 80060ee:	4605      	mov	r5, r0
 80060f0:	b948      	cbnz	r0, 8006106 <__lshift+0x3e>
 80060f2:	4602      	mov	r2, r0
 80060f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80060f8:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <__lshift+0xd8>)
 80060fa:	482a      	ldr	r0, [pc, #168]	; (80061a4 <__lshift+0xdc>)
 80060fc:	f7fe ff12 	bl	8004f24 <__assert_func>
 8006100:	3101      	adds	r1, #1
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	e7ee      	b.n	80060e4 <__lshift+0x1c>
 8006106:	2300      	movs	r3, #0
 8006108:	f100 0114 	add.w	r1, r0, #20
 800610c:	f100 0210 	add.w	r2, r0, #16
 8006110:	4618      	mov	r0, r3
 8006112:	4553      	cmp	r3, sl
 8006114:	db37      	blt.n	8006186 <__lshift+0xbe>
 8006116:	6920      	ldr	r0, [r4, #16]
 8006118:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800611c:	f104 0314 	add.w	r3, r4, #20
 8006120:	f019 091f 	ands.w	r9, r9, #31
 8006124:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006128:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800612c:	d02f      	beq.n	800618e <__lshift+0xc6>
 800612e:	468a      	mov	sl, r1
 8006130:	f04f 0c00 	mov.w	ip, #0
 8006134:	f1c9 0e20 	rsb	lr, r9, #32
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	fa02 f209 	lsl.w	r2, r2, r9
 800613e:	ea42 020c 	orr.w	r2, r2, ip
 8006142:	f84a 2b04 	str.w	r2, [sl], #4
 8006146:	f853 2b04 	ldr.w	r2, [r3], #4
 800614a:	4298      	cmp	r0, r3
 800614c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006150:	d8f2      	bhi.n	8006138 <__lshift+0x70>
 8006152:	1b03      	subs	r3, r0, r4
 8006154:	3b15      	subs	r3, #21
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	3304      	adds	r3, #4
 800615c:	f104 0215 	add.w	r2, r4, #21
 8006160:	4290      	cmp	r0, r2
 8006162:	bf38      	it	cc
 8006164:	2304      	movcc	r3, #4
 8006166:	f841 c003 	str.w	ip, [r1, r3]
 800616a:	f1bc 0f00 	cmp.w	ip, #0
 800616e:	d001      	beq.n	8006174 <__lshift+0xac>
 8006170:	f108 0602 	add.w	r6, r8, #2
 8006174:	3e01      	subs	r6, #1
 8006176:	4638      	mov	r0, r7
 8006178:	4621      	mov	r1, r4
 800617a:	612e      	str	r6, [r5, #16]
 800617c:	f7ff fdd6 	bl	8005d2c <_Bfree>
 8006180:	4628      	mov	r0, r5
 8006182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006186:	f842 0f04 	str.w	r0, [r2, #4]!
 800618a:	3301      	adds	r3, #1
 800618c:	e7c1      	b.n	8006112 <__lshift+0x4a>
 800618e:	3904      	subs	r1, #4
 8006190:	f853 2b04 	ldr.w	r2, [r3], #4
 8006194:	4298      	cmp	r0, r3
 8006196:	f841 2f04 	str.w	r2, [r1, #4]!
 800619a:	d8f9      	bhi.n	8006190 <__lshift+0xc8>
 800619c:	e7ea      	b.n	8006174 <__lshift+0xac>
 800619e:	bf00      	nop
 80061a0:	08007826 	.word	0x08007826
 80061a4:	08007837 	.word	0x08007837

080061a8 <__mcmp>:
 80061a8:	4603      	mov	r3, r0
 80061aa:	690a      	ldr	r2, [r1, #16]
 80061ac:	6900      	ldr	r0, [r0, #16]
 80061ae:	b530      	push	{r4, r5, lr}
 80061b0:	1a80      	subs	r0, r0, r2
 80061b2:	d10d      	bne.n	80061d0 <__mcmp+0x28>
 80061b4:	3314      	adds	r3, #20
 80061b6:	3114      	adds	r1, #20
 80061b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061c8:	4295      	cmp	r5, r2
 80061ca:	d002      	beq.n	80061d2 <__mcmp+0x2a>
 80061cc:	d304      	bcc.n	80061d8 <__mcmp+0x30>
 80061ce:	2001      	movs	r0, #1
 80061d0:	bd30      	pop	{r4, r5, pc}
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	d3f4      	bcc.n	80061c0 <__mcmp+0x18>
 80061d6:	e7fb      	b.n	80061d0 <__mcmp+0x28>
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	e7f8      	b.n	80061d0 <__mcmp+0x28>
	...

080061e0 <__mdiff>:
 80061e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	460d      	mov	r5, r1
 80061e6:	4607      	mov	r7, r0
 80061e8:	4611      	mov	r1, r2
 80061ea:	4628      	mov	r0, r5
 80061ec:	4614      	mov	r4, r2
 80061ee:	f7ff ffdb 	bl	80061a8 <__mcmp>
 80061f2:	1e06      	subs	r6, r0, #0
 80061f4:	d111      	bne.n	800621a <__mdiff+0x3a>
 80061f6:	4631      	mov	r1, r6
 80061f8:	4638      	mov	r0, r7
 80061fa:	f7ff fd57 	bl	8005cac <_Balloc>
 80061fe:	4602      	mov	r2, r0
 8006200:	b928      	cbnz	r0, 800620e <__mdiff+0x2e>
 8006202:	f240 2132 	movw	r1, #562	; 0x232
 8006206:	4b3a      	ldr	r3, [pc, #232]	; (80062f0 <__mdiff+0x110>)
 8006208:	483a      	ldr	r0, [pc, #232]	; (80062f4 <__mdiff+0x114>)
 800620a:	f7fe fe8b 	bl	8004f24 <__assert_func>
 800620e:	2301      	movs	r3, #1
 8006210:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006214:	4610      	mov	r0, r2
 8006216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621a:	bfa4      	itt	ge
 800621c:	4623      	movge	r3, r4
 800621e:	462c      	movge	r4, r5
 8006220:	4638      	mov	r0, r7
 8006222:	6861      	ldr	r1, [r4, #4]
 8006224:	bfa6      	itte	ge
 8006226:	461d      	movge	r5, r3
 8006228:	2600      	movge	r6, #0
 800622a:	2601      	movlt	r6, #1
 800622c:	f7ff fd3e 	bl	8005cac <_Balloc>
 8006230:	4602      	mov	r2, r0
 8006232:	b918      	cbnz	r0, 800623c <__mdiff+0x5c>
 8006234:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006238:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <__mdiff+0x110>)
 800623a:	e7e5      	b.n	8006208 <__mdiff+0x28>
 800623c:	f102 0814 	add.w	r8, r2, #20
 8006240:	46c2      	mov	sl, r8
 8006242:	f04f 0c00 	mov.w	ip, #0
 8006246:	6927      	ldr	r7, [r4, #16]
 8006248:	60c6      	str	r6, [r0, #12]
 800624a:	692e      	ldr	r6, [r5, #16]
 800624c:	f104 0014 	add.w	r0, r4, #20
 8006250:	f105 0914 	add.w	r9, r5, #20
 8006254:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006258:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800625c:	3410      	adds	r4, #16
 800625e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006262:	f859 3b04 	ldr.w	r3, [r9], #4
 8006266:	fa1f f18b 	uxth.w	r1, fp
 800626a:	448c      	add	ip, r1
 800626c:	b299      	uxth	r1, r3
 800626e:	0c1b      	lsrs	r3, r3, #16
 8006270:	ebac 0101 	sub.w	r1, ip, r1
 8006274:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006278:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800627c:	b289      	uxth	r1, r1
 800627e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006282:	454e      	cmp	r6, r9
 8006284:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006288:	f84a 3b04 	str.w	r3, [sl], #4
 800628c:	d8e7      	bhi.n	800625e <__mdiff+0x7e>
 800628e:	1b73      	subs	r3, r6, r5
 8006290:	3b15      	subs	r3, #21
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	3515      	adds	r5, #21
 8006298:	3304      	adds	r3, #4
 800629a:	42ae      	cmp	r6, r5
 800629c:	bf38      	it	cc
 800629e:	2304      	movcc	r3, #4
 80062a0:	4418      	add	r0, r3
 80062a2:	4443      	add	r3, r8
 80062a4:	461e      	mov	r6, r3
 80062a6:	4605      	mov	r5, r0
 80062a8:	4575      	cmp	r5, lr
 80062aa:	d30e      	bcc.n	80062ca <__mdiff+0xea>
 80062ac:	f10e 0103 	add.w	r1, lr, #3
 80062b0:	1a09      	subs	r1, r1, r0
 80062b2:	f021 0103 	bic.w	r1, r1, #3
 80062b6:	3803      	subs	r0, #3
 80062b8:	4586      	cmp	lr, r0
 80062ba:	bf38      	it	cc
 80062bc:	2100      	movcc	r1, #0
 80062be:	4419      	add	r1, r3
 80062c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80062c4:	b18b      	cbz	r3, 80062ea <__mdiff+0x10a>
 80062c6:	6117      	str	r7, [r2, #16]
 80062c8:	e7a4      	b.n	8006214 <__mdiff+0x34>
 80062ca:	f855 8b04 	ldr.w	r8, [r5], #4
 80062ce:	fa1f f188 	uxth.w	r1, r8
 80062d2:	4461      	add	r1, ip
 80062d4:	140c      	asrs	r4, r1, #16
 80062d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062da:	b289      	uxth	r1, r1
 80062dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80062e0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80062e4:	f846 1b04 	str.w	r1, [r6], #4
 80062e8:	e7de      	b.n	80062a8 <__mdiff+0xc8>
 80062ea:	3f01      	subs	r7, #1
 80062ec:	e7e8      	b.n	80062c0 <__mdiff+0xe0>
 80062ee:	bf00      	nop
 80062f0:	08007826 	.word	0x08007826
 80062f4:	08007837 	.word	0x08007837

080062f8 <__d2b>:
 80062f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80062fc:	2101      	movs	r1, #1
 80062fe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006302:	4690      	mov	r8, r2
 8006304:	461d      	mov	r5, r3
 8006306:	f7ff fcd1 	bl	8005cac <_Balloc>
 800630a:	4604      	mov	r4, r0
 800630c:	b930      	cbnz	r0, 800631c <__d2b+0x24>
 800630e:	4602      	mov	r2, r0
 8006310:	f240 310a 	movw	r1, #778	; 0x30a
 8006314:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <__d2b+0xb0>)
 8006316:	4825      	ldr	r0, [pc, #148]	; (80063ac <__d2b+0xb4>)
 8006318:	f7fe fe04 	bl	8004f24 <__assert_func>
 800631c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006320:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006324:	bb2d      	cbnz	r5, 8006372 <__d2b+0x7a>
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	f1b8 0300 	subs.w	r3, r8, #0
 800632c:	d026      	beq.n	800637c <__d2b+0x84>
 800632e:	4668      	mov	r0, sp
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	f7ff fd83 	bl	8005e3c <__lo0bits>
 8006336:	9900      	ldr	r1, [sp, #0]
 8006338:	b1f0      	cbz	r0, 8006378 <__d2b+0x80>
 800633a:	9a01      	ldr	r2, [sp, #4]
 800633c:	f1c0 0320 	rsb	r3, r0, #32
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	430b      	orrs	r3, r1
 8006346:	40c2      	lsrs	r2, r0
 8006348:	6163      	str	r3, [r4, #20]
 800634a:	9201      	str	r2, [sp, #4]
 800634c:	9b01      	ldr	r3, [sp, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	bf14      	ite	ne
 8006352:	2102      	movne	r1, #2
 8006354:	2101      	moveq	r1, #1
 8006356:	61a3      	str	r3, [r4, #24]
 8006358:	6121      	str	r1, [r4, #16]
 800635a:	b1c5      	cbz	r5, 800638e <__d2b+0x96>
 800635c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006360:	4405      	add	r5, r0
 8006362:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006366:	603d      	str	r5, [r7, #0]
 8006368:	6030      	str	r0, [r6, #0]
 800636a:	4620      	mov	r0, r4
 800636c:	b002      	add	sp, #8
 800636e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006376:	e7d6      	b.n	8006326 <__d2b+0x2e>
 8006378:	6161      	str	r1, [r4, #20]
 800637a:	e7e7      	b.n	800634c <__d2b+0x54>
 800637c:	a801      	add	r0, sp, #4
 800637e:	f7ff fd5d 	bl	8005e3c <__lo0bits>
 8006382:	2101      	movs	r1, #1
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	6121      	str	r1, [r4, #16]
 8006388:	6163      	str	r3, [r4, #20]
 800638a:	3020      	adds	r0, #32
 800638c:	e7e5      	b.n	800635a <__d2b+0x62>
 800638e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006392:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006396:	6038      	str	r0, [r7, #0]
 8006398:	6918      	ldr	r0, [r3, #16]
 800639a:	f7ff fd2f 	bl	8005dfc <__hi0bits>
 800639e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80063a2:	6031      	str	r1, [r6, #0]
 80063a4:	e7e1      	b.n	800636a <__d2b+0x72>
 80063a6:	bf00      	nop
 80063a8:	08007826 	.word	0x08007826
 80063ac:	08007837 	.word	0x08007837

080063b0 <_calloc_r>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	fba1 5402 	umull	r5, r4, r1, r2
 80063b6:	b934      	cbnz	r4, 80063c6 <_calloc_r+0x16>
 80063b8:	4629      	mov	r1, r5
 80063ba:	f000 f875 	bl	80064a8 <_malloc_r>
 80063be:	4606      	mov	r6, r0
 80063c0:	b928      	cbnz	r0, 80063ce <_calloc_r+0x1e>
 80063c2:	4630      	mov	r0, r6
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
 80063c6:	220c      	movs	r2, #12
 80063c8:	2600      	movs	r6, #0
 80063ca:	6002      	str	r2, [r0, #0]
 80063cc:	e7f9      	b.n	80063c2 <_calloc_r+0x12>
 80063ce:	462a      	mov	r2, r5
 80063d0:	4621      	mov	r1, r4
 80063d2:	f7fe f8d9 	bl	8004588 <memset>
 80063d6:	e7f4      	b.n	80063c2 <_calloc_r+0x12>

080063d8 <_free_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4605      	mov	r5, r0
 80063dc:	2900      	cmp	r1, #0
 80063de:	d040      	beq.n	8006462 <_free_r+0x8a>
 80063e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e4:	1f0c      	subs	r4, r1, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bfb8      	it	lt
 80063ea:	18e4      	addlt	r4, r4, r3
 80063ec:	f000 fea4 	bl	8007138 <__malloc_lock>
 80063f0:	4a1c      	ldr	r2, [pc, #112]	; (8006464 <_free_r+0x8c>)
 80063f2:	6813      	ldr	r3, [r2, #0]
 80063f4:	b933      	cbnz	r3, 8006404 <_free_r+0x2c>
 80063f6:	6063      	str	r3, [r4, #4]
 80063f8:	6014      	str	r4, [r2, #0]
 80063fa:	4628      	mov	r0, r5
 80063fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006400:	f000 bea0 	b.w	8007144 <__malloc_unlock>
 8006404:	42a3      	cmp	r3, r4
 8006406:	d908      	bls.n	800641a <_free_r+0x42>
 8006408:	6820      	ldr	r0, [r4, #0]
 800640a:	1821      	adds	r1, r4, r0
 800640c:	428b      	cmp	r3, r1
 800640e:	bf01      	itttt	eq
 8006410:	6819      	ldreq	r1, [r3, #0]
 8006412:	685b      	ldreq	r3, [r3, #4]
 8006414:	1809      	addeq	r1, r1, r0
 8006416:	6021      	streq	r1, [r4, #0]
 8006418:	e7ed      	b.n	80063f6 <_free_r+0x1e>
 800641a:	461a      	mov	r2, r3
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	b10b      	cbz	r3, 8006424 <_free_r+0x4c>
 8006420:	42a3      	cmp	r3, r4
 8006422:	d9fa      	bls.n	800641a <_free_r+0x42>
 8006424:	6811      	ldr	r1, [r2, #0]
 8006426:	1850      	adds	r0, r2, r1
 8006428:	42a0      	cmp	r0, r4
 800642a:	d10b      	bne.n	8006444 <_free_r+0x6c>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	4401      	add	r1, r0
 8006430:	1850      	adds	r0, r2, r1
 8006432:	4283      	cmp	r3, r0
 8006434:	6011      	str	r1, [r2, #0]
 8006436:	d1e0      	bne.n	80063fa <_free_r+0x22>
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	4401      	add	r1, r0
 800643e:	6011      	str	r1, [r2, #0]
 8006440:	6053      	str	r3, [r2, #4]
 8006442:	e7da      	b.n	80063fa <_free_r+0x22>
 8006444:	d902      	bls.n	800644c <_free_r+0x74>
 8006446:	230c      	movs	r3, #12
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	e7d6      	b.n	80063fa <_free_r+0x22>
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	1821      	adds	r1, r4, r0
 8006450:	428b      	cmp	r3, r1
 8006452:	bf01      	itttt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	1809      	addeq	r1, r1, r0
 800645a:	6021      	streq	r1, [r4, #0]
 800645c:	6063      	str	r3, [r4, #4]
 800645e:	6054      	str	r4, [r2, #4]
 8006460:	e7cb      	b.n	80063fa <_free_r+0x22>
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	200003c0 	.word	0x200003c0

08006468 <sbrk_aligned>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	4e0e      	ldr	r6, [pc, #56]	; (80064a4 <sbrk_aligned+0x3c>)
 800646c:	460c      	mov	r4, r1
 800646e:	6831      	ldr	r1, [r6, #0]
 8006470:	4605      	mov	r5, r0
 8006472:	b911      	cbnz	r1, 800647a <sbrk_aligned+0x12>
 8006474:	f000 fb40 	bl	8006af8 <_sbrk_r>
 8006478:	6030      	str	r0, [r6, #0]
 800647a:	4621      	mov	r1, r4
 800647c:	4628      	mov	r0, r5
 800647e:	f000 fb3b 	bl	8006af8 <_sbrk_r>
 8006482:	1c43      	adds	r3, r0, #1
 8006484:	d00a      	beq.n	800649c <sbrk_aligned+0x34>
 8006486:	1cc4      	adds	r4, r0, #3
 8006488:	f024 0403 	bic.w	r4, r4, #3
 800648c:	42a0      	cmp	r0, r4
 800648e:	d007      	beq.n	80064a0 <sbrk_aligned+0x38>
 8006490:	1a21      	subs	r1, r4, r0
 8006492:	4628      	mov	r0, r5
 8006494:	f000 fb30 	bl	8006af8 <_sbrk_r>
 8006498:	3001      	adds	r0, #1
 800649a:	d101      	bne.n	80064a0 <sbrk_aligned+0x38>
 800649c:	f04f 34ff 	mov.w	r4, #4294967295
 80064a0:	4620      	mov	r0, r4
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	200003c4 	.word	0x200003c4

080064a8 <_malloc_r>:
 80064a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ac:	1ccd      	adds	r5, r1, #3
 80064ae:	f025 0503 	bic.w	r5, r5, #3
 80064b2:	3508      	adds	r5, #8
 80064b4:	2d0c      	cmp	r5, #12
 80064b6:	bf38      	it	cc
 80064b8:	250c      	movcc	r5, #12
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	4607      	mov	r7, r0
 80064be:	db01      	blt.n	80064c4 <_malloc_r+0x1c>
 80064c0:	42a9      	cmp	r1, r5
 80064c2:	d905      	bls.n	80064d0 <_malloc_r+0x28>
 80064c4:	230c      	movs	r3, #12
 80064c6:	2600      	movs	r6, #0
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	4630      	mov	r0, r6
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d0:	4e2e      	ldr	r6, [pc, #184]	; (800658c <_malloc_r+0xe4>)
 80064d2:	f000 fe31 	bl	8007138 <__malloc_lock>
 80064d6:	6833      	ldr	r3, [r6, #0]
 80064d8:	461c      	mov	r4, r3
 80064da:	bb34      	cbnz	r4, 800652a <_malloc_r+0x82>
 80064dc:	4629      	mov	r1, r5
 80064de:	4638      	mov	r0, r7
 80064e0:	f7ff ffc2 	bl	8006468 <sbrk_aligned>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	4604      	mov	r4, r0
 80064e8:	d14d      	bne.n	8006586 <_malloc_r+0xde>
 80064ea:	6834      	ldr	r4, [r6, #0]
 80064ec:	4626      	mov	r6, r4
 80064ee:	2e00      	cmp	r6, #0
 80064f0:	d140      	bne.n	8006574 <_malloc_r+0xcc>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	4631      	mov	r1, r6
 80064f6:	4638      	mov	r0, r7
 80064f8:	eb04 0803 	add.w	r8, r4, r3
 80064fc:	f000 fafc 	bl	8006af8 <_sbrk_r>
 8006500:	4580      	cmp	r8, r0
 8006502:	d13a      	bne.n	800657a <_malloc_r+0xd2>
 8006504:	6821      	ldr	r1, [r4, #0]
 8006506:	3503      	adds	r5, #3
 8006508:	1a6d      	subs	r5, r5, r1
 800650a:	f025 0503 	bic.w	r5, r5, #3
 800650e:	3508      	adds	r5, #8
 8006510:	2d0c      	cmp	r5, #12
 8006512:	bf38      	it	cc
 8006514:	250c      	movcc	r5, #12
 8006516:	4638      	mov	r0, r7
 8006518:	4629      	mov	r1, r5
 800651a:	f7ff ffa5 	bl	8006468 <sbrk_aligned>
 800651e:	3001      	adds	r0, #1
 8006520:	d02b      	beq.n	800657a <_malloc_r+0xd2>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	442b      	add	r3, r5
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	e00e      	b.n	8006548 <_malloc_r+0xa0>
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	1b52      	subs	r2, r2, r5
 800652e:	d41e      	bmi.n	800656e <_malloc_r+0xc6>
 8006530:	2a0b      	cmp	r2, #11
 8006532:	d916      	bls.n	8006562 <_malloc_r+0xba>
 8006534:	1961      	adds	r1, r4, r5
 8006536:	42a3      	cmp	r3, r4
 8006538:	6025      	str	r5, [r4, #0]
 800653a:	bf18      	it	ne
 800653c:	6059      	strne	r1, [r3, #4]
 800653e:	6863      	ldr	r3, [r4, #4]
 8006540:	bf08      	it	eq
 8006542:	6031      	streq	r1, [r6, #0]
 8006544:	5162      	str	r2, [r4, r5]
 8006546:	604b      	str	r3, [r1, #4]
 8006548:	4638      	mov	r0, r7
 800654a:	f104 060b 	add.w	r6, r4, #11
 800654e:	f000 fdf9 	bl	8007144 <__malloc_unlock>
 8006552:	f026 0607 	bic.w	r6, r6, #7
 8006556:	1d23      	adds	r3, r4, #4
 8006558:	1af2      	subs	r2, r6, r3
 800655a:	d0b6      	beq.n	80064ca <_malloc_r+0x22>
 800655c:	1b9b      	subs	r3, r3, r6
 800655e:	50a3      	str	r3, [r4, r2]
 8006560:	e7b3      	b.n	80064ca <_malloc_r+0x22>
 8006562:	6862      	ldr	r2, [r4, #4]
 8006564:	42a3      	cmp	r3, r4
 8006566:	bf0c      	ite	eq
 8006568:	6032      	streq	r2, [r6, #0]
 800656a:	605a      	strne	r2, [r3, #4]
 800656c:	e7ec      	b.n	8006548 <_malloc_r+0xa0>
 800656e:	4623      	mov	r3, r4
 8006570:	6864      	ldr	r4, [r4, #4]
 8006572:	e7b2      	b.n	80064da <_malloc_r+0x32>
 8006574:	4634      	mov	r4, r6
 8006576:	6876      	ldr	r6, [r6, #4]
 8006578:	e7b9      	b.n	80064ee <_malloc_r+0x46>
 800657a:	230c      	movs	r3, #12
 800657c:	4638      	mov	r0, r7
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	f000 fde0 	bl	8007144 <__malloc_unlock>
 8006584:	e7a1      	b.n	80064ca <_malloc_r+0x22>
 8006586:	6025      	str	r5, [r4, #0]
 8006588:	e7de      	b.n	8006548 <_malloc_r+0xa0>
 800658a:	bf00      	nop
 800658c:	200003c0 	.word	0x200003c0

08006590 <__ssputs_r>:
 8006590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006594:	688e      	ldr	r6, [r1, #8]
 8006596:	4682      	mov	sl, r0
 8006598:	429e      	cmp	r6, r3
 800659a:	460c      	mov	r4, r1
 800659c:	4690      	mov	r8, r2
 800659e:	461f      	mov	r7, r3
 80065a0:	d838      	bhi.n	8006614 <__ssputs_r+0x84>
 80065a2:	898a      	ldrh	r2, [r1, #12]
 80065a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065a8:	d032      	beq.n	8006610 <__ssputs_r+0x80>
 80065aa:	6825      	ldr	r5, [r4, #0]
 80065ac:	6909      	ldr	r1, [r1, #16]
 80065ae:	3301      	adds	r3, #1
 80065b0:	eba5 0901 	sub.w	r9, r5, r1
 80065b4:	6965      	ldr	r5, [r4, #20]
 80065b6:	444b      	add	r3, r9
 80065b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065c0:	106d      	asrs	r5, r5, #1
 80065c2:	429d      	cmp	r5, r3
 80065c4:	bf38      	it	cc
 80065c6:	461d      	movcc	r5, r3
 80065c8:	0553      	lsls	r3, r2, #21
 80065ca:	d531      	bpl.n	8006630 <__ssputs_r+0xa0>
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7ff ff6b 	bl	80064a8 <_malloc_r>
 80065d2:	4606      	mov	r6, r0
 80065d4:	b950      	cbnz	r0, 80065ec <__ssputs_r+0x5c>
 80065d6:	230c      	movs	r3, #12
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	f8ca 3000 	str.w	r3, [sl]
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ec:	464a      	mov	r2, r9
 80065ee:	6921      	ldr	r1, [r4, #16]
 80065f0:	f7fd ffbc 	bl	800456c <memcpy>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	6126      	str	r6, [r4, #16]
 8006602:	444e      	add	r6, r9
 8006604:	6026      	str	r6, [r4, #0]
 8006606:	463e      	mov	r6, r7
 8006608:	6165      	str	r5, [r4, #20]
 800660a:	eba5 0509 	sub.w	r5, r5, r9
 800660e:	60a5      	str	r5, [r4, #8]
 8006610:	42be      	cmp	r6, r7
 8006612:	d900      	bls.n	8006616 <__ssputs_r+0x86>
 8006614:	463e      	mov	r6, r7
 8006616:	4632      	mov	r2, r6
 8006618:	4641      	mov	r1, r8
 800661a:	6820      	ldr	r0, [r4, #0]
 800661c:	f000 fd72 	bl	8007104 <memmove>
 8006620:	68a3      	ldr	r3, [r4, #8]
 8006622:	2000      	movs	r0, #0
 8006624:	1b9b      	subs	r3, r3, r6
 8006626:	60a3      	str	r3, [r4, #8]
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	4433      	add	r3, r6
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	e7db      	b.n	80065e8 <__ssputs_r+0x58>
 8006630:	462a      	mov	r2, r5
 8006632:	f000 fd8d 	bl	8007150 <_realloc_r>
 8006636:	4606      	mov	r6, r0
 8006638:	2800      	cmp	r0, #0
 800663a:	d1e1      	bne.n	8006600 <__ssputs_r+0x70>
 800663c:	4650      	mov	r0, sl
 800663e:	6921      	ldr	r1, [r4, #16]
 8006640:	f7ff feca 	bl	80063d8 <_free_r>
 8006644:	e7c7      	b.n	80065d6 <__ssputs_r+0x46>
	...

08006648 <_svfiprintf_r>:
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	4698      	mov	r8, r3
 800664e:	898b      	ldrh	r3, [r1, #12]
 8006650:	4607      	mov	r7, r0
 8006652:	061b      	lsls	r3, r3, #24
 8006654:	460d      	mov	r5, r1
 8006656:	4614      	mov	r4, r2
 8006658:	b09d      	sub	sp, #116	; 0x74
 800665a:	d50e      	bpl.n	800667a <_svfiprintf_r+0x32>
 800665c:	690b      	ldr	r3, [r1, #16]
 800665e:	b963      	cbnz	r3, 800667a <_svfiprintf_r+0x32>
 8006660:	2140      	movs	r1, #64	; 0x40
 8006662:	f7ff ff21 	bl	80064a8 <_malloc_r>
 8006666:	6028      	str	r0, [r5, #0]
 8006668:	6128      	str	r0, [r5, #16]
 800666a:	b920      	cbnz	r0, 8006676 <_svfiprintf_r+0x2e>
 800666c:	230c      	movs	r3, #12
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	f04f 30ff 	mov.w	r0, #4294967295
 8006674:	e0d1      	b.n	800681a <_svfiprintf_r+0x1d2>
 8006676:	2340      	movs	r3, #64	; 0x40
 8006678:	616b      	str	r3, [r5, #20]
 800667a:	2300      	movs	r3, #0
 800667c:	9309      	str	r3, [sp, #36]	; 0x24
 800667e:	2320      	movs	r3, #32
 8006680:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006684:	2330      	movs	r3, #48	; 0x30
 8006686:	f04f 0901 	mov.w	r9, #1
 800668a:	f8cd 800c 	str.w	r8, [sp, #12]
 800668e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006834 <_svfiprintf_r+0x1ec>
 8006692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006696:	4623      	mov	r3, r4
 8006698:	469a      	mov	sl, r3
 800669a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800669e:	b10a      	cbz	r2, 80066a4 <_svfiprintf_r+0x5c>
 80066a0:	2a25      	cmp	r2, #37	; 0x25
 80066a2:	d1f9      	bne.n	8006698 <_svfiprintf_r+0x50>
 80066a4:	ebba 0b04 	subs.w	fp, sl, r4
 80066a8:	d00b      	beq.n	80066c2 <_svfiprintf_r+0x7a>
 80066aa:	465b      	mov	r3, fp
 80066ac:	4622      	mov	r2, r4
 80066ae:	4629      	mov	r1, r5
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7ff ff6d 	bl	8006590 <__ssputs_r>
 80066b6:	3001      	adds	r0, #1
 80066b8:	f000 80aa 	beq.w	8006810 <_svfiprintf_r+0x1c8>
 80066bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066be:	445a      	add	r2, fp
 80066c0:	9209      	str	r2, [sp, #36]	; 0x24
 80066c2:	f89a 3000 	ldrb.w	r3, [sl]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 80a2 	beq.w	8006810 <_svfiprintf_r+0x1c8>
 80066cc:	2300      	movs	r3, #0
 80066ce:	f04f 32ff 	mov.w	r2, #4294967295
 80066d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066d6:	f10a 0a01 	add.w	sl, sl, #1
 80066da:	9304      	str	r3, [sp, #16]
 80066dc:	9307      	str	r3, [sp, #28]
 80066de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066e2:	931a      	str	r3, [sp, #104]	; 0x68
 80066e4:	4654      	mov	r4, sl
 80066e6:	2205      	movs	r2, #5
 80066e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ec:	4851      	ldr	r0, [pc, #324]	; (8006834 <_svfiprintf_r+0x1ec>)
 80066ee:	f7ff facf 	bl	8005c90 <memchr>
 80066f2:	9a04      	ldr	r2, [sp, #16]
 80066f4:	b9d8      	cbnz	r0, 800672e <_svfiprintf_r+0xe6>
 80066f6:	06d0      	lsls	r0, r2, #27
 80066f8:	bf44      	itt	mi
 80066fa:	2320      	movmi	r3, #32
 80066fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006700:	0711      	lsls	r1, r2, #28
 8006702:	bf44      	itt	mi
 8006704:	232b      	movmi	r3, #43	; 0x2b
 8006706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800670a:	f89a 3000 	ldrb.w	r3, [sl]
 800670e:	2b2a      	cmp	r3, #42	; 0x2a
 8006710:	d015      	beq.n	800673e <_svfiprintf_r+0xf6>
 8006712:	4654      	mov	r4, sl
 8006714:	2000      	movs	r0, #0
 8006716:	f04f 0c0a 	mov.w	ip, #10
 800671a:	9a07      	ldr	r2, [sp, #28]
 800671c:	4621      	mov	r1, r4
 800671e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006722:	3b30      	subs	r3, #48	; 0x30
 8006724:	2b09      	cmp	r3, #9
 8006726:	d94e      	bls.n	80067c6 <_svfiprintf_r+0x17e>
 8006728:	b1b0      	cbz	r0, 8006758 <_svfiprintf_r+0x110>
 800672a:	9207      	str	r2, [sp, #28]
 800672c:	e014      	b.n	8006758 <_svfiprintf_r+0x110>
 800672e:	eba0 0308 	sub.w	r3, r0, r8
 8006732:	fa09 f303 	lsl.w	r3, r9, r3
 8006736:	4313      	orrs	r3, r2
 8006738:	46a2      	mov	sl, r4
 800673a:	9304      	str	r3, [sp, #16]
 800673c:	e7d2      	b.n	80066e4 <_svfiprintf_r+0x9c>
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	1d19      	adds	r1, r3, #4
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	9103      	str	r1, [sp, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	bfbb      	ittet	lt
 800674a:	425b      	neglt	r3, r3
 800674c:	f042 0202 	orrlt.w	r2, r2, #2
 8006750:	9307      	strge	r3, [sp, #28]
 8006752:	9307      	strlt	r3, [sp, #28]
 8006754:	bfb8      	it	lt
 8006756:	9204      	strlt	r2, [sp, #16]
 8006758:	7823      	ldrb	r3, [r4, #0]
 800675a:	2b2e      	cmp	r3, #46	; 0x2e
 800675c:	d10c      	bne.n	8006778 <_svfiprintf_r+0x130>
 800675e:	7863      	ldrb	r3, [r4, #1]
 8006760:	2b2a      	cmp	r3, #42	; 0x2a
 8006762:	d135      	bne.n	80067d0 <_svfiprintf_r+0x188>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	3402      	adds	r4, #2
 8006768:	1d1a      	adds	r2, r3, #4
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	9203      	str	r2, [sp, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	bfb8      	it	lt
 8006772:	f04f 33ff 	movlt.w	r3, #4294967295
 8006776:	9305      	str	r3, [sp, #20]
 8006778:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006838 <_svfiprintf_r+0x1f0>
 800677c:	2203      	movs	r2, #3
 800677e:	4650      	mov	r0, sl
 8006780:	7821      	ldrb	r1, [r4, #0]
 8006782:	f7ff fa85 	bl	8005c90 <memchr>
 8006786:	b140      	cbz	r0, 800679a <_svfiprintf_r+0x152>
 8006788:	2340      	movs	r3, #64	; 0x40
 800678a:	eba0 000a 	sub.w	r0, r0, sl
 800678e:	fa03 f000 	lsl.w	r0, r3, r0
 8006792:	9b04      	ldr	r3, [sp, #16]
 8006794:	3401      	adds	r4, #1
 8006796:	4303      	orrs	r3, r0
 8006798:	9304      	str	r3, [sp, #16]
 800679a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679e:	2206      	movs	r2, #6
 80067a0:	4826      	ldr	r0, [pc, #152]	; (800683c <_svfiprintf_r+0x1f4>)
 80067a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067a6:	f7ff fa73 	bl	8005c90 <memchr>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d038      	beq.n	8006820 <_svfiprintf_r+0x1d8>
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <_svfiprintf_r+0x1f8>)
 80067b0:	bb1b      	cbnz	r3, 80067fa <_svfiprintf_r+0x1b2>
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	3307      	adds	r3, #7
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	3308      	adds	r3, #8
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c0:	4433      	add	r3, r6
 80067c2:	9309      	str	r3, [sp, #36]	; 0x24
 80067c4:	e767      	b.n	8006696 <_svfiprintf_r+0x4e>
 80067c6:	460c      	mov	r4, r1
 80067c8:	2001      	movs	r0, #1
 80067ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ce:	e7a5      	b.n	800671c <_svfiprintf_r+0xd4>
 80067d0:	2300      	movs	r3, #0
 80067d2:	f04f 0c0a 	mov.w	ip, #10
 80067d6:	4619      	mov	r1, r3
 80067d8:	3401      	adds	r4, #1
 80067da:	9305      	str	r3, [sp, #20]
 80067dc:	4620      	mov	r0, r4
 80067de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067e2:	3a30      	subs	r2, #48	; 0x30
 80067e4:	2a09      	cmp	r2, #9
 80067e6:	d903      	bls.n	80067f0 <_svfiprintf_r+0x1a8>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0c5      	beq.n	8006778 <_svfiprintf_r+0x130>
 80067ec:	9105      	str	r1, [sp, #20]
 80067ee:	e7c3      	b.n	8006778 <_svfiprintf_r+0x130>
 80067f0:	4604      	mov	r4, r0
 80067f2:	2301      	movs	r3, #1
 80067f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067f8:	e7f0      	b.n	80067dc <_svfiprintf_r+0x194>
 80067fa:	ab03      	add	r3, sp, #12
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	462a      	mov	r2, r5
 8006800:	4638      	mov	r0, r7
 8006802:	4b10      	ldr	r3, [pc, #64]	; (8006844 <_svfiprintf_r+0x1fc>)
 8006804:	a904      	add	r1, sp, #16
 8006806:	f7fd ff65 	bl	80046d4 <_printf_float>
 800680a:	1c42      	adds	r2, r0, #1
 800680c:	4606      	mov	r6, r0
 800680e:	d1d6      	bne.n	80067be <_svfiprintf_r+0x176>
 8006810:	89ab      	ldrh	r3, [r5, #12]
 8006812:	065b      	lsls	r3, r3, #25
 8006814:	f53f af2c 	bmi.w	8006670 <_svfiprintf_r+0x28>
 8006818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800681a:	b01d      	add	sp, #116	; 0x74
 800681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006820:	ab03      	add	r3, sp, #12
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	462a      	mov	r2, r5
 8006826:	4638      	mov	r0, r7
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <_svfiprintf_r+0x1fc>)
 800682a:	a904      	add	r1, sp, #16
 800682c:	f7fe f9ee 	bl	8004c0c <_printf_i>
 8006830:	e7eb      	b.n	800680a <_svfiprintf_r+0x1c2>
 8006832:	bf00      	nop
 8006834:	08007994 	.word	0x08007994
 8006838:	0800799a 	.word	0x0800799a
 800683c:	0800799e 	.word	0x0800799e
 8006840:	080046d5 	.word	0x080046d5
 8006844:	08006591 	.word	0x08006591

08006848 <__sfputc_r>:
 8006848:	6893      	ldr	r3, [r2, #8]
 800684a:	b410      	push	{r4}
 800684c:	3b01      	subs	r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	6093      	str	r3, [r2, #8]
 8006852:	da07      	bge.n	8006864 <__sfputc_r+0x1c>
 8006854:	6994      	ldr	r4, [r2, #24]
 8006856:	42a3      	cmp	r3, r4
 8006858:	db01      	blt.n	800685e <__sfputc_r+0x16>
 800685a:	290a      	cmp	r1, #10
 800685c:	d102      	bne.n	8006864 <__sfputc_r+0x1c>
 800685e:	bc10      	pop	{r4}
 8006860:	f000 b95a 	b.w	8006b18 <__swbuf_r>
 8006864:	6813      	ldr	r3, [r2, #0]
 8006866:	1c58      	adds	r0, r3, #1
 8006868:	6010      	str	r0, [r2, #0]
 800686a:	7019      	strb	r1, [r3, #0]
 800686c:	4608      	mov	r0, r1
 800686e:	bc10      	pop	{r4}
 8006870:	4770      	bx	lr

08006872 <__sfputs_r>:
 8006872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006874:	4606      	mov	r6, r0
 8006876:	460f      	mov	r7, r1
 8006878:	4614      	mov	r4, r2
 800687a:	18d5      	adds	r5, r2, r3
 800687c:	42ac      	cmp	r4, r5
 800687e:	d101      	bne.n	8006884 <__sfputs_r+0x12>
 8006880:	2000      	movs	r0, #0
 8006882:	e007      	b.n	8006894 <__sfputs_r+0x22>
 8006884:	463a      	mov	r2, r7
 8006886:	4630      	mov	r0, r6
 8006888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800688c:	f7ff ffdc 	bl	8006848 <__sfputc_r>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d1f3      	bne.n	800687c <__sfputs_r+0xa>
 8006894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006898 <_vfiprintf_r>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	460d      	mov	r5, r1
 800689e:	4614      	mov	r4, r2
 80068a0:	4698      	mov	r8, r3
 80068a2:	4606      	mov	r6, r0
 80068a4:	b09d      	sub	sp, #116	; 0x74
 80068a6:	b118      	cbz	r0, 80068b0 <_vfiprintf_r+0x18>
 80068a8:	6983      	ldr	r3, [r0, #24]
 80068aa:	b90b      	cbnz	r3, 80068b0 <_vfiprintf_r+0x18>
 80068ac:	f000 fb12 	bl	8006ed4 <__sinit>
 80068b0:	4b89      	ldr	r3, [pc, #548]	; (8006ad8 <_vfiprintf_r+0x240>)
 80068b2:	429d      	cmp	r5, r3
 80068b4:	d11b      	bne.n	80068ee <_vfiprintf_r+0x56>
 80068b6:	6875      	ldr	r5, [r6, #4]
 80068b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068ba:	07d9      	lsls	r1, r3, #31
 80068bc:	d405      	bmi.n	80068ca <_vfiprintf_r+0x32>
 80068be:	89ab      	ldrh	r3, [r5, #12]
 80068c0:	059a      	lsls	r2, r3, #22
 80068c2:	d402      	bmi.n	80068ca <_vfiprintf_r+0x32>
 80068c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068c6:	f000 fba3 	bl	8007010 <__retarget_lock_acquire_recursive>
 80068ca:	89ab      	ldrh	r3, [r5, #12]
 80068cc:	071b      	lsls	r3, r3, #28
 80068ce:	d501      	bpl.n	80068d4 <_vfiprintf_r+0x3c>
 80068d0:	692b      	ldr	r3, [r5, #16]
 80068d2:	b9eb      	cbnz	r3, 8006910 <_vfiprintf_r+0x78>
 80068d4:	4629      	mov	r1, r5
 80068d6:	4630      	mov	r0, r6
 80068d8:	f000 f970 	bl	8006bbc <__swsetup_r>
 80068dc:	b1c0      	cbz	r0, 8006910 <_vfiprintf_r+0x78>
 80068de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068e0:	07dc      	lsls	r4, r3, #31
 80068e2:	d50e      	bpl.n	8006902 <_vfiprintf_r+0x6a>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b01d      	add	sp, #116	; 0x74
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	4b7b      	ldr	r3, [pc, #492]	; (8006adc <_vfiprintf_r+0x244>)
 80068f0:	429d      	cmp	r5, r3
 80068f2:	d101      	bne.n	80068f8 <_vfiprintf_r+0x60>
 80068f4:	68b5      	ldr	r5, [r6, #8]
 80068f6:	e7df      	b.n	80068b8 <_vfiprintf_r+0x20>
 80068f8:	4b79      	ldr	r3, [pc, #484]	; (8006ae0 <_vfiprintf_r+0x248>)
 80068fa:	429d      	cmp	r5, r3
 80068fc:	bf08      	it	eq
 80068fe:	68f5      	ldreq	r5, [r6, #12]
 8006900:	e7da      	b.n	80068b8 <_vfiprintf_r+0x20>
 8006902:	89ab      	ldrh	r3, [r5, #12]
 8006904:	0598      	lsls	r0, r3, #22
 8006906:	d4ed      	bmi.n	80068e4 <_vfiprintf_r+0x4c>
 8006908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800690a:	f000 fb82 	bl	8007012 <__retarget_lock_release_recursive>
 800690e:	e7e9      	b.n	80068e4 <_vfiprintf_r+0x4c>
 8006910:	2300      	movs	r3, #0
 8006912:	9309      	str	r3, [sp, #36]	; 0x24
 8006914:	2320      	movs	r3, #32
 8006916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800691a:	2330      	movs	r3, #48	; 0x30
 800691c:	f04f 0901 	mov.w	r9, #1
 8006920:	f8cd 800c 	str.w	r8, [sp, #12]
 8006924:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006ae4 <_vfiprintf_r+0x24c>
 8006928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800692c:	4623      	mov	r3, r4
 800692e:	469a      	mov	sl, r3
 8006930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006934:	b10a      	cbz	r2, 800693a <_vfiprintf_r+0xa2>
 8006936:	2a25      	cmp	r2, #37	; 0x25
 8006938:	d1f9      	bne.n	800692e <_vfiprintf_r+0x96>
 800693a:	ebba 0b04 	subs.w	fp, sl, r4
 800693e:	d00b      	beq.n	8006958 <_vfiprintf_r+0xc0>
 8006940:	465b      	mov	r3, fp
 8006942:	4622      	mov	r2, r4
 8006944:	4629      	mov	r1, r5
 8006946:	4630      	mov	r0, r6
 8006948:	f7ff ff93 	bl	8006872 <__sfputs_r>
 800694c:	3001      	adds	r0, #1
 800694e:	f000 80aa 	beq.w	8006aa6 <_vfiprintf_r+0x20e>
 8006952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006954:	445a      	add	r2, fp
 8006956:	9209      	str	r2, [sp, #36]	; 0x24
 8006958:	f89a 3000 	ldrb.w	r3, [sl]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80a2 	beq.w	8006aa6 <_vfiprintf_r+0x20e>
 8006962:	2300      	movs	r3, #0
 8006964:	f04f 32ff 	mov.w	r2, #4294967295
 8006968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800696c:	f10a 0a01 	add.w	sl, sl, #1
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	9307      	str	r3, [sp, #28]
 8006974:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006978:	931a      	str	r3, [sp, #104]	; 0x68
 800697a:	4654      	mov	r4, sl
 800697c:	2205      	movs	r2, #5
 800697e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006982:	4858      	ldr	r0, [pc, #352]	; (8006ae4 <_vfiprintf_r+0x24c>)
 8006984:	f7ff f984 	bl	8005c90 <memchr>
 8006988:	9a04      	ldr	r2, [sp, #16]
 800698a:	b9d8      	cbnz	r0, 80069c4 <_vfiprintf_r+0x12c>
 800698c:	06d1      	lsls	r1, r2, #27
 800698e:	bf44      	itt	mi
 8006990:	2320      	movmi	r3, #32
 8006992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006996:	0713      	lsls	r3, r2, #28
 8006998:	bf44      	itt	mi
 800699a:	232b      	movmi	r3, #43	; 0x2b
 800699c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a0:	f89a 3000 	ldrb.w	r3, [sl]
 80069a4:	2b2a      	cmp	r3, #42	; 0x2a
 80069a6:	d015      	beq.n	80069d4 <_vfiprintf_r+0x13c>
 80069a8:	4654      	mov	r4, sl
 80069aa:	2000      	movs	r0, #0
 80069ac:	f04f 0c0a 	mov.w	ip, #10
 80069b0:	9a07      	ldr	r2, [sp, #28]
 80069b2:	4621      	mov	r1, r4
 80069b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069b8:	3b30      	subs	r3, #48	; 0x30
 80069ba:	2b09      	cmp	r3, #9
 80069bc:	d94e      	bls.n	8006a5c <_vfiprintf_r+0x1c4>
 80069be:	b1b0      	cbz	r0, 80069ee <_vfiprintf_r+0x156>
 80069c0:	9207      	str	r2, [sp, #28]
 80069c2:	e014      	b.n	80069ee <_vfiprintf_r+0x156>
 80069c4:	eba0 0308 	sub.w	r3, r0, r8
 80069c8:	fa09 f303 	lsl.w	r3, r9, r3
 80069cc:	4313      	orrs	r3, r2
 80069ce:	46a2      	mov	sl, r4
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	e7d2      	b.n	800697a <_vfiprintf_r+0xe2>
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	1d19      	adds	r1, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	9103      	str	r1, [sp, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bfbb      	ittet	lt
 80069e0:	425b      	neglt	r3, r3
 80069e2:	f042 0202 	orrlt.w	r2, r2, #2
 80069e6:	9307      	strge	r3, [sp, #28]
 80069e8:	9307      	strlt	r3, [sp, #28]
 80069ea:	bfb8      	it	lt
 80069ec:	9204      	strlt	r2, [sp, #16]
 80069ee:	7823      	ldrb	r3, [r4, #0]
 80069f0:	2b2e      	cmp	r3, #46	; 0x2e
 80069f2:	d10c      	bne.n	8006a0e <_vfiprintf_r+0x176>
 80069f4:	7863      	ldrb	r3, [r4, #1]
 80069f6:	2b2a      	cmp	r3, #42	; 0x2a
 80069f8:	d135      	bne.n	8006a66 <_vfiprintf_r+0x1ce>
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	3402      	adds	r4, #2
 80069fe:	1d1a      	adds	r2, r3, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	9203      	str	r2, [sp, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	bfb8      	it	lt
 8006a08:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a0c:	9305      	str	r3, [sp, #20]
 8006a0e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006ae8 <_vfiprintf_r+0x250>
 8006a12:	2203      	movs	r2, #3
 8006a14:	4650      	mov	r0, sl
 8006a16:	7821      	ldrb	r1, [r4, #0]
 8006a18:	f7ff f93a 	bl	8005c90 <memchr>
 8006a1c:	b140      	cbz	r0, 8006a30 <_vfiprintf_r+0x198>
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	eba0 000a 	sub.w	r0, r0, sl
 8006a24:	fa03 f000 	lsl.w	r0, r3, r0
 8006a28:	9b04      	ldr	r3, [sp, #16]
 8006a2a:	3401      	adds	r4, #1
 8006a2c:	4303      	orrs	r3, r0
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a34:	2206      	movs	r2, #6
 8006a36:	482d      	ldr	r0, [pc, #180]	; (8006aec <_vfiprintf_r+0x254>)
 8006a38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a3c:	f7ff f928 	bl	8005c90 <memchr>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d03f      	beq.n	8006ac4 <_vfiprintf_r+0x22c>
 8006a44:	4b2a      	ldr	r3, [pc, #168]	; (8006af0 <_vfiprintf_r+0x258>)
 8006a46:	bb1b      	cbnz	r3, 8006a90 <_vfiprintf_r+0x1f8>
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	3307      	adds	r3, #7
 8006a4c:	f023 0307 	bic.w	r3, r3, #7
 8006a50:	3308      	adds	r3, #8
 8006a52:	9303      	str	r3, [sp, #12]
 8006a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a56:	443b      	add	r3, r7
 8006a58:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5a:	e767      	b.n	800692c <_vfiprintf_r+0x94>
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	2001      	movs	r0, #1
 8006a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a64:	e7a5      	b.n	80069b2 <_vfiprintf_r+0x11a>
 8006a66:	2300      	movs	r3, #0
 8006a68:	f04f 0c0a 	mov.w	ip, #10
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	3401      	adds	r4, #1
 8006a70:	9305      	str	r3, [sp, #20]
 8006a72:	4620      	mov	r0, r4
 8006a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a78:	3a30      	subs	r2, #48	; 0x30
 8006a7a:	2a09      	cmp	r2, #9
 8006a7c:	d903      	bls.n	8006a86 <_vfiprintf_r+0x1ee>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0c5      	beq.n	8006a0e <_vfiprintf_r+0x176>
 8006a82:	9105      	str	r1, [sp, #20]
 8006a84:	e7c3      	b.n	8006a0e <_vfiprintf_r+0x176>
 8006a86:	4604      	mov	r4, r0
 8006a88:	2301      	movs	r3, #1
 8006a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a8e:	e7f0      	b.n	8006a72 <_vfiprintf_r+0x1da>
 8006a90:	ab03      	add	r3, sp, #12
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	462a      	mov	r2, r5
 8006a96:	4630      	mov	r0, r6
 8006a98:	4b16      	ldr	r3, [pc, #88]	; (8006af4 <_vfiprintf_r+0x25c>)
 8006a9a:	a904      	add	r1, sp, #16
 8006a9c:	f7fd fe1a 	bl	80046d4 <_printf_float>
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	1c78      	adds	r0, r7, #1
 8006aa4:	d1d6      	bne.n	8006a54 <_vfiprintf_r+0x1bc>
 8006aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aa8:	07d9      	lsls	r1, r3, #31
 8006aaa:	d405      	bmi.n	8006ab8 <_vfiprintf_r+0x220>
 8006aac:	89ab      	ldrh	r3, [r5, #12]
 8006aae:	059a      	lsls	r2, r3, #22
 8006ab0:	d402      	bmi.n	8006ab8 <_vfiprintf_r+0x220>
 8006ab2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ab4:	f000 faad 	bl	8007012 <__retarget_lock_release_recursive>
 8006ab8:	89ab      	ldrh	r3, [r5, #12]
 8006aba:	065b      	lsls	r3, r3, #25
 8006abc:	f53f af12 	bmi.w	80068e4 <_vfiprintf_r+0x4c>
 8006ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ac2:	e711      	b.n	80068e8 <_vfiprintf_r+0x50>
 8006ac4:	ab03      	add	r3, sp, #12
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	462a      	mov	r2, r5
 8006aca:	4630      	mov	r0, r6
 8006acc:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <_vfiprintf_r+0x25c>)
 8006ace:	a904      	add	r1, sp, #16
 8006ad0:	f7fe f89c 	bl	8004c0c <_printf_i>
 8006ad4:	e7e4      	b.n	8006aa0 <_vfiprintf_r+0x208>
 8006ad6:	bf00      	nop
 8006ad8:	080079c8 	.word	0x080079c8
 8006adc:	080079e8 	.word	0x080079e8
 8006ae0:	080079a8 	.word	0x080079a8
 8006ae4:	08007994 	.word	0x08007994
 8006ae8:	0800799a 	.word	0x0800799a
 8006aec:	0800799e 	.word	0x0800799e
 8006af0:	080046d5 	.word	0x080046d5
 8006af4:	08006873 	.word	0x08006873

08006af8 <_sbrk_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	2300      	movs	r3, #0
 8006afc:	4d05      	ldr	r5, [pc, #20]	; (8006b14 <_sbrk_r+0x1c>)
 8006afe:	4604      	mov	r4, r0
 8006b00:	4608      	mov	r0, r1
 8006b02:	602b      	str	r3, [r5, #0]
 8006b04:	f7fb fc18 	bl	8002338 <_sbrk>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d102      	bne.n	8006b12 <_sbrk_r+0x1a>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	b103      	cbz	r3, 8006b12 <_sbrk_r+0x1a>
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	200003cc 	.word	0x200003cc

08006b18 <__swbuf_r>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	460e      	mov	r6, r1
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	4605      	mov	r5, r0
 8006b20:	b118      	cbz	r0, 8006b2a <__swbuf_r+0x12>
 8006b22:	6983      	ldr	r3, [r0, #24]
 8006b24:	b90b      	cbnz	r3, 8006b2a <__swbuf_r+0x12>
 8006b26:	f000 f9d5 	bl	8006ed4 <__sinit>
 8006b2a:	4b21      	ldr	r3, [pc, #132]	; (8006bb0 <__swbuf_r+0x98>)
 8006b2c:	429c      	cmp	r4, r3
 8006b2e:	d12b      	bne.n	8006b88 <__swbuf_r+0x70>
 8006b30:	686c      	ldr	r4, [r5, #4]
 8006b32:	69a3      	ldr	r3, [r4, #24]
 8006b34:	60a3      	str	r3, [r4, #8]
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	071a      	lsls	r2, r3, #28
 8006b3a:	d52f      	bpl.n	8006b9c <__swbuf_r+0x84>
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	b36b      	cbz	r3, 8006b9c <__swbuf_r+0x84>
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	6820      	ldr	r0, [r4, #0]
 8006b44:	b2f6      	uxtb	r6, r6
 8006b46:	1ac0      	subs	r0, r0, r3
 8006b48:	6963      	ldr	r3, [r4, #20]
 8006b4a:	4637      	mov	r7, r6
 8006b4c:	4283      	cmp	r3, r0
 8006b4e:	dc04      	bgt.n	8006b5a <__swbuf_r+0x42>
 8006b50:	4621      	mov	r1, r4
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 f92a 	bl	8006dac <_fflush_r>
 8006b58:	bb30      	cbnz	r0, 8006ba8 <__swbuf_r+0x90>
 8006b5a:	68a3      	ldr	r3, [r4, #8]
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	60a3      	str	r3, [r4, #8]
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	701e      	strb	r6, [r3, #0]
 8006b6a:	6963      	ldr	r3, [r4, #20]
 8006b6c:	4283      	cmp	r3, r0
 8006b6e:	d004      	beq.n	8006b7a <__swbuf_r+0x62>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	07db      	lsls	r3, r3, #31
 8006b74:	d506      	bpl.n	8006b84 <__swbuf_r+0x6c>
 8006b76:	2e0a      	cmp	r6, #10
 8006b78:	d104      	bne.n	8006b84 <__swbuf_r+0x6c>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 f915 	bl	8006dac <_fflush_r>
 8006b82:	b988      	cbnz	r0, 8006ba8 <__swbuf_r+0x90>
 8006b84:	4638      	mov	r0, r7
 8006b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <__swbuf_r+0x9c>)
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	d101      	bne.n	8006b92 <__swbuf_r+0x7a>
 8006b8e:	68ac      	ldr	r4, [r5, #8]
 8006b90:	e7cf      	b.n	8006b32 <__swbuf_r+0x1a>
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <__swbuf_r+0xa0>)
 8006b94:	429c      	cmp	r4, r3
 8006b96:	bf08      	it	eq
 8006b98:	68ec      	ldreq	r4, [r5, #12]
 8006b9a:	e7ca      	b.n	8006b32 <__swbuf_r+0x1a>
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 f80c 	bl	8006bbc <__swsetup_r>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d0cb      	beq.n	8006b40 <__swbuf_r+0x28>
 8006ba8:	f04f 37ff 	mov.w	r7, #4294967295
 8006bac:	e7ea      	b.n	8006b84 <__swbuf_r+0x6c>
 8006bae:	bf00      	nop
 8006bb0:	080079c8 	.word	0x080079c8
 8006bb4:	080079e8 	.word	0x080079e8
 8006bb8:	080079a8 	.word	0x080079a8

08006bbc <__swsetup_r>:
 8006bbc:	4b32      	ldr	r3, [pc, #200]	; (8006c88 <__swsetup_r+0xcc>)
 8006bbe:	b570      	push	{r4, r5, r6, lr}
 8006bc0:	681d      	ldr	r5, [r3, #0]
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	b125      	cbz	r5, 8006bd2 <__swsetup_r+0x16>
 8006bc8:	69ab      	ldr	r3, [r5, #24]
 8006bca:	b913      	cbnz	r3, 8006bd2 <__swsetup_r+0x16>
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f000 f981 	bl	8006ed4 <__sinit>
 8006bd2:	4b2e      	ldr	r3, [pc, #184]	; (8006c8c <__swsetup_r+0xd0>)
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	d10f      	bne.n	8006bf8 <__swsetup_r+0x3c>
 8006bd8:	686c      	ldr	r4, [r5, #4]
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006be0:	0719      	lsls	r1, r3, #28
 8006be2:	d42c      	bmi.n	8006c3e <__swsetup_r+0x82>
 8006be4:	06dd      	lsls	r5, r3, #27
 8006be6:	d411      	bmi.n	8006c0c <__swsetup_r+0x50>
 8006be8:	2309      	movs	r3, #9
 8006bea:	6033      	str	r3, [r6, #0]
 8006bec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	e03e      	b.n	8006c76 <__swsetup_r+0xba>
 8006bf8:	4b25      	ldr	r3, [pc, #148]	; (8006c90 <__swsetup_r+0xd4>)
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	d101      	bne.n	8006c02 <__swsetup_r+0x46>
 8006bfe:	68ac      	ldr	r4, [r5, #8]
 8006c00:	e7eb      	b.n	8006bda <__swsetup_r+0x1e>
 8006c02:	4b24      	ldr	r3, [pc, #144]	; (8006c94 <__swsetup_r+0xd8>)
 8006c04:	429c      	cmp	r4, r3
 8006c06:	bf08      	it	eq
 8006c08:	68ec      	ldreq	r4, [r5, #12]
 8006c0a:	e7e6      	b.n	8006bda <__swsetup_r+0x1e>
 8006c0c:	0758      	lsls	r0, r3, #29
 8006c0e:	d512      	bpl.n	8006c36 <__swsetup_r+0x7a>
 8006c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c12:	b141      	cbz	r1, 8006c26 <__swsetup_r+0x6a>
 8006c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	d002      	beq.n	8006c22 <__swsetup_r+0x66>
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7ff fbdb 	bl	80063d8 <_free_r>
 8006c22:	2300      	movs	r3, #0
 8006c24:	6363      	str	r3, [r4, #52]	; 0x34
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	89a3      	ldrh	r3, [r4, #12]
 8006c38:	f043 0308 	orr.w	r3, r3, #8
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	b94b      	cbnz	r3, 8006c56 <__swsetup_r+0x9a>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4c:	d003      	beq.n	8006c56 <__swsetup_r+0x9a>
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 fa05 	bl	8007060 <__smakebuf_r>
 8006c56:	89a0      	ldrh	r0, [r4, #12]
 8006c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c5c:	f010 0301 	ands.w	r3, r0, #1
 8006c60:	d00a      	beq.n	8006c78 <__swsetup_r+0xbc>
 8006c62:	2300      	movs	r3, #0
 8006c64:	60a3      	str	r3, [r4, #8]
 8006c66:	6963      	ldr	r3, [r4, #20]
 8006c68:	425b      	negs	r3, r3
 8006c6a:	61a3      	str	r3, [r4, #24]
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	b943      	cbnz	r3, 8006c82 <__swsetup_r+0xc6>
 8006c70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c74:	d1ba      	bne.n	8006bec <__swsetup_r+0x30>
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	0781      	lsls	r1, r0, #30
 8006c7a:	bf58      	it	pl
 8006c7c:	6963      	ldrpl	r3, [r4, #20]
 8006c7e:	60a3      	str	r3, [r4, #8]
 8006c80:	e7f4      	b.n	8006c6c <__swsetup_r+0xb0>
 8006c82:	2000      	movs	r0, #0
 8006c84:	e7f7      	b.n	8006c76 <__swsetup_r+0xba>
 8006c86:	bf00      	nop
 8006c88:	2000000c 	.word	0x2000000c
 8006c8c:	080079c8 	.word	0x080079c8
 8006c90:	080079e8 	.word	0x080079e8
 8006c94:	080079a8 	.word	0x080079a8

08006c98 <abort>:
 8006c98:	2006      	movs	r0, #6
 8006c9a:	b508      	push	{r3, lr}
 8006c9c:	f000 fab0 	bl	8007200 <raise>
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	f7fb fad6 	bl	8002252 <_exit>
	...

08006ca8 <__sflush_r>:
 8006ca8:	898a      	ldrh	r2, [r1, #12]
 8006caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cac:	4605      	mov	r5, r0
 8006cae:	0710      	lsls	r0, r2, #28
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	d457      	bmi.n	8006d64 <__sflush_r+0xbc>
 8006cb4:	684b      	ldr	r3, [r1, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dc04      	bgt.n	8006cc4 <__sflush_r+0x1c>
 8006cba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dc01      	bgt.n	8006cc4 <__sflush_r+0x1c>
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d0fa      	beq.n	8006cc0 <__sflush_r+0x18>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cd0:	682f      	ldr	r7, [r5, #0]
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	d032      	beq.n	8006d3c <__sflush_r+0x94>
 8006cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	075a      	lsls	r2, r3, #29
 8006cdc:	d505      	bpl.n	8006cea <__sflush_r+0x42>
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	1ac0      	subs	r0, r0, r3
 8006ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce4:	b10b      	cbz	r3, 8006cea <__sflush_r+0x42>
 8006ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce8:	1ac0      	subs	r0, r0, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	4602      	mov	r2, r0
 8006cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	6a21      	ldr	r1, [r4, #32]
 8006cf4:	47b0      	blx	r6
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	d106      	bne.n	8006d0a <__sflush_r+0x62>
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	291d      	cmp	r1, #29
 8006d00:	d82c      	bhi.n	8006d5c <__sflush_r+0xb4>
 8006d02:	4a29      	ldr	r2, [pc, #164]	; (8006da8 <__sflush_r+0x100>)
 8006d04:	40ca      	lsrs	r2, r1
 8006d06:	07d6      	lsls	r6, r2, #31
 8006d08:	d528      	bpl.n	8006d5c <__sflush_r+0xb4>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	6062      	str	r2, [r4, #4]
 8006d0e:	6922      	ldr	r2, [r4, #16]
 8006d10:	04d9      	lsls	r1, r3, #19
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	d504      	bpl.n	8006d20 <__sflush_r+0x78>
 8006d16:	1c42      	adds	r2, r0, #1
 8006d18:	d101      	bne.n	8006d1e <__sflush_r+0x76>
 8006d1a:	682b      	ldr	r3, [r5, #0]
 8006d1c:	b903      	cbnz	r3, 8006d20 <__sflush_r+0x78>
 8006d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d22:	602f      	str	r7, [r5, #0]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d0cb      	beq.n	8006cc0 <__sflush_r+0x18>
 8006d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	d002      	beq.n	8006d36 <__sflush_r+0x8e>
 8006d30:	4628      	mov	r0, r5
 8006d32:	f7ff fb51 	bl	80063d8 <_free_r>
 8006d36:	2000      	movs	r0, #0
 8006d38:	6360      	str	r0, [r4, #52]	; 0x34
 8006d3a:	e7c2      	b.n	8006cc2 <__sflush_r+0x1a>
 8006d3c:	6a21      	ldr	r1, [r4, #32]
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b0      	blx	r6
 8006d44:	1c41      	adds	r1, r0, #1
 8006d46:	d1c7      	bne.n	8006cd8 <__sflush_r+0x30>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c4      	beq.n	8006cd8 <__sflush_r+0x30>
 8006d4e:	2b1d      	cmp	r3, #29
 8006d50:	d001      	beq.n	8006d56 <__sflush_r+0xae>
 8006d52:	2b16      	cmp	r3, #22
 8006d54:	d101      	bne.n	8006d5a <__sflush_r+0xb2>
 8006d56:	602f      	str	r7, [r5, #0]
 8006d58:	e7b2      	b.n	8006cc0 <__sflush_r+0x18>
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	e7ae      	b.n	8006cc2 <__sflush_r+0x1a>
 8006d64:	690f      	ldr	r7, [r1, #16]
 8006d66:	2f00      	cmp	r7, #0
 8006d68:	d0aa      	beq.n	8006cc0 <__sflush_r+0x18>
 8006d6a:	0793      	lsls	r3, r2, #30
 8006d6c:	bf18      	it	ne
 8006d6e:	2300      	movne	r3, #0
 8006d70:	680e      	ldr	r6, [r1, #0]
 8006d72:	bf08      	it	eq
 8006d74:	694b      	ldreq	r3, [r1, #20]
 8006d76:	1bf6      	subs	r6, r6, r7
 8006d78:	600f      	str	r7, [r1, #0]
 8006d7a:	608b      	str	r3, [r1, #8]
 8006d7c:	2e00      	cmp	r6, #0
 8006d7e:	dd9f      	ble.n	8006cc0 <__sflush_r+0x18>
 8006d80:	4633      	mov	r3, r6
 8006d82:	463a      	mov	r2, r7
 8006d84:	4628      	mov	r0, r5
 8006d86:	6a21      	ldr	r1, [r4, #32]
 8006d88:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006d8c:	47e0      	blx	ip
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	dc06      	bgt.n	8006da0 <__sflush_r+0xf8>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	e790      	b.n	8006cc2 <__sflush_r+0x1a>
 8006da0:	4407      	add	r7, r0
 8006da2:	1a36      	subs	r6, r6, r0
 8006da4:	e7ea      	b.n	8006d7c <__sflush_r+0xd4>
 8006da6:	bf00      	nop
 8006da8:	20400001 	.word	0x20400001

08006dac <_fflush_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	4605      	mov	r5, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	b913      	cbnz	r3, 8006dbc <_fflush_r+0x10>
 8006db6:	2500      	movs	r5, #0
 8006db8:	4628      	mov	r0, r5
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	b118      	cbz	r0, 8006dc6 <_fflush_r+0x1a>
 8006dbe:	6983      	ldr	r3, [r0, #24]
 8006dc0:	b90b      	cbnz	r3, 8006dc6 <_fflush_r+0x1a>
 8006dc2:	f000 f887 	bl	8006ed4 <__sinit>
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <_fflush_r+0x6c>)
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	d11b      	bne.n	8006e04 <_fflush_r+0x58>
 8006dcc:	686c      	ldr	r4, [r5, #4]
 8006dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0ef      	beq.n	8006db6 <_fflush_r+0xa>
 8006dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dd8:	07d0      	lsls	r0, r2, #31
 8006dda:	d404      	bmi.n	8006de6 <_fflush_r+0x3a>
 8006ddc:	0599      	lsls	r1, r3, #22
 8006dde:	d402      	bmi.n	8006de6 <_fflush_r+0x3a>
 8006de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006de2:	f000 f915 	bl	8007010 <__retarget_lock_acquire_recursive>
 8006de6:	4628      	mov	r0, r5
 8006de8:	4621      	mov	r1, r4
 8006dea:	f7ff ff5d 	bl	8006ca8 <__sflush_r>
 8006dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df0:	4605      	mov	r5, r0
 8006df2:	07da      	lsls	r2, r3, #31
 8006df4:	d4e0      	bmi.n	8006db8 <_fflush_r+0xc>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	059b      	lsls	r3, r3, #22
 8006dfa:	d4dd      	bmi.n	8006db8 <_fflush_r+0xc>
 8006dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfe:	f000 f908 	bl	8007012 <__retarget_lock_release_recursive>
 8006e02:	e7d9      	b.n	8006db8 <_fflush_r+0xc>
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <_fflush_r+0x70>)
 8006e06:	429c      	cmp	r4, r3
 8006e08:	d101      	bne.n	8006e0e <_fflush_r+0x62>
 8006e0a:	68ac      	ldr	r4, [r5, #8]
 8006e0c:	e7df      	b.n	8006dce <_fflush_r+0x22>
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <_fflush_r+0x74>)
 8006e10:	429c      	cmp	r4, r3
 8006e12:	bf08      	it	eq
 8006e14:	68ec      	ldreq	r4, [r5, #12]
 8006e16:	e7da      	b.n	8006dce <_fflush_r+0x22>
 8006e18:	080079c8 	.word	0x080079c8
 8006e1c:	080079e8 	.word	0x080079e8
 8006e20:	080079a8 	.word	0x080079a8

08006e24 <std>:
 8006e24:	2300      	movs	r3, #0
 8006e26:	b510      	push	{r4, lr}
 8006e28:	4604      	mov	r4, r0
 8006e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e32:	6083      	str	r3, [r0, #8]
 8006e34:	8181      	strh	r1, [r0, #12]
 8006e36:	6643      	str	r3, [r0, #100]	; 0x64
 8006e38:	81c2      	strh	r2, [r0, #14]
 8006e3a:	6183      	str	r3, [r0, #24]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	2208      	movs	r2, #8
 8006e40:	305c      	adds	r0, #92	; 0x5c
 8006e42:	f7fd fba1 	bl	8004588 <memset>
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <std+0x38>)
 8006e48:	6224      	str	r4, [r4, #32]
 8006e4a:	6263      	str	r3, [r4, #36]	; 0x24
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <std+0x3c>)
 8006e4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e50:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <std+0x40>)
 8006e52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <std+0x44>)
 8006e56:	6323      	str	r3, [r4, #48]	; 0x30
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	bf00      	nop
 8006e5c:	08007239 	.word	0x08007239
 8006e60:	0800725b 	.word	0x0800725b
 8006e64:	08007293 	.word	0x08007293
 8006e68:	080072b7 	.word	0x080072b7

08006e6c <_cleanup_r>:
 8006e6c:	4901      	ldr	r1, [pc, #4]	; (8006e74 <_cleanup_r+0x8>)
 8006e6e:	f000 b8af 	b.w	8006fd0 <_fwalk_reent>
 8006e72:	bf00      	nop
 8006e74:	08006dad 	.word	0x08006dad

08006e78 <__sfmoreglue>:
 8006e78:	2268      	movs	r2, #104	; 0x68
 8006e7a:	b570      	push	{r4, r5, r6, lr}
 8006e7c:	1e4d      	subs	r5, r1, #1
 8006e7e:	4355      	muls	r5, r2
 8006e80:	460e      	mov	r6, r1
 8006e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e86:	f7ff fb0f 	bl	80064a8 <_malloc_r>
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	b140      	cbz	r0, 8006ea0 <__sfmoreglue+0x28>
 8006e8e:	2100      	movs	r1, #0
 8006e90:	e9c0 1600 	strd	r1, r6, [r0]
 8006e94:	300c      	adds	r0, #12
 8006e96:	60a0      	str	r0, [r4, #8]
 8006e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e9c:	f7fd fb74 	bl	8004588 <memset>
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}

08006ea4 <__sfp_lock_acquire>:
 8006ea4:	4801      	ldr	r0, [pc, #4]	; (8006eac <__sfp_lock_acquire+0x8>)
 8006ea6:	f000 b8b3 	b.w	8007010 <__retarget_lock_acquire_recursive>
 8006eaa:	bf00      	nop
 8006eac:	200003c9 	.word	0x200003c9

08006eb0 <__sfp_lock_release>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <__sfp_lock_release+0x8>)
 8006eb2:	f000 b8ae 	b.w	8007012 <__retarget_lock_release_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	200003c9 	.word	0x200003c9

08006ebc <__sinit_lock_acquire>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <__sinit_lock_acquire+0x8>)
 8006ebe:	f000 b8a7 	b.w	8007010 <__retarget_lock_acquire_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	200003ca 	.word	0x200003ca

08006ec8 <__sinit_lock_release>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__sinit_lock_release+0x8>)
 8006eca:	f000 b8a2 	b.w	8007012 <__retarget_lock_release_recursive>
 8006ece:	bf00      	nop
 8006ed0:	200003ca 	.word	0x200003ca

08006ed4 <__sinit>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	f7ff fff0 	bl	8006ebc <__sinit_lock_acquire>
 8006edc:	69a3      	ldr	r3, [r4, #24]
 8006ede:	b11b      	cbz	r3, 8006ee8 <__sinit+0x14>
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee4:	f7ff bff0 	b.w	8006ec8 <__sinit_lock_release>
 8006ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006eec:	6523      	str	r3, [r4, #80]	; 0x50
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <__sinit+0x68>)
 8006ef0:	4a13      	ldr	r2, [pc, #76]	; (8006f40 <__sinit+0x6c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ef6:	42a3      	cmp	r3, r4
 8006ef8:	bf08      	it	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	4620      	mov	r0, r4
 8006efe:	bf08      	it	eq
 8006f00:	61a3      	streq	r3, [r4, #24]
 8006f02:	f000 f81f 	bl	8006f44 <__sfp>
 8006f06:	6060      	str	r0, [r4, #4]
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 f81b 	bl	8006f44 <__sfp>
 8006f0e:	60a0      	str	r0, [r4, #8]
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 f817 	bl	8006f44 <__sfp>
 8006f16:	2200      	movs	r2, #0
 8006f18:	2104      	movs	r1, #4
 8006f1a:	60e0      	str	r0, [r4, #12]
 8006f1c:	6860      	ldr	r0, [r4, #4]
 8006f1e:	f7ff ff81 	bl	8006e24 <std>
 8006f22:	2201      	movs	r2, #1
 8006f24:	2109      	movs	r1, #9
 8006f26:	68a0      	ldr	r0, [r4, #8]
 8006f28:	f7ff ff7c 	bl	8006e24 <std>
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	2112      	movs	r1, #18
 8006f30:	68e0      	ldr	r0, [r4, #12]
 8006f32:	f7ff ff77 	bl	8006e24 <std>
 8006f36:	2301      	movs	r3, #1
 8006f38:	61a3      	str	r3, [r4, #24]
 8006f3a:	e7d1      	b.n	8006ee0 <__sinit+0xc>
 8006f3c:	080076d8 	.word	0x080076d8
 8006f40:	08006e6d 	.word	0x08006e6d

08006f44 <__sfp>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	4607      	mov	r7, r0
 8006f48:	f7ff ffac 	bl	8006ea4 <__sfp_lock_acquire>
 8006f4c:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <__sfp+0x84>)
 8006f4e:	681e      	ldr	r6, [r3, #0]
 8006f50:	69b3      	ldr	r3, [r6, #24]
 8006f52:	b913      	cbnz	r3, 8006f5a <__sfp+0x16>
 8006f54:	4630      	mov	r0, r6
 8006f56:	f7ff ffbd 	bl	8006ed4 <__sinit>
 8006f5a:	3648      	adds	r6, #72	; 0x48
 8006f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	d503      	bpl.n	8006f6c <__sfp+0x28>
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	b30b      	cbz	r3, 8006fac <__sfp+0x68>
 8006f68:	6836      	ldr	r6, [r6, #0]
 8006f6a:	e7f7      	b.n	8006f5c <__sfp+0x18>
 8006f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f70:	b9d5      	cbnz	r5, 8006fa8 <__sfp+0x64>
 8006f72:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <__sfp+0x88>)
 8006f74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f78:	60e3      	str	r3, [r4, #12]
 8006f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f7c:	f000 f847 	bl	800700e <__retarget_lock_init_recursive>
 8006f80:	f7ff ff96 	bl	8006eb0 <__sfp_lock_release>
 8006f84:	2208      	movs	r2, #8
 8006f86:	4629      	mov	r1, r5
 8006f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f90:	6025      	str	r5, [r4, #0]
 8006f92:	61a5      	str	r5, [r4, #24]
 8006f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f98:	f7fd faf6 	bl	8004588 <memset>
 8006f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa8:	3468      	adds	r4, #104	; 0x68
 8006faa:	e7d9      	b.n	8006f60 <__sfp+0x1c>
 8006fac:	2104      	movs	r1, #4
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f7ff ff62 	bl	8006e78 <__sfmoreglue>
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	6030      	str	r0, [r6, #0]
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d1d5      	bne.n	8006f68 <__sfp+0x24>
 8006fbc:	f7ff ff78 	bl	8006eb0 <__sfp_lock_release>
 8006fc0:	230c      	movs	r3, #12
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	e7ee      	b.n	8006fa4 <__sfp+0x60>
 8006fc6:	bf00      	nop
 8006fc8:	080076d8 	.word	0x080076d8
 8006fcc:	ffff0001 	.word	0xffff0001

08006fd0 <_fwalk_reent>:
 8006fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	4688      	mov	r8, r1
 8006fd8:	2700      	movs	r7, #0
 8006fda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8006fe6:	d505      	bpl.n	8006ff4 <_fwalk_reent+0x24>
 8006fe8:	6824      	ldr	r4, [r4, #0]
 8006fea:	2c00      	cmp	r4, #0
 8006fec:	d1f7      	bne.n	8006fde <_fwalk_reent+0xe>
 8006fee:	4638      	mov	r0, r7
 8006ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff4:	89ab      	ldrh	r3, [r5, #12]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d907      	bls.n	800700a <_fwalk_reent+0x3a>
 8006ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ffe:	3301      	adds	r3, #1
 8007000:	d003      	beq.n	800700a <_fwalk_reent+0x3a>
 8007002:	4629      	mov	r1, r5
 8007004:	4630      	mov	r0, r6
 8007006:	47c0      	blx	r8
 8007008:	4307      	orrs	r7, r0
 800700a:	3568      	adds	r5, #104	; 0x68
 800700c:	e7e9      	b.n	8006fe2 <_fwalk_reent+0x12>

0800700e <__retarget_lock_init_recursive>:
 800700e:	4770      	bx	lr

08007010 <__retarget_lock_acquire_recursive>:
 8007010:	4770      	bx	lr

08007012 <__retarget_lock_release_recursive>:
 8007012:	4770      	bx	lr

08007014 <__swhatbuf_r>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	460e      	mov	r6, r1
 8007018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701c:	4614      	mov	r4, r2
 800701e:	2900      	cmp	r1, #0
 8007020:	461d      	mov	r5, r3
 8007022:	b096      	sub	sp, #88	; 0x58
 8007024:	da08      	bge.n	8007038 <__swhatbuf_r+0x24>
 8007026:	2200      	movs	r2, #0
 8007028:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	061a      	lsls	r2, r3, #24
 8007030:	d410      	bmi.n	8007054 <__swhatbuf_r+0x40>
 8007032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007036:	e00e      	b.n	8007056 <__swhatbuf_r+0x42>
 8007038:	466a      	mov	r2, sp
 800703a:	f000 f96f 	bl	800731c <_fstat_r>
 800703e:	2800      	cmp	r0, #0
 8007040:	dbf1      	blt.n	8007026 <__swhatbuf_r+0x12>
 8007042:	9a01      	ldr	r2, [sp, #4]
 8007044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800704c:	425a      	negs	r2, r3
 800704e:	415a      	adcs	r2, r3
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	e7ee      	b.n	8007032 <__swhatbuf_r+0x1e>
 8007054:	2340      	movs	r3, #64	; 0x40
 8007056:	2000      	movs	r0, #0
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	b016      	add	sp, #88	; 0x58
 800705c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007060 <__smakebuf_r>:
 8007060:	898b      	ldrh	r3, [r1, #12]
 8007062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007064:	079d      	lsls	r5, r3, #30
 8007066:	4606      	mov	r6, r0
 8007068:	460c      	mov	r4, r1
 800706a:	d507      	bpl.n	800707c <__smakebuf_r+0x1c>
 800706c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	2301      	movs	r3, #1
 8007076:	6163      	str	r3, [r4, #20]
 8007078:	b002      	add	sp, #8
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	466a      	mov	r2, sp
 800707e:	ab01      	add	r3, sp, #4
 8007080:	f7ff ffc8 	bl	8007014 <__swhatbuf_r>
 8007084:	9900      	ldr	r1, [sp, #0]
 8007086:	4605      	mov	r5, r0
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff fa0d 	bl	80064a8 <_malloc_r>
 800708e:	b948      	cbnz	r0, 80070a4 <__smakebuf_r+0x44>
 8007090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007094:	059a      	lsls	r2, r3, #22
 8007096:	d4ef      	bmi.n	8007078 <__smakebuf_r+0x18>
 8007098:	f023 0303 	bic.w	r3, r3, #3
 800709c:	f043 0302 	orr.w	r3, r3, #2
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	e7e3      	b.n	800706c <__smakebuf_r+0xc>
 80070a4:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <__smakebuf_r+0x7c>)
 80070a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	6020      	str	r0, [r4, #0]
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	9b00      	ldr	r3, [sp, #0]
 80070b4:	6120      	str	r0, [r4, #16]
 80070b6:	6163      	str	r3, [r4, #20]
 80070b8:	9b01      	ldr	r3, [sp, #4]
 80070ba:	b15b      	cbz	r3, 80070d4 <__smakebuf_r+0x74>
 80070bc:	4630      	mov	r0, r6
 80070be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c2:	f000 f93d 	bl	8007340 <_isatty_r>
 80070c6:	b128      	cbz	r0, 80070d4 <__smakebuf_r+0x74>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	89a0      	ldrh	r0, [r4, #12]
 80070d6:	4305      	orrs	r5, r0
 80070d8:	81a5      	strh	r5, [r4, #12]
 80070da:	e7cd      	b.n	8007078 <__smakebuf_r+0x18>
 80070dc:	08006e6d 	.word	0x08006e6d

080070e0 <__ascii_mbtowc>:
 80070e0:	b082      	sub	sp, #8
 80070e2:	b901      	cbnz	r1, 80070e6 <__ascii_mbtowc+0x6>
 80070e4:	a901      	add	r1, sp, #4
 80070e6:	b142      	cbz	r2, 80070fa <__ascii_mbtowc+0x1a>
 80070e8:	b14b      	cbz	r3, 80070fe <__ascii_mbtowc+0x1e>
 80070ea:	7813      	ldrb	r3, [r2, #0]
 80070ec:	600b      	str	r3, [r1, #0]
 80070ee:	7812      	ldrb	r2, [r2, #0]
 80070f0:	1e10      	subs	r0, r2, #0
 80070f2:	bf18      	it	ne
 80070f4:	2001      	movne	r0, #1
 80070f6:	b002      	add	sp, #8
 80070f8:	4770      	bx	lr
 80070fa:	4610      	mov	r0, r2
 80070fc:	e7fb      	b.n	80070f6 <__ascii_mbtowc+0x16>
 80070fe:	f06f 0001 	mvn.w	r0, #1
 8007102:	e7f8      	b.n	80070f6 <__ascii_mbtowc+0x16>

08007104 <memmove>:
 8007104:	4288      	cmp	r0, r1
 8007106:	b510      	push	{r4, lr}
 8007108:	eb01 0402 	add.w	r4, r1, r2
 800710c:	d902      	bls.n	8007114 <memmove+0x10>
 800710e:	4284      	cmp	r4, r0
 8007110:	4623      	mov	r3, r4
 8007112:	d807      	bhi.n	8007124 <memmove+0x20>
 8007114:	1e43      	subs	r3, r0, #1
 8007116:	42a1      	cmp	r1, r4
 8007118:	d008      	beq.n	800712c <memmove+0x28>
 800711a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800711e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007122:	e7f8      	b.n	8007116 <memmove+0x12>
 8007124:	4601      	mov	r1, r0
 8007126:	4402      	add	r2, r0
 8007128:	428a      	cmp	r2, r1
 800712a:	d100      	bne.n	800712e <memmove+0x2a>
 800712c:	bd10      	pop	{r4, pc}
 800712e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007136:	e7f7      	b.n	8007128 <memmove+0x24>

08007138 <__malloc_lock>:
 8007138:	4801      	ldr	r0, [pc, #4]	; (8007140 <__malloc_lock+0x8>)
 800713a:	f7ff bf69 	b.w	8007010 <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	200003c8 	.word	0x200003c8

08007144 <__malloc_unlock>:
 8007144:	4801      	ldr	r0, [pc, #4]	; (800714c <__malloc_unlock+0x8>)
 8007146:	f7ff bf64 	b.w	8007012 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	200003c8 	.word	0x200003c8

08007150 <_realloc_r>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	4680      	mov	r8, r0
 8007156:	4614      	mov	r4, r2
 8007158:	460e      	mov	r6, r1
 800715a:	b921      	cbnz	r1, 8007166 <_realloc_r+0x16>
 800715c:	4611      	mov	r1, r2
 800715e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007162:	f7ff b9a1 	b.w	80064a8 <_malloc_r>
 8007166:	b92a      	cbnz	r2, 8007174 <_realloc_r+0x24>
 8007168:	f7ff f936 	bl	80063d8 <_free_r>
 800716c:	4625      	mov	r5, r4
 800716e:	4628      	mov	r0, r5
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	f000 f906 	bl	8007384 <_malloc_usable_size_r>
 8007178:	4284      	cmp	r4, r0
 800717a:	4607      	mov	r7, r0
 800717c:	d802      	bhi.n	8007184 <_realloc_r+0x34>
 800717e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007182:	d812      	bhi.n	80071aa <_realloc_r+0x5a>
 8007184:	4621      	mov	r1, r4
 8007186:	4640      	mov	r0, r8
 8007188:	f7ff f98e 	bl	80064a8 <_malloc_r>
 800718c:	4605      	mov	r5, r0
 800718e:	2800      	cmp	r0, #0
 8007190:	d0ed      	beq.n	800716e <_realloc_r+0x1e>
 8007192:	42bc      	cmp	r4, r7
 8007194:	4622      	mov	r2, r4
 8007196:	4631      	mov	r1, r6
 8007198:	bf28      	it	cs
 800719a:	463a      	movcs	r2, r7
 800719c:	f7fd f9e6 	bl	800456c <memcpy>
 80071a0:	4631      	mov	r1, r6
 80071a2:	4640      	mov	r0, r8
 80071a4:	f7ff f918 	bl	80063d8 <_free_r>
 80071a8:	e7e1      	b.n	800716e <_realloc_r+0x1e>
 80071aa:	4635      	mov	r5, r6
 80071ac:	e7df      	b.n	800716e <_realloc_r+0x1e>

080071ae <_raise_r>:
 80071ae:	291f      	cmp	r1, #31
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4604      	mov	r4, r0
 80071b4:	460d      	mov	r5, r1
 80071b6:	d904      	bls.n	80071c2 <_raise_r+0x14>
 80071b8:	2316      	movs	r3, #22
 80071ba:	6003      	str	r3, [r0, #0]
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	bd38      	pop	{r3, r4, r5, pc}
 80071c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071c4:	b112      	cbz	r2, 80071cc <_raise_r+0x1e>
 80071c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071ca:	b94b      	cbnz	r3, 80071e0 <_raise_r+0x32>
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 f831 	bl	8007234 <_getpid_r>
 80071d2:	462a      	mov	r2, r5
 80071d4:	4601      	mov	r1, r0
 80071d6:	4620      	mov	r0, r4
 80071d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071dc:	f000 b818 	b.w	8007210 <_kill_r>
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d00a      	beq.n	80071fa <_raise_r+0x4c>
 80071e4:	1c59      	adds	r1, r3, #1
 80071e6:	d103      	bne.n	80071f0 <_raise_r+0x42>
 80071e8:	2316      	movs	r3, #22
 80071ea:	6003      	str	r3, [r0, #0]
 80071ec:	2001      	movs	r0, #1
 80071ee:	e7e7      	b.n	80071c0 <_raise_r+0x12>
 80071f0:	2400      	movs	r4, #0
 80071f2:	4628      	mov	r0, r5
 80071f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071f8:	4798      	blx	r3
 80071fa:	2000      	movs	r0, #0
 80071fc:	e7e0      	b.n	80071c0 <_raise_r+0x12>
	...

08007200 <raise>:
 8007200:	4b02      	ldr	r3, [pc, #8]	; (800720c <raise+0xc>)
 8007202:	4601      	mov	r1, r0
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	f7ff bfd2 	b.w	80071ae <_raise_r>
 800720a:	bf00      	nop
 800720c:	2000000c 	.word	0x2000000c

08007210 <_kill_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	2300      	movs	r3, #0
 8007214:	4d06      	ldr	r5, [pc, #24]	; (8007230 <_kill_r+0x20>)
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	4611      	mov	r1, r2
 800721c:	602b      	str	r3, [r5, #0]
 800721e:	f7fb f808 	bl	8002232 <_kill>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	d102      	bne.n	800722c <_kill_r+0x1c>
 8007226:	682b      	ldr	r3, [r5, #0]
 8007228:	b103      	cbz	r3, 800722c <_kill_r+0x1c>
 800722a:	6023      	str	r3, [r4, #0]
 800722c:	bd38      	pop	{r3, r4, r5, pc}
 800722e:	bf00      	nop
 8007230:	200003cc 	.word	0x200003cc

08007234 <_getpid_r>:
 8007234:	f7fa bff6 	b.w	8002224 <_getpid>

08007238 <__sread>:
 8007238:	b510      	push	{r4, lr}
 800723a:	460c      	mov	r4, r1
 800723c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007240:	f000 f8a8 	bl	8007394 <_read_r>
 8007244:	2800      	cmp	r0, #0
 8007246:	bfab      	itete	ge
 8007248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800724a:	89a3      	ldrhlt	r3, [r4, #12]
 800724c:	181b      	addge	r3, r3, r0
 800724e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007252:	bfac      	ite	ge
 8007254:	6563      	strge	r3, [r4, #84]	; 0x54
 8007256:	81a3      	strhlt	r3, [r4, #12]
 8007258:	bd10      	pop	{r4, pc}

0800725a <__swrite>:
 800725a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725e:	461f      	mov	r7, r3
 8007260:	898b      	ldrh	r3, [r1, #12]
 8007262:	4605      	mov	r5, r0
 8007264:	05db      	lsls	r3, r3, #23
 8007266:	460c      	mov	r4, r1
 8007268:	4616      	mov	r6, r2
 800726a:	d505      	bpl.n	8007278 <__swrite+0x1e>
 800726c:	2302      	movs	r3, #2
 800726e:	2200      	movs	r2, #0
 8007270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007274:	f000 f874 	bl	8007360 <_lseek_r>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	4632      	mov	r2, r6
 800727c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007280:	81a3      	strh	r3, [r4, #12]
 8007282:	4628      	mov	r0, r5
 8007284:	463b      	mov	r3, r7
 8007286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800728a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800728e:	f000 b823 	b.w	80072d8 <_write_r>

08007292 <__sseek>:
 8007292:	b510      	push	{r4, lr}
 8007294:	460c      	mov	r4, r1
 8007296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729a:	f000 f861 	bl	8007360 <_lseek_r>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	bf15      	itete	ne
 80072a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80072a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072ae:	81a3      	strheq	r3, [r4, #12]
 80072b0:	bf18      	it	ne
 80072b2:	81a3      	strhne	r3, [r4, #12]
 80072b4:	bd10      	pop	{r4, pc}

080072b6 <__sclose>:
 80072b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ba:	f000 b81f 	b.w	80072fc <_close_r>

080072be <__ascii_wctomb>:
 80072be:	4603      	mov	r3, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	b141      	cbz	r1, 80072d6 <__ascii_wctomb+0x18>
 80072c4:	2aff      	cmp	r2, #255	; 0xff
 80072c6:	d904      	bls.n	80072d2 <__ascii_wctomb+0x14>
 80072c8:	228a      	movs	r2, #138	; 0x8a
 80072ca:	f04f 30ff 	mov.w	r0, #4294967295
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	4770      	bx	lr
 80072d2:	2001      	movs	r0, #1
 80072d4:	700a      	strb	r2, [r1, #0]
 80072d6:	4770      	bx	lr

080072d8 <_write_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	2200      	movs	r2, #0
 80072e2:	4d05      	ldr	r5, [pc, #20]	; (80072f8 <_write_r+0x20>)
 80072e4:	602a      	str	r2, [r5, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f7fa ffda 	bl	80022a0 <_write>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_write_r+0x1e>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_write_r+0x1e>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	200003cc 	.word	0x200003cc

080072fc <_close_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	2300      	movs	r3, #0
 8007300:	4d05      	ldr	r5, [pc, #20]	; (8007318 <_close_r+0x1c>)
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7fa ffe6 	bl	80022d8 <_close>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_close_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_close_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	200003cc 	.word	0x200003cc

0800731c <_fstat_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	2300      	movs	r3, #0
 8007320:	4d06      	ldr	r5, [pc, #24]	; (800733c <_fstat_r+0x20>)
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	602b      	str	r3, [r5, #0]
 800732a:	f7fa ffe0 	bl	80022ee <_fstat>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	d102      	bne.n	8007338 <_fstat_r+0x1c>
 8007332:	682b      	ldr	r3, [r5, #0]
 8007334:	b103      	cbz	r3, 8007338 <_fstat_r+0x1c>
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	200003cc 	.word	0x200003cc

08007340 <_isatty_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	2300      	movs	r3, #0
 8007344:	4d05      	ldr	r5, [pc, #20]	; (800735c <_isatty_r+0x1c>)
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	602b      	str	r3, [r5, #0]
 800734c:	f7fa ffde 	bl	800230c <_isatty>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_isatty_r+0x1a>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_isatty_r+0x1a>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	200003cc 	.word	0x200003cc

08007360 <_lseek_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	4611      	mov	r1, r2
 8007368:	2200      	movs	r2, #0
 800736a:	4d05      	ldr	r5, [pc, #20]	; (8007380 <_lseek_r+0x20>)
 800736c:	602a      	str	r2, [r5, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f7fa ffd6 	bl	8002320 <_lseek>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_lseek_r+0x1e>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_lseek_r+0x1e>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	200003cc 	.word	0x200003cc

08007384 <_malloc_usable_size_r>:
 8007384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007388:	1f18      	subs	r0, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	bfbc      	itt	lt
 800738e:	580b      	ldrlt	r3, [r1, r0]
 8007390:	18c0      	addlt	r0, r0, r3
 8007392:	4770      	bx	lr

08007394 <_read_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	4611      	mov	r1, r2
 800739c:	2200      	movs	r2, #0
 800739e:	4d05      	ldr	r5, [pc, #20]	; (80073b4 <_read_r+0x20>)
 80073a0:	602a      	str	r2, [r5, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f7fa ff5f 	bl	8002266 <_read>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_read_r+0x1e>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_read_r+0x1e>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	200003cc 	.word	0x200003cc

080073b8 <_init>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr

080073c4 <_fini>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr
